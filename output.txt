[
    {
        "page": 1,
        "url": "https://tproger.ru/",
        "posts": [
            {
                "url": "https://tproger.ru/problems/girl-counts-on-fingers/",
                "title": "Маленькая девочка считает до 1000 — на каком пальце она закончит?",
                "created_date": "10 января 2020 в 18:48",
                "body": "Перевод задачи из книги «Algorithmic Puzzles», Anany Levitin, Maria Levitin\nМаленькая девочка считает от 1 до 1000 на пальцах левой руки следующим образом.\nОна начинает с большого пальца — это 1. Указательный — 2. Средний — 3. Безымянный — 4. Мизинец — 5.\nИ продолжает в обратную сторону: безымянный — 6, средний — 7, указательный — 8, большой — 9. Потом указательный — 10 и так далее.\nЕсли она продолжит считать таким образом, на каком пальце она закончит?\nОтвет\nНа указательном.\nПочему?\nВот как девочка считала:\nЛегко заметить, что полный цикл занимает 8 счетов. Поэтому чтобы ответить на вопрос, нужно найти остаток от деления 1000 на 8. Он равен 0. Таким образом, когда девочка досчитает до 1000, она окажется на указательном пальце. На том же пальце, на котором она будет оказываться каждый раз, когда будет называть число, которое без остатка делится на 8.\nНе смешно? А здесь смешно: \n@ithumor\nЗадачи умеренной сложности\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nНахождение максимума из двух чисел без условных операторов и операторов сравнения\nЗадача о самолете на ленте транспортера: взлетит или не взлетит?\nЛогическая задача про электрика и 49 кабелей",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/iconfinder_012_024_girl_child_baby_2514670-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1203px\" viewBox=\"0 0 1203 387\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Screenshot_18.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/firefox-privacy-an-introduction-to-safe/",
                "title": "Как защитить себя от слежки в интернете: разбираемся с конфиденциальностью в Firefox",
                "created_date": "9 января 2020 в 19:48",
                "body": "Перевод статьи \n«Firefox Privacy: Tips and Tricks for Better Browsing»\nВеб-сайты стараются заполучить любой возможный кусочек информации о вас, потому что от того, насколько хорошо они вас знают, напрямую зависит их доход. Защититься от такого навязчивого внимания — непростая задача, потому что необходимо учитывать сразу множество факторов. Разбираемся, какие угрозы поджидают вас в Сети и что можно сделать, чтобы сохранить свои данные в секрете, используя инструменты браузера Firefox.\nИмейте в виду, что когда вы посещаете веб-страницу, ваш браузер отправляет ей информацию о своей конфигурации (доступные шрифты, тип браузера и плагины) — это называется цифровой отпечаток браузера. Если эта информация уникальна, есть вероятность, что вас можно будет идентифицировать и отслеживать и без более распространённых инструментов вроде файлов cookies. Плагины браузера делают его цифровой отпечаток более уникальным и упрощают отслеживание. Поэтому не нужно использовать все настройки, рекомендованные в этой статье. Подумайте о своей ситуации и выберете только то, что вам нужно.\nПриватность и защита Firefox\nНачнём с самого простого. У Firefox есть ряд встроенных настроек конфиденциальности, которые не требуют никаких дополнений. Откройте страницу \nНастройки,\n мы рассмотрим их по порядку.\nDNS через HTTPS\nDNS — это протокол, который браузер использует для преобразования доменных имён, таких как \nprivacytools.io\n, в IP-адреса, например \n145.239.169.56\n. Компьютеры могут подключаться только к IP-адресам, поэтому DNS используется каждый раз, когда вы посещаете новый домен. Но DNS-запросы по умолчанию не зашифрованы — практически каждый в вашей сети, включая интернет-провайдера, может просматривать, какие домены вы ищете, а в некоторых ситуациях даже изменять их IP-адреса, перенаправляя вас на свои сайты. Шифрование DNS-трафика защитит ваши запросы.\nШифрование DNS-запросов реализуется разными способами: DNS через HTTPS (DoH), DNS через TLS, DNSCrypt и т. д., но все они делают одно и то же. Они хранят DNS-запросы в секрете от интернет-провайдера и следят, чтобы никто не вмешивался в передачу запроса вашему DNS-провайдеру.\nFirefox недавно добавил в браузер встроенную поддержку DoH. На странице «Основные» в настройках откройте «Параметры сети». В нижней части окна вы сможете выбрать «Включить DNS через HTTPS» и указать провайдера этой услуги:\nНастройки > Основные > Параметры сети > Включить DNS через HTTPS\nПомните, что используя DoH вы отправляете все свои запросы одному провайдеру, например Cloudflare. Убедитесь, что поставщику DoH можно доверять.\nВажно, что даже с DoH ваш интернет-провайдер будет по-прежнему видеть, к какому домену вы подключаетесь, благодаря технологии SNI (индикация имени сервера). Пока SNI зашифрован, обойти его невозможно. В Firefox зашифрованный SNI (eSNI) находится в разработке, поэтому его использование ограничено небольшим количеством серверов в основном управляемых Cloudflare. Хотя DoH предоставляет некоторые дополнительные средства защиты конфиденциальности и целостности, он не может выступать полноценной защитой без дополнительных инструментов, таких как eSNI и DNSSEC.\nСмените поисковую систему по умолчанию\nЭто легко. На вкладке «Поиск» измените поисковую систему по умолчанию на что-то кроме Google. Из встроенных поисковиков самый конфиденциальный, вероятно, DuckDuckGo.\nПараметры / Настройки > Поиск > Поисковая система по умолчанию\nУлучшенная защита от отслеживания\nТеперь мы рассмотрим самый большой набор опций во вкладке «Приватность и защита». Прежде всего это улучшенная защита от отслеживания. Этот набор фильтров по умолчанию установлен на «стандартный», но его можно изменить на «строгий» для более надёжной защиты.\nНастройки конфиденциальности Firefox позволяют включить строгую защиту просмотра, защищая вас от многих трекеров, cookies и криптомайнеров\nИногда строгая защита браузера может привести к некорректной работе некоторых веб-сайтов. Но не нужно беспокоиться: если вы подозреваете, что строгая защита нарушает работу сайта, вы можете отключить её отдельно для этого сайта с помощью значка щита в адресной строке.\nОтключение расширенной защиты от отслеживания снизит вашу конфиденциальность на этом сайте, поэтому подумайте, хотите ли вы пойти на такой компромисс.\nЕщё одно преимущество улучшенной защиты от отслеживания Firefox — она может ускорить загрузку веб-страниц. Рекламные баннеры и виджеты социальных сетей часто перегружают браузер. Их блокировка может ускорить сёрфинг.\nОтключение телеметрии\nКогда вы используете Firefox, Mozilla собирает информацию о том, что именно вы делаете, какие расширения у вас установлены и о других аспектах вашего браузера. Хотя они утверждают, что делают это с соблюдением приватности, всегда лучше отправлять как можно меньше данных. Поэтому в целях безопасности лучше снять все флажки в разделе «Сбор и использование данных Firefox».\nПараметры / Настройки > Приватность и защита > Сбор и использование данных Firefox\nОчистка cookies и данных сайта\nЭта опция для более опытных пользователей, поэтому если вы не понимаете, что это даст, лучше пропустите этот раздел. Firefox предоставляет возможность удалять все ваши куки и данные сайта каждый раз, когда браузер закрывается. Куки и данные сайта — это небольшие фрагменты информации, которые хранятся в вашем браузере и имеют множество применений. Они используются для сохранения сессии и настроек сайта, но также могут использоваться для отслеживания вас на разных сайтах. Регулярно удаляя куки вы сохраните браузер «чистым» для веб-сайтов и им будет сложнее вас отслеживать.\nМинус такой настройки — вас будет постоянно разлогинивать с сайтов, поэтому подумайте, готовы ли вы с этим мириться.\nFirefox-дополнения для защиты данных\nКонечно, одни только настройки браузера не помогут защитить вашу конфиденциальность. Mozilla пошла на множество компромиссов, чтобы обеспечить более функциональные возможности просмотра для обычного пользователя, что вполне понятно. Но можно пойти ещё дальше и установить расширения для браузера, которые предотвратят отслеживание и сделают вашу работу более приватной и безопасной.\nuBlock Origin\nuBlock Origin — эффективный блокировщик рекламы и трекеров, которому не требуется много памяти, но при этом он может загружать и применять больше фильтров, чем конкурирующие блокировщики. А ещё у него открытый исходный код. Кроме того, в отличие от конкурентов, у него нет стратегии монетизации: здесь нет рекламной программы «Приемлемо» или подобного белого списка, как у многих других расширений для блокировки рекламы.\nHTTPS Everywhere\nHTTPS Everywhere перенаправляет HTTP-трафик на HTTPS там, где это возможно. Оно работает в фоновом режиме, и вы, вероятно, этого даже не заметите. HTTPS Everywhere имеет открытый исходный код и разработан Electronic Frontier Foundation, некоммерческой организацией, специализирующейся на приватных и безопасных технологиях.\nПравда, плагин работает только с сайтами, которые поддерживают HTTPS на стороне сервера, поэтому вам всё равно нужно следить за адресной строкой, чтобы убедиться, что ваше подключение надёжно. Но, к счастью, большинство сайтов уже внедрили HTTPS благодаря появлению бесплатных сертификатов от организаций вроде Let’s Encrypt.\nDecentraleyes\nКогда вы подключаетесь к веб-сайтам, ваш браузер скорее всего подключается к множеству «сетей доставки контента» (CDN), таких как Google Fonts, Akamai и Cloudflare, для загрузки шрифтов и кода JavaScript, который обеспечивает работу сайта. Таким образом веб-сайты лучше выглядят и работают, но из-за того, что вы постоянно подключаетесь к этим серверам, они могут составить достаточно точный профиль для отслеживания.\nDecentraleyes выдаёт себя за эти CDN локально в вашем браузере. Когда веб-сайт хочет загрузить скрипт, вместо подключения к удалённому CDN Decentraleyes будет подгружать файл из собственного кэша. Вам не нужно будет устанавливать удалённые CDN-соединения для файлов, которые поддерживает Decentraleyes, поэтому удалённые CDN не смогут отслеживать ваш браузер. Кроме того, веб-страницы будут загружаться быстрее, поскольку данные хранятся локально, а не на удалённом сервере.\nPrivacy Badger\nPrivacy Badger — плагин для защиты от отслеживания в Firefox, разработанный Electronic Frontier Foundation (авторами HTTPS Everywhere). Он обеспечивает безопасность пользователя в интернете, блокируя различные трекеры.\nCanvas Defender\nЦифровой отпечаток является результатом функции трансформации данных, выполненной компьютером. Веб-сайт посылает в браузер набор инструкций по отрисовке изображения. Браузер превращает инструкции в картинку. Из-за различий в методике обработки инструкций разным железом и приложениями, изображение, полученное на разных машинах, содержит небольшие отличия. Сайты могут запоминать эти отличия и сравнивать друг с другом как отпечатки.\nCanvas Defender добавляет устойчивый «шум» к итоговой картинке, таким образом изменяя ваш оригинальный цифровой отпечаток. Само по себе это не препятствует отслеживанию вашего компьютера, но позволяет сбросить слежку в нужный момент.\nBloody Vikings\nУпрощает использование временных адресов электронной почты, чтобы защитить ваш реальный адрес от спама.\nMailvelope\nMailvelope — это бесплатное программное обеспечение для сквозного шифрования почтового трафика внутри веб-браузера, которое интегрируется в существующие приложения веб-почты.\nGmail, Hotmail и Outlook предоставляют свои почтовые услуги по всему миру, и в них используется менее безопасное шифрование, встроенное в JavaScript. Такое шифрование может быть взломано, и тогда информация перестанет быть конфиденциальной.\nПлагин шифрует информацию, содержащуюся в электронных письмах, с помощью PGP (Pretty Good Privacy).\nNoScript\nПлагин NoScript блокирует различные вредоносные скрипты (например криптомайнеры), экономя ресурсы компьютера и защищая конфиденциальность пользователя.\nБольше функций защиты данных\nУ Firefox есть и другие инструменты для повышения конфиденциальности, но у них есть недостатки, из-за которых они не попали в основной список.\nFirefox VPN\nЭто новое расширение, разработанное Mozilla, которое служит виртуальной частной сетью (VPN), защищая вас в общественных сетях Wi-Fi и в других ситуациях, когда вы доверяете Mozilla больше, чем провайдеру или администратору сети. Расширение бесплатно в бета-версии, но, вероятно, в какой-то момент придётся оформить подписку.\nОднако учитывайте, что частная сеть Firefox — это просто VPN, и у неё есть ряд недостатков, например VPN-провайдер может видеть незашифрованный веб-трафик.\nКроме того, в отличие от традиционной VPN, защищены только данные, идущие через браузер Firefox, а не все приложения, использующие сеть на вашем компьютере. Это означает, что не будет адекватной защиты от многих угроз, например от утечки IP-адресов.\nМногоаккаунтные контейнеры\nУ Mozilla есть расширение под названием «Многоаккаутные контейнеры», которое позволяет изолировать веб-сайты друг от друга. Например вы можете изолировать Facebook в контейнер, отделив от других открытых страниц. В этой ситуации Facebook сможет читать куки с вашим профилем только на сайтах в контейнере, сохраняя остальные вкладки защищёнными.\nFirefox выбор контейнера\nНастройка контейнеров может быть хорошей альтернативой регулярному удалению файлов cookies, но требует ручного вмешательства для настройки и поддержания работоспособности. Это стоит попробовать, если вы хотите полностью контролировать то, что веб-сайты делают в вашем браузере.\nНе смешно? А здесь смешно: \n@ithumor\nFirefox\n, \nБезопасность\nТакже рекомендуем:\nИгра от Google, в которой можно отточить свои хакерские навыки\n23 сайта для практики хакинга\nТоп книг по программированию, вышедших на русском языке в 2018 году\nНе вставляйте в консоль скопированный из Интернета код!",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/iconfinder_firefox_245988-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"680px\" viewBox=\"0 0 680 80\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-11.54.46.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"716px\" viewBox=\"0 0 716 289\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-12.12.44.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"768px\" viewBox=\"0 0 768 861\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-12.16.48-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"433px\" viewBox=\"0 0 433 148\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-12.23.45.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"752px\" viewBox=\"0 0 752 326\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-12.32.12.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"752px\" viewBox=\"0 0 752 165\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-12.39.24.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"501px\" viewBox=\"0 0 501 482\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/Snimok-jekrana-2019-11-30-v-15.04.29.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/problems/finding-the-right-key-in-3-attempts/",
                "title": "3 чемодана, 3 ключа, 3 попытки — сможете решить эту задачку?",
                "created_date": "7 января 2020 в 17:41",
                "body": "У вас есть три ключа от трёх чемоданов с разными замками. Каждый ключ подходит только к одному чемодану. Достаточно ли трёх попыток, чтобы подобрать ключи к каждому из них?\nОтвет\n\nДостаточно. Обозначим ключи буквами А, В, С, а замки — М, К, Р.\n\nТогда первая попытка может дать, например, такой результат: ключ А не подходит к замку М. Это означает, что он подходит к замку К или к замку Р.\nВторая попытка: ключ В не подходит к замку М. Тогда ясно, что:\nключ В подходит к замку К или к замку Р;\nк замку М подходит ключ С.\nТретья попытка ставит всё на свои места: если к замку К не подходит ключ А, то к нему подходит ключ В, а ключ А подходит к замку Р.\nЕсли же с первой попытки выясняется, что ключ А подходит к замку М, то тогда достаточно ещё одной попытки, чтобы установить, какой из оставшихся ключей к какому замку подходит.\n\nНе смешно? А здесь смешно: \n@ithumor\nЗадачи умеренной сложности\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nНахождение максимума из двух чисел без условных операторов и операторов сравнения\nЗадача о самолете на ленте транспортера: взлетит или не взлетит?\nЛогическая задача про электрика и 49 кабелей",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/iconfinder_002_-_Key_3400049-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/neural-style-transfer-using-tf-keras/",
                "title": "Как с помощью нейросети стилизовать изображение под работу известного художника: разбираемся с нейронным переносом стиля",
                "created_date": "6 января 2020 в 17:26",
                "body": "Перевод статьи \n«Neural Style Transfer»\nВ \nэтой статье\n рассказывается о том, как использовать deep learning для стилизации изображения по заданному образцу. Это возможно благодаря нейронному переносу стиля (англ. neural style transfer). Эта техника описана в статье \nLeon A. Gatys, A Neural Algorithm of Artistic Style\n.\nНейронная передача стиля — это процесс оптимизации, который работает с 3 изображениями: картинкой содержания, картинкой стиля (например произведением художника) и входной картинкой. Если «смешать» их, то получится входная картинка, подогнанная по композиции под картинку содержания в образе копируемого стиля.\nДля примера возьмём фотографию черепахи и гравюру Кацусики Хокусая «Большая волна в Канагаве»:\nИ что бы вышло, если бы художник решил стилизовать фотографию черепахи под свою гравюру? У него получилось бы что-то подобное:\nПринцип передачи стиля заключается в определении двух функций расстояния. Одна из них описывает, насколько друг от друга отличаются содержания двух изображений (Lcontent). Вторая функция описывает разницу между двумя стилями изображений (Lstyle). Получив три изображения (желаемый стиль, желаемый контент и входное изображение), сеть пытается преобразовать входное изображение так, чтобы минимизировать его расстояние Lcontent с изображением контента и расстояние Lstyle с изображением стиля.\nО чём статья\nСтатья освещает следующие аспекты:\nмоментальное исполнение (англ. Eager Execution) — использование библиотеки TensorFlow, которая позволяет выполнять операции незамедлительно, без построения графов. \nТут\n можно узнать больше о моментальном исполнении, а увидеть в действии можно \nтут\n;\nработа с \nfunctional API\n для определения модели — вы будете использовать подмножество моделей, чтобы получить доступ к важным промежуточным функциям активации с помощью functional API;\nиспользование карт признаков подготовленной модели;\nсоздание собственных циклов обучения — вы научитесь минимизировать заданные потери входных параметров.\nВыполняя перенос стиля, вы проделаете следующие шаги:\nВизуализация данных.\nБазовая предварительная обработка/подготовка данных.\nНастройка функций потери.\nСоздание модели.\nОптимизация функции потери.\nПримечание\n Этот пост рассчитан на тех, кто уже знаком с базовыми концепциями машинного обучения. Чтобы извлечь максимум из этой статьи, рекомендуется сначала ознакомиться со следующими материалами:\nhttps://tproger.ru/translations/6-step-for-building-machine-learning-projects/\nhttps://tproger.ru/translations/math-for-ai-linear-algebra/\nhttps://tproger.ru/video/machine-learning-2014/?autoplay=1\nhttps://tproger.ru/digest/learning-neuroweb-all-for-begin/\nhttps://tproger.ru/experts/required-ml-skills/\nКод\nВы сможете найти полные исходники \nздесь\n. Если вы хотите детально разобрать примеры из этой статьи, то можно перейти на \nColab\n.\nРеализация\nНачать стоит с включения \nмоментального исполнения\n. Это позволит вам работать с техникой переноса стиля наиболее эффективным и понятным образом.\ntf.enable_eager_execution()\r\nprint(\"Eager execution: {}\".format(tf.executing_eagerly()))\r\n \r\n# Изображения контента и стиля, которые будут использованы: \r\nplt.figure(figsize=(10,10))\r\n\r\ncontent = load_img(content_path).astype('uint8')\r\nstyle = load_img(style_path)\r\n\r\nplt.subplot(1, 2, 1)\r\nimshow(content, 'Content Image')\r\n\r\nplt.subplot(1, 2, 2)\r\nimshow(style, 'Style Image')\r\nplt.show()\r\n\nОпределите представления содержания и стиля\nЧтобы получить представление контента и стиля картинки, в первую очередь нужно посмотреть на промежуточные слои модели. Промежуточные слои представляют собой карты признаков, которые по мере углубления становятся более упорядоченными. В этом случае стоит использовать сетевую архитектуру VGG19 — предварительно подготовленную сеть классификации изображений. Промежуточные слои играют важную роль в определении представлений. Для входного изображения нужно сопоставить соответствующие представления на этих промежуточных слоях.\nПочему именно промежуточные слои?\nВы можете задаться вопросом: почему эти промежуточные выводы дают возможность определить стиль и контент изображения? Чтобы сеть могла классифицировать изображение (чему она уже была обучена), она должна понимать это изображение. Это включает в себя построение из группы пикселей сложных представлений объектов на изображении. Отчасти это объясняет, почему свёрточные нейронные сети могут хорошо обобщать: они способны заметить постоянство и определить особенности, характерные для какого-либо класса (чтобы отличить, например, кота от собаки), не обращая внимания на фоновый шум. Таким образом, где-то между подачей изображения на вход и выводом результата классификации этого изображения, стоит модель, которая находит признаки во входных данных. Соответственно, обращаясь к этой самой промежуточной точке (т. е. слоям), можно без труда получить представление стиля и содержания изображения.\nКонференция MIELOCONF\n24 января, Москва, 10 000–17 000 ₽\ntproger.ru\nСобытия и курсы на tproger.ru\nВот как выглядит работа с промежуточными слоями сети:\n# Слой контента, в который помещается карта объектов\r\ncontent_layers = ['block5_conv2'] \r\n\r\n# Со слоем стиля немного по-другому\r\nstyle_layers = ['block1_conv1',\r\n                'block2_conv1',\r\n                'block3_conv1', \r\n                'block4_conv1', \r\n\t\t     'block5_conv1'\r\n               ]\r\n\r\nnum_content_layers = len(content_layers)\r\nnum_style_layers = len(style_layers)\r\n\nМодель\nСначала нужно загрузить \nVGG19\n и подать тензор на вход модели. Это даст возможность получать карты признаков, а впоследствии — представления стиля и контента.\nПлюсом VGG19 является её относительная простота (по сравнению с ResNet, Inception и им подобным). Поэтому карты признаков будут лучше подходить для переноса стиля.\nЧтобы получить доступ к промежуточным слоям, соответствующим картам признаков стиля и контента, нужно получить характерные выходные данные, используя \nKeras functional API\n для определения модели с требуемыми выходными функциями активации.\nБлагодаря functional API определение модели сводится к банальному определению входных и выходных данных:\nmodel = Model(inputs, outputs).\r\ndef get_model():\r\n  \"\"\" Создание модели с доступом к промежуточным слоям \r\n  \r\n  Эта функция будет подгружать модель VGG19 и давать доступ к промежуточным слоям.\r\n  В дальнейшем эти слои будут использоваться для создания собственной модели для изображения.\r\n  Возвращает данные с промежуточных слоёв VGG19 модели.\r\n \r\n  \"\"\"\r\n  # Тут подгружается модель (weights=’imagenet’)\r\n  vgg = tf.keras.applications.vgg19.VGG19(include_top=False, weights='imagenet')\r\n  vgg.trainable = False\r\n  # Получение соответствующих слоёв стиля и контента \r\n  style_outputs = [vgg.get_layer(name).output for name in style_layers]\r\n  content_outputs = [vgg.get_layer(name).output for name in content_layers]\r\n  model_outputs = style_outputs + content_outputs\r\n  # Построение модели\r\n  return models.Model(vgg.input, model_outputs)\r\n\nВ приведённом выше коде подгружается подготовленная сеть классификации изображений. После этого нужно взять необходимые слои, про которые говорилось ранее. Затем нужно определить модель. Это можно сделать, настроив входы для изображения и выходы для слоёв стиля и контента. Таким образом вы сможете создать модель, которая на входе принимает изображение, а на выходе выдаёт промежуточные слои для стиля и контента.\nОпределение и создание функций потерь (расстояний Lcontent и Lstyle)\nФункция потерь для контента\nОпределить функцию потерь для содержимого на самом деле довольно просто. Нужно передать сети два изображения: изображение желаемого стиля и базовое. После этого вы получите промежуточные слои вашей модели. И единственное, что остаётся, это рассчитать Евклидово расстояние между двумя промежуточными представлениями этих изображений.\nЕвклидова, L1 и Чебышёва — 3 основные метрики, которые пригодятся в Data Science\ntproger.ru\nЕсли быть точным, то функция потерь описывает расстояние содержимого (\nL\ncontent\n) между входным изображением \nx\n и изображением контента\np.\nПусть тогда \nCₙₙ\n будет предварительно обученной глубокой свёртываемой нейронной сетью. Опять же в этом случае будет использоваться VGG19.\nДопустим, \nX\n— это любое изображение, тогда \nCₙₙ(x)\n — это сеть, на вход которой подаётся \nX\n. Пусть тогда \nFˡᵢⱼ(x) ∈ Cₙₙ(x)\nи\nPˡᵢⱼ(x) ∈ Cₙₙ(x)\n описывает соответствующие промежуточные представления объектов сети, принимающей \nX\n и \nP\n. Тогда \nL\ncontent\n можно будет рассчитать по следующей формуле:\nТаким образом обратное распространение обеспечивается так, чтобы минимизировать потерю контента. Нужно менять первоначальное изображение до тех пор, пока оно не сгенерирует аналогичный выход.\nРеализовать это довольно просто. Как и в прошлом случае, на вход нужно подать карту признаков со слоя \nL\n сети со входом \nX\n, входное изображение и \nP\n — изображение контента. На выходе получится расстояние \nL\ncontent\n.\ndef get_content_loss(base_content, target):\r\n  return tf.reduce_mean(tf.square(base_content - target))\nФункция потерь для стиля\nРасчёт функции потерь для стиля немного сложнее, но базируется на том же принципе. В этот раз на вход сети нужно подавать входное изображение и картинку стиля. Но теперь, вместо того чтобы сравнивать «сырые» данные с выходов базового и стиля изображения, нужно сравнить матрицы Грама этих двух выходов.\nС математической точки зрения этот процесс заключается в описании функции потерь для стиля главного изображения (\nX\n) и изображения стиля (\nA\n) и расстояния между представлениями (матрица Грама) стиля этих двух картинок.\nПредставление стиля картинки можно описать как корреляцию между различными ответами фильтра матрицы \nGˡ\n, где \nGˡᵢⱼ\n — это внутреннее произведение между векторизированной картой признаков \ni\n и \nj\n в слое \nL\n.\nЧтобы создать стиль для входного изображения, нужно выполнить градиентный спуск от изображения содержимого. Это нужно для того, чтобы трансформировать входное изображение в нечто похожее на изображение стиля. Это можно сделать, минимизировав среднее квадратичное расстояние между объектом корреляции карты стиля и входным изображением. Суммарное влияние каждого слоя на функцию потерь можно описать следующей формулой:\nгде \nGˡᵢⱼ\n и \nAˡᵢⱼ\n — это соответствующие представления на слое \nL\n входного изображения \nX\n и изображения стиля \nA\n. \nNl\n описывает количество карт объектов, каждая из которых имеет размер \nMl = высота * ширина\n. Исходя из этого, функция потерь всех слоёв будет такой:\nгде взвешивается влияние потери каждого слоя от какого-либо фактора \nwl\n. В этом случае все слои «взвешиваются» одинаково:\nА вот, собственно, и реализация:\ndef gram_matrix(input_tensor):\r\n  # Сначала идёт канал изображения\r\n  channels = int(input_tensor.shape[-1])\r\n  a = tf.reshape(input_tensor, [-1, channels])\r\n  n = tf.shape(a)[0]\r\n  gram = tf.matmul(a, a, transpose_a=True)\r\n  return gram / tf.cast(n, tf.float32)\r\n \r\ndef get_style_loss(base_style, gram_target):\r\n  \"\"\"Принимает два изображения измерений h, w, c\"\"\"\r\n  # высота, ширина и количество фильтров в каждом слое\r\n  height, width, channels = base_style.get_shape().as_list()\r\n  gram_style = gram_matrix(base_style)\r\n  \r\n  return tf.reduce_mean(tf.square(gram_style - gram_target))\r\n\nГрадиентный спуск\nЕсли вы не знакомы с градиентным спуском или обратным распространением, то \nвот ресурс\n, чтобы это исправить.\nЧтобы минимизировать потери при переносе стиля, понадобится оптимизатор \nAdam\n. Для минимизации нужно многократно обновлять выходное изображение: не стоит как-либо изменять веса в сети. Вместо этого можно тренировать вход изображения. Чтобы это сделать, нужно понять, каким образом рассчитываются потери и градиенты. Используя Adam, можно понять функциональность autograd/gradient tape в собственных циклах обучения.\nРасчёт потери и градиентов\nНужно создать всего лишь одну маленькую функцию, которая будет подгружать изображения стиля и контента, а потом передавать их сети. В будущем это даст представления признаков стиля и контента в модели:\ndef get_feature_representations(model, content_path, style_path):\r\n  \"\"\"Функция, которая рассчитывает признаки стиля и контента\r\n \r\n  Эта функция будет просто предварительно подгружать и обрабатывать содержимое и стиль. \r\n  Затем эти представления пройдут через сеть, чтобы получить промежуточные слои.\r\n  \r\n  Аргументы:\r\n    model: Используемая модель.\r\n    content_path: Путь к изображению содержимого.\r\n    style_path: Путь к изображению стиля.\r\n    \r\n  Возвращает:\r\n    Признаки стиля и контента. \r\n  \"\"\"\r\n  # Подгрузка изображений\r\n  content_image = load_and_process_img(content_path)\r\n  style_image = load_and_process_img(style_path)\r\n  \r\n  # Одновременная обработка признаков стиля и контента\r\n  stack_images = np.concatenate([style_image, content_image], axis=0)\r\n  model_outputs = model(stack_images)\r\n  \r\n  # Получение представлений признаков \r\n  style_features = [style_layer[0] for style_layer in model_outputs[:num_style_layers]]\r\n  content_features = [content_layer[1] for content_layer in model_outputs[num_style_layers:]]\r\n  return style_features, content_features\r\n\nДля расчёта градиента тут используется \ntf.GradientTape\n. Этот способ даёт преимущество использования автоматического дифференцирования, доступного благодаря трассировке последующих вычислений градиента. В этом случае во время прямого прохода операции кэшируются. Это даст возможность рассчитать потери градиента на обратном проходе.\ndef compute_loss(model, loss_weights, init_image, gram_style_features, content_features):\r\n  \"\"\"Эта функция рассчитывает полную потерю.\r\n  \r\n  Аргументы:\r\n    model: Модель с нужными промежуточными слоями.\r\n    loss_weights: Вес каждого компонента для каждой функции потерь. \r\n      (вес для стиля, для контента и общий).\r\n    init_image: Первичное изображение. Это то изображение, которое в процессе оптимизации будет обновляться.\r\n    gram_style_features: Предварительные вычисления матрицы Грама соответствующих слоёв.\r\n    content_features: Предварительные вычисления нужных слоёв контента.\r\n      \r\n  Возвращает:\r\n    Общие потери, потери для стиля, контента и вариационные потери\r\n  \"\"\"\r\n  style_weight, content_weight, total_variation_weight = loss_weights\r\n  \r\n  # Прогонка изображение через модель. Это даст представления контента и стиля.\r\n  # Из-за использования мгновенного выполнения, эта модель вызывается как и любая другая функция.\r\n  model_outputs = model(init_image)\r\n  \r\n  style_output_features = model_outputs[:num_style_layers]\r\n  content_output_features = model_outputs[num_style_layers:]\r\n  \r\n  style_score = 0\r\n  content_score = 0\r\n\r\n  # Суммирует потерю стиля со всех слоёв\r\n  # Тут одинаково взвешиваются потери каждого слоя.\r\n  weight_per_style_layer = 1.0 / float(num_style_layers)\r\n  for target_style, comb_style in zip(gram_style_features, style_output_features):\r\n    style_score += weight_per_style_layer * get_style_loss(comb_style[0], target_style)\r\n    \r\n  # Суммирование потерь контента со всех слоёв\r\n  weight_per_content_layer = 1.0 / float(num_content_layers)\r\n  for target_content, comb_content in zip(content_features, content_output_features):\r\n    content_score += weight_per_content_layer* get_content_loss(comb_content[0], target_content)\r\n  \r\n  style_score *= style_weight\r\n  content_score *= content_weight\r\n  total_variation_score = total_variation_weight * total_variation_loss(init_image)\r\n\r\n  # Получение суммарной потери\r\n  loss = style_score + content_score + total_variation_score \r\n  return loss, style_score, content_score, total_variation_score\r\n\nВ итоге расчёт градиента сводится к этому:\ndef compute_grads(cfg):\r\n  with tf.GradientTape() as tape: \r\n    all_loss = compute_loss(**cfg)\r\n  # Расчёт градиента изображения\r\n  total_loss = all_loss[0]\r\n  return tape.gradient(total_loss, cfg['init_image']), all_loss\r\n\nЗапуск процесса переноса стиля\nВот так выглядит фактический запуск сети:\ndef run_style_transfer(content_path, \r\n                       style_path,\r\n                       num_iterations=1000,\r\n                       content_weight=1e3, \r\n                       style_weight = 1e-2): \r\n  display_num = 100\r\n  # В этом случае не нужно обучать каждый слой модели. Поэтому параметр trainability нужно выставить в false.\r\n  model = get_model() \r\n  for layer in model.layers:\r\n    layer.trainable = False\r\n  \r\n  # Получение представлений признаков стиля и контента (из промежуточных слоёв)\r\n  style_features, content_features = get_feature_representations(model, content_path, style_path)\r\n  gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]\r\n  \r\n  # Загрузка изначального изображения\r\n  init_image = load_and_process_img(content_path)\r\n  init_image = tfe.Variable(init_image, dtype=tf.float32)\r\n\r\n  # Создание оптимизатора\r\n  opt = tf.train.AdamOptimizer(learning_rate=10.0)\r\n\r\n  # Отображение промежуточных изображений\r\n  iter_count = 1\r\n  \r\n  # Сохранение лучшего результата\r\n  best_loss, best_img = float('inf'), None\r\n  \r\n  # Создание конфигурации \r\n  loss_weights = (style_weight, content_weight)\r\n  cfg = {\r\n      'model': model,\r\n      'loss_weights': loss_weights,\r\n      'init_image': init_image,\r\n      'gram_style_features': gram_style_features,\r\n      'content_features': content_features\r\n  }\r\n    \r\n  # Отображение\r\n  plt.figure(figsize=(15, 15))\r\n  num_rows = (num_iterations / display_num) // 5\r\n  start_time = time.time()\r\n  global_start = time.time()\r\n  \r\n  norm_means = np.array(1)\r\n  min_vals = -norm_means\r\n  max_vals = 255 - norm_means   \r\n  for i in range(num_iterations):\r\n    grads, all_loss = compute_grads(cfg)\r\n    loss, style_score, content_score = all_loss\r\n    # grads, _ = tf.clip_by_global_norm(grads, 5.0)\r\n    opt.apply_gradients([(grads, init_image)])\r\n    clipped = tf.clip_by_value(init_image, min_vals, max_vals)\r\n    init_image.assign(clipped)\r\n    end_time = time.time() \r\n    \r\n    if loss < best_loss:\r\n      # Обновление лучшей потери и изображения \r\n      best_loss = loss\r\n      best_img = init_image.numpy()\r\n\r\n    if i % display_num == 0:\r\n      print('Iteration: {}'.format(i))        \r\n      print('Total loss: {:.4e}, ' \r\n            'style loss: {:.4e}, '\r\n            'content loss: {:.4e}, '\r\n            'time: {:.4f}s'.format(loss, style_score, content_score, time.time() - start_time))\r\n      start_time = time.time()\r\n      \r\n      # Отображение промежуточных изображений\r\n      if iter_count > num_rows * 5: continue \r\n      plt.subplot(num_rows, 5, iter_count)\r\n      # Используйте метод .numpy(), чтобы получить конкретный numpy-массив\r\n      plot_img = init_image.numpy()\r\n      plot_img = deprocess_img(plot_img)\r\n      plt.imshow(plot_img)\r\n      plt.title('Iteration {}'.format(i + 1))\r\n\r\n      iter_count += 1\r\n  print('Total time: {:.4f}s'.format(time.time() - global_start))\r\n      \r\n  return best_img, best_loss \r\n\nНа этом всё!\nЧтобы запустить нейронный перенос стиля, нужно просто вызвать функцию, передав ей пути к входным изображениям:\nbest, best_loss = run_style_transfer(content_path, \r\n                                     style_path,\r\n                                     verbose=True,\r\n                                     show_intermediates=True)\nВот ещё крутые примеры работы сети:\nКлючевые моменты\nВ этой статье были разобраны следующие этапы:\nсоздание нескольких различных функций потерь и использование обратного распространения для входного изображения;\nдля этого использовалась предварительно обученная модель и изученные карты признаков для описания содержимого на изображении;\nфункциями потерь в основном являлись вычисления расстояний различных представлений;\nвсё это выполнялось благодаря собственной модели и моментальным исполнениям;\nпостроение модели осуществлялось благодаря Functional API;\nмоментальное исполнение позволило динамически работать с тензорами, используя естественный поток управления Python;\nуправление тензорами велось напрямую, а это в свою очередь облегчило отладку и работу в целом.\nНе смешно? А здесь смешно: \n@ithumor\nМашинное обучение\n, \nНейронные сети\nТакже рекомендуем:\nИзучаем нейронные сети: с чего начать\nВ данной статье собраны материалы — в основном русскоязычные — для базового изучения искусственных нейронных сетей. \nИзучаем нейронные сети за четыре шага\nШпаргалка по разновидностям нейронных сетей. Часть первая. Элементарные конфигурации\nОбщий взгляд на машинное обучение: классификация текста с помощью нейронных сетей и TensorFlow",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/iconfinder_Paint_Brush_381617-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"624px\" viewBox=\"0 0 624 339\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/0_h5YONGux0M4j1Bdf.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"512px\" viewBox=\"0 0 512 511\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/unnamed.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"512px\" viewBox=\"0 0 512 278\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/unnamed-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"280px\" viewBox=\"0 0 280 41\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/image-34.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"184px\" viewBox=\"0 0 184 41\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/image-35.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"165px\" viewBox=\"0 0 165 36\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/image-36.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"76px\" viewBox=\"0 0 76 45\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/image-37.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"512px\" viewBox=\"0 0 512 247\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/unnamed-2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"508px\" viewBox=\"0 0 508 512\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/unnamed-3.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"491px\" viewBox=\"0 0 491 512\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/unnamed-4.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"504px\" viewBox=\"0 0 504 512\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/unnamed-6.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/digest/what-todo-in-new-year-holidays/",
                "title": "Сверстать открытку, потестить Linux и настроить менеджер паролей — чем заняться в новогодние праздники, когда устал есть и спать",
                "created_date": "5 января 2020 в 11:46",
                "body": "Сверстать новогоднюю открытку\nНовый Год — это, прежде всего, ёлки, гирлянды, фейерверки, красочные снежинки и море праздничного настроения. Но как создать это настроение не отходя от компьютера? Один из вариантов — создать новогоднюю открытку на HTML. Если худо с идеями, то можно заглянуть в \nподборку таких открыток\n с \ncodepen.io\n.\nSee the Pen \n\nhappy new year 2020\n by Swarup Kumar Kuila (\n@uiswarup\n)\n\non \nCodePen\n.\n \nТам есть открытки, интерактивные сцены, анимации фейерверков и счётчики обратного времени.\nОсторожно! Где-то в тех краях обитает Дед Мороз-эксгибиционист.\nКак украсить свой сайт к Новому году?\ntproger.ru\nПотестить Linux\nВ рабочее время пробовать другую операционку слишком сложно, а праздники — идеальное время для этого. Сносить привычную ОС для этого не нужно, достаточно поднять виртуальную машину и устроить себе челлендж на пару дней.\nПочему Linux?\nУдобная и простая установка приложений с репозиториев.\nОтсутствие кучи ненужных и навязчивых приложений.\nДовольно низкие требования к железу.\nСистема занимает мало места, что позволяет использовать её даже на микрокомпьютерах — той же Raspberry Pi.\nКак таковое отсутствие вирусов.\nНаличие \nбольшого количества дистрибутивов\n, которые подойдут под всевозможные требования.\nСоздать личную армию мини-снеговиков\nМногие ждут зимы не только из-за Нового Года, но и ради снега. При виде снега вне зависимости от возраста во многих из нас просыпается ребёнок. Первое, что приходит в голову — нужен снеговик! Но процесс создания снеговика не всегда удобен и нередко занимает много времени. На помощь может прийти \nпресс-форма для снеговиков\n, напечатанная на 3D-принтере.\nПресс-форма для снеговиков\nХоть оригинальный размер формы в высоту около 20 см, её можно увеличить до любых размеров — ограничение лишь в возможностях принтера. Однако в слишком больших формах, наверное, будет сложно прессовать снеговиков.\nМодель имеет две версии: на два шара и на три. В комплекте ещё идёт модель цилиндра для снеговиков. Заправляем филамент в принтер и идём создавать свою армию ходоков.\nВ снежных баталиях за двор можно использовать схожее по принципу действия устройство, только уже \nдля снежков.\nНастроить менеджер паролей\nКак \nговорили некоторые эксперты\n, информационная безопасность — один из трендов 2020. Чтобы не заработать головную боль пытаясь запомнить кучу сложных \nразных для каждого сайта \nпаролей, имеет смысл поставить менеджер паролей.\nЕго настройка требует времени и обычно его сложно найти (и очень лень). Праздники — отличный способ наконец перестать откладывать это дело в долгий ящик.\nМенеджеров сейчас очень много, они есть почти в каждом браузере, а также есть opensource решения, например KeePass.\n200 худших паролей 2019 года. Кажется, пора устанавливать менеджер паролей\ntproger.ru\nПопробовать сделать игру за 10 минут\nЕщё каких-то 15–20 лет назад процесс создания компьютерной игры был очень сложным. Нужно было иметь отличную математическую подготовку, хорошо знать какой-то язык программирования (а то и несколько) и разбираться в компьютерной графике как в своих пяти пальцах. Каждая игра была как произведение искусства.\nКонечно, сейчас для лидеров в игровой индустрии требования не сильно изменились. Но появление игровых движков и различных фреймворков существенно снизило порог вхождения в игрострой. И доказательство тому — это видео.\nТут игродел Brackeys на живом примере показывает процесс создания (хоть и незамысловатой) игры всего за 10 минут. Всё, что для этого потребовалось, это игровой движок Unity3D и несколько десятков строк кода. Под конец автор призывает зрителей самим попробовать себя в создании какой-либо игры за 10 минут.\nОсвоиться в нейросетях\nО нейросетях и машинном обучении сейчас не говорит только, наверное, ленивый. И это неспроста — на это десятилетие приходится неслабый скачок развития нейронных сетей. Они превратились из футуристической утопии в нечто обыденное.\nС помощью нейросетей можно не только распознавать текст или отличать котов от собак. Благодаря им можно оживлять портреты, копировать голоса, писать музыку, создавать шедевры искусства и даже за минуту диагностировать сложные заболевания.\nЕсли вы ещё не знакомы с этим магическим миром, то новогодние праздники — самое время это исправить. Для начала можно \nпотратить всего 5 минут\n, чтобы обобщённо понять, о чём вообще идёт речь.\nЧто такое нейронная сеть и как она работает — основы простым языком\ntproger.ru\nВыбрать подходящие материалы можно в \nспециальной подборке\n.\nЗакрепить свои знания можно в \nонлайн-моделировании нейросети\n.\nПопробовать новый язык\nВариантов куча, например:\nPython\n. Один из самых популярных языков общего назначения. Комфортный для новичков и мощный для профессионалов. Имеет бесчисленное множество библиотек и фреймворков. Самый популярный язык для машинного обучения.\nJavaScript\n. Настоящий гигант, который начал своё существование в виде простого встраиваемого скриптового языка. Сейчас это кроссплатформенный и очень гибкий язык, знания которого требуют многие работодатели.\nХочу стать веб-разработчиком: подробный план по изучению JavaScript\ntproger.ru\nKotlin\n. Набирающий популярной opensource язык. Современный аналог Java, работающий на JVM. «Достичь большего, делая меньше» — это именно про Kotlin.\nGo\n. Язык от Google. Один из его создателей, Роб Пайк, отметил, что Go — это попытка перенять лучшие стороны C++ и Java. Имеет простой синтаксис (всего 25 ключевых слов), однако это не мешает создавать на нём высокоэффективные приложения, подвергающиеся сильной нагрузке.\nTypeScript\n. Он, как и подобает лидерам, гибкий и производительный. Его основная задача — осилить то, что не смог осилить JavaScript. В отличии от своего предшественника, имеет строгую типизацию и многие концепции ООП.\nВводный курс по TypeScript\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nНовый Год\nТакже рекомендуем:\nЧто подарить программисту на Новый Год: несколько идей подарков для гиков\n\n \n«Попрограммируй пока бесплатно, зато через год станешь миллионером»: короткая новогодняя история о том, почему нужно верить в невозможное\n10 самых горячих IT-новостей уходящего года: чем 2016 год запомнился программистам\n9 лучших статей на Tproger за 2016: от подборок для самообразования до крутого интерактива",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/snowman-icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"628px\" viewBox=\"0 0 628 472\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/snowman.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/first-working-day-survival-guide/",
                "title": "Первый рабочий день: инструкция по выживанию — 4 совета, как с комфортом выйти на новую работу",
                "created_date": "3 января 2020 в 16:01",
                "body": "Кирилл Медведев, HR-директор «СёрчИнформ»\nВыход на новую работу — всегда стресс, особенно когда нужно максимально быстро влиться в коллектив и приступить к задачам. Рассказываем, на что обратить внимание, чтобы не пожалеть о выборе и оказаться «на своём месте».\nШаг первый: проведите разведку\nПервый рабочий день — отнюдь не первый контакт с работодателем. Надо пользоваться возможностью пообщаться до выхода в строй, чтобы узнать о компании побольше. Тогда и в первый день не будет ощущения, что начинаешь с нуля. Постарайтесь проговорить максимум ещё на собеседовании. Попросите описать рабочую обстановку, уточните формальные требования.\nНе стесняйтесь спрашивать про мелочи — от дресс-кода до отношения к перекурам. Но, конечно, не в первую очередь: если вместо задач с ходу спрашивать про кафе рядом с офисом, вряд ли будущий работодатель оценит расстановку приоритетов.\nКогда оффер — уже почти решённый вопрос, самое время озвучить индивидуальные запросы. Например, вы живете в пригороде и вряд ли будете успевать в офис в центре города к 8. Да и действительно ли это нужно? Обсудите, могут ли вам пойти навстречу и взвесьте, готовы ли вы пожертвовать своим комфортом в случае отказа. Особенно это актуально, если у вас несколько интересных предложений: принципиально заранее обсудить нюансы, чтобы сделать верный выбор, избежать неприятных неожиданностей, не потратить зря своё и чужое время. В итоге будет меньше обманутых ожиданий с обеих сторон.\nПолучив больше информации на старте, вы повышаете свои шансы легко адаптироваться. Компания, со своей стороны, увидит заинтересованность и будет спокойнее, понимая, что вы вдруг не исчезнете.\nШаг второй: ориентируйтесь на местности\nГлавная тактика в первый день на новом месте — смотреть и слушать. Сначала нужно вникнуть в должностные инструкции. В небольшом стартапе от них вряд ли можно ожидать 100% информативности, скорее там будут обтекаемые формулировки из профстандартов, которые не отражают, с чем придётся работать на самом деле. У крупных компаний наоборот: инструкции описывают всё от «А» до «Я», но даже они не дают ответов на все вопросы.\nОбычно за новичками закрепляют наставников, будь то руководители, опытные коллеги, кадровики или представители специального адаптационного отдела. Они введут в курс дела, объяснят и помогут в общих вопросах. Здесь стоит придерживаться принципа «непонятно — спрашивай», ведь никто не сможет залезть к вам в голову. Но не отнимайте у коллег слишком много времени — работодатель всё-таки рассчитывает на вашу самостоятельность.\nДальше обращайте внимание на то, как формальные правила соотносятся с неформальными, изучите внутренний распорядок. Ходят ли на перекуры? Обедают вместе или по отдельности? Приносят еду с собой или уходят в кафе? Перешучиваются или полностью сосредоточены на задачах? С боссом на «вы» и по предварительной записи или общаются свободно?\nКроме бытовых, свою роль могут сыграть и «идеологические» нюансы. Например, в команде приняты неформальные посиделки после работы — готовы вы отдавать общению с коллегами пару часов личного времени, чтобы «влиться»? Или в ходу нецензурные комментарии, а для вас это нонсенс — стоит ли перестраиваться, чтобы сойти за своего, или отстаивать свои принципы и оставаться белой вороной? Бывает, что в компании царит «культ рубля»: приветствуется стремление заработать больше во что бы то ни стало. Или господствует трудовой фанатизм: приветствуются переработки и сплошь трудовые подвиги во имя «общего дела». Насколько это вам импонирует? Оцените, критично ли в целом соблюдать негласный этикет. Возможно, достаточно просто справляться с обязанностями.\nШаг третий: не ждите «полного погружения»\nСкорее всего, первые дни, недели, а то и месяцы в новой компании пройдут в режиме обучения. Формально оно может сводиться к изучению брошюрки из welcome-pack или вводной лекции от наставника. Но на деле вряд ли вас сразу примут за полнофункциональную единицу: и руководитель, и коллеги пока берут на себя часть задач и включают в свой график время, чтобы ответить на ваши вопросы и проконтролировать, как у вас идут дела.\nМы закладываем на обучение две недели, чтобы новичок познакомился с продуктом, нашей бизнес-моделью, пообщался с представителями каждого подразделения. По итогам — квалификационный экзамен. Заодно собираем обратную связь: спрашиваем, что сотруднику нравится, с чем возникают сложности, что он бы сделал иначе. В то же время наставник ежедневно разбирает с подопечным, что он сделал правильно, а что нет. По этой схеме у нас входят в работу тестировщики, инженеры техподдержки, сейлы. У разработчиков немного иначе: главный экзамен — тестировка, потом действует принцип «не умей говорить, но умей всё сделать» — ждём результатов без долгих обсуждений.\nЕсли вас не схантили прицельно, не ждите, что все сразу увидят ваш потенциал и талант. И когда на испытательном сроке вы получите простенькую задачку, не спешите разочаровываться: нет, в вас не сомневаются, просто такие задачи тоже есть и их важно кому-то делать. У нас новички в разработке получают нарезку небольших строго прикладных задач, которые им нужно решить оптимальным способом в отведённое время. Поэтому недооценивать мелкие задачи не стоит: бизнес относится к ним не менее серьёзно, чем к большим проектам.\nЯсно, что «лайт»-режим не будет вечным. Рано или поздно требования к вам вырастут, тем более, если компания вложила силы и время в ваше обучение. Хорошо, если объём работы нарастает постепенно. Если вы чувствуете, что разобрались и хотели бы приступить к более сложным задачам, а руководство «буксует» — инициатива приветствуется. Главное, не переусердствуйте и не старайтесь взять на себя больше, только чтобы произвести хорошее впечатление. Правило одно: чем лучше вникаешь на старте, тем меньше ошибок делаешь потом.\nШаг четвёртый: будьте собой\nНе пытайтесь во что бы то ни стало всем понравиться. Как правило, компания заинтересована в кандидате не меньше, чем он — в новой работе (особенно если речь о редких специалистах). Поэтому можно вести себя естественно.\nНе стоит начинать работу с чистого листа и подстраиваться под новые правила, перечёркивая весь свой предыдущий опыт. Именно опыт делает кандидата, поэтому даже если вы привыкли решать задачи иначе, чем это принято в компании, работодатель может оценить свежий взгляд. Главное, знать меру и не изобретать велосипед, где не нужно. Возможно, ваши «инновационные» идеи здесь уже пройденный этап. А может, есть технологические, юридические или другие ограничения, из-за которых «делать проще» не получается.\nОт вас не ждут откровения или великих реформ, ведь компания успешно работала и до вашего прихода, в ней работают квалифицированные специалисты, а у руля —профессионалы своего дела. Так что чрезмерно критический взгляд и поиск слабых мест в бизнес-процессах с первого же дня — провальная тактика. Вместо ревизии взвесьте, насколько местный уклад подходит именно вам. А с этой точки зрения часто важнее не устройство рабочих процессов, а ежедневный офисный быт.\nИтого\nЛучше не строить воздушных замков заранее, реальное положение вещей в компании наверняка не совпадёт с вашими представлениями. Компания может приятно удивить, даже если это совсем не Google с миллионом «плюшек» для сотрудников. Но если на деле вам скорее дискомфортно, лучше вовремя обсудить это с начальством, прояснить ситуацию, а если к компромиссам никто не готов — попрощаться.\nРаньше HR-ы искренне удивлялись, когда вроде бы мотивированные и с виду подходящие кандидаты спустя пару дней разворачивались и уходили. Теперь риторика меняется: у кандидата столько же права решать, оставаться ли в строю, сколько и у компаний — оставлять ли кандидата после стажировки. Когда новички приходят с таким отношением, то с меньшим стрессом вливаются в рабочий процесс.\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n  \n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/workspace-icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_blue-1-150x150.png"
                ]
            },
            {
                "url": "https://tproger.ru/books/top-5-programming-books-in-russian-2019/",
                "title": "Мнение: 5 лучших книг по программированию, вышедших на русском за предыдущий год",
                "created_date": "2 января 2020 в 15:43",
                "body": "Юрий Орлов, директор департамента информационной безопасности QBF\nВ 2019 году книжные полки IT-специалистов пополнились множеством новинок. Я выбрал 5 наиболее интересных, на мой взгляд, изданий, посвящённых последним трендам программирования, которые вышли на русском языке в уходящем году.\n \n«Умные мобильные проекты с TensorFlow», Джефф Танг\nКупить\n \nИскусственный интеллект давно используется в разных сферах жизни, начиная с компьютерных игр и заканчивая анализом процессов на фондовом рынке. Но как самостоятельно научиться создавать мобильные приложения на основе глубоких нейронных сетей? Джефф Танг демонстрирует на конкретных примерах процесс разработки с нуля локальных приложений, которые могут функционировать на платформе TensorFlow от компании Google. Книга будет полезна широкому кругу разработчиков, которые заинтересованы в использовании возможностей искусственного интеллекта в своих проектах.\n«Автоматизация программируемых сетей», Осуолт М., Эделман Дж., Лоу С. С.\nКупить\n \nКнига может стать практической инструкцией для тех, кто занят управлением и эксплуатацией сетевого оборудования и сервисов. Особое внимание в ней уделено специфике языка программирования Python: описано его применение для обмена данными с сетевыми устройствами, а также роль прикладных программных интерфейсов в сетевой автоматизации. Множество примеров и схем помогут разобраться в типах автоматизации систем, специфике работы в операционной системе Linux, форматах и моделях данных, шаблонах сетевой конфигурации и многих других аспектах.\n«Data Science Инсайдерская информация для новичков. Включая язык R», Кэти О'Нил, Рэйчел Шатт\nКупить\n \nИзлечить рак, раскрыть тайну аутизма и отыскать инструмент для предотвращения террористической атаки — такие сложнейшие задачи в далёком будущем смогут решить критически мыслящие люди, тщательно изучившие даталогию, пока лишь зарождающую отрасль академического знания. В книге проанализированы алгоритмы машинного обучения, рассмотрены принципы сбора данных и механизм создания моделей. Здесь доступно раскрыты переходы от прогнозирования к причинности, описан инжиниринг и многое другое. Много интересного в книге найдётся для тех, кто интересуется финансовым моделированием. Структура монографии напоминает учебный курс, но научность не делает излагаемый материал скучным и тяжёлым для восприятия.\n«Изучение робототехники с помощью Python», Лентин Джозеф\nКупить\n \nКнига вызовет интерес специалистов, которые готовы с нуля создавать автономных обслуживающих роботов, предназначенных, например, для подачи еды в ресторанах. Для начала читателям предлагается погрузиться в тонкости работы с операционной системой для робота (ROS). Затем автор плавно переходит к рассмотрению робота с дифференциальным приводом и описанию нюансов его моделирования. Особое внимание уделено тонкостям управления роботами, в частности, использованию метаоперационной системы ROS, моделированию в Gazebo, обработке изображений в OpenCV.\n«Введение в рекурсивное программирование», Мануэль Рубио-Санчес\nКупить\n \nНаучиться думать и программировать рекурсивно — вот девиз, с которым стоит приступать к чтению данного издания. С помощью череды задач различной степени сложности автор пособия помогает разобраться в способах использования мощной стратегии для разработки простых, компактных и изящных алгоритмов решения вычислительных задач. Примеры кода подготовлены на языке Python 3, но иллюстративный материал настолько тщательно подобран и прокомментирован, что в нём сможет разобраться специалист, знакомый хотя бы с одним языком программирования.\nКниги, которые можно подарить любому программисту — подборка от СЕО Tproger\ntproger.ru",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/books-icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Jurij-Orlov-e1576750649567-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/10275777011-216x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/10275777091-200x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/10262852201-197x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/10284116041-198x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/10343696751-194x280.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/problems/rum-in-a-port/",
                "title": "Разливаем ром в порту: логическая задачка на переливания",
                "created_date": "1 января 2020 в 15:07",
                "body": "В одном порту моряк пришёл в лавку с пустым бочонком на пять галлонов и попросил лавочника налить туда четыре галлона отборного ямайского рома. К несчастью, единственным сосудом для измерения был старый оловянный кувшин на три галлона. Как лавочник сумел точно отмерить четыре галлона с помощью этих двух ёмкостей?\nОтвет\nВот что сделал лавочник:\nНаполнил кувшин на три галлона и вылил из него ром в бочонок на пять галлонов.\nСнова наполнил кувшин на три галлона и вылил ром в бочонок доверху. В кувшине на три галлона остался один галлон.\nПотом вылил ром из бочонка на пять галлонов обратно в большую бочку с ромом, а один галлон рома из кувшина вылил в бочонок моряка.\nСнова наполнил ромом кувшин на три галлона и вылил его содержимое в бочонок. Теперь в бочонке четыре галлона рома.\nЗадачи умеренной сложности\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nНахождение максимума из двух чисел без условных операторов и операторов сравнения\nЗадача о самолете на ленте транспортера: взлетит или не взлетит?\nЛогическая задача про электрика и 49 кабелей",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2020/01/rum-icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-it-changed-in-2019/",
                "title": "Автономный рунет, нейросети, спутники Starlink, складные смартфоны: как поменялась сфера IT за последний год",
                "created_date": "31 декабря 2019 в 18:20",
                "body": "1\nIT в России\nВ этом году Россия постаралась убедить всех, что она всё может сама и ничего ей от этих ваших заграниц не нужно. В этом году в России:\nНапугали всех законом об автономном Рунете\nЭтот закон позиционируется как защитный. По словам авторов, он поможет Рунету выстоять и продолжать работать, если кто-то из-за рубежа попытается его отключить. В критической ситуации государство возьмет трафик в свои руки и будет централизованно им управлять.\nЧтобы такой план реализовать, власти обязали операторов связи и провайдеров устаналивать на своих сетях «технические средства противодействия угрозам». По сути это устройства для DPI — глубокого анализа трафика. Государство будет предоставлять их бесплатно.\nОсобый шарм ситуации в том, что закон \nвступил в силу\n 1 ноября, а ТСПУ ещё далеки от установки, многие нормативные акты не приняты и никто до сих пор не знает, как всё это будет работать.\nПопытались напугать иностранные компании штрафами\nК тренду закручивания гаек можно также отнести недавно принятый \nзакон о многомиллионных штрафах\n. Он поднимает на новый уровень денежное наказание для тех компаний, которые не организовали хранение данных россиян в России. К примеру, этого ещё не сделали Twitter и Facebook. После многомесячных безрезультатных переговоров Роскомнадзор довёл дело до суда, но тот \nвылился\n в трёхтысячный штраф — капля в доходном море техногиганта. По мнению РКН, повышение штрафных ставок побудит компании сотрудничать с российскими властями. Получится так или нет, пока неизвестно.\nПоддержали отечественное ПО\nЕщё в ноябре законодатели \nодобрили\n закон о предустановке некоего российского софта на некие гаджеты. Список софта и гаджетов, на которые его надо устанавливать, должно определить правительство. Кроме того, должен появиться параллельный закон о штрафах, потому что пока непонятно, кто вообще ответственен за предустановку приложений и чем он рискует. Возможно, к моменту вступления закона в силу — к 1 июля 2020 года — эти документы появятся.\nОтложили 5G\nЧто будет в России с 5G — вопрос открытый. Дело в том, что принятый стандартный диапазон частот (3,4–3,8 ГГц) для развёртывания сетей пятого поколения в России занят. Он закреплен за силовыми органами, и Путин \nотказался\n их отдавать на развитие связи. Компаниям предлагают использовать другие частоты, но тогда будут проблемы с подбором оборудования. По оценкам разных специалистов, отказ выделить частоты для 5G замедлит его внедрение в России 2−3 или 5−7 лет.\n2\nIT в мире\nАнтимонопольщики начали расследования против Google\nЗакручивание гаек происходит не только в России — это мировой тренд. Регулирующие органы протёрли глаза, увидели, что в их огороде выросли какие-то монстры, и взялись за прополку. В США это \nвылилось\n в большое антимонопольное расследование против Google. В нём участвуют прокуроры 48 штатов, а также округа Колумбия и Пуэрто-Рико. В стороне остались только Калифорния и Алабама.\nВначале расследование концентрировалось на рекламном бизнесе корпорации, однако в ноябре Bloomberg со ссылкой на свои источники \nсообщил\n, что прокуроры этим не ограничатся. Расследование охватит также поиск и мобильную разработку.\nСо Штатами связана ещё одна история, которая отражает тренд деглобализации в технологическом бизнесе.\nСША надавила на Huawei\n16 мая Министерство торговли США \nвнесло\n Huawei и все её дочерние компании в торговый чёрный список. Американские предприятия лишились возможности вести с ними бизнес. В течение нескольких дней сотрудничество с Huawei поставили на паузу \nмногие техногиганты\n, а также \nнекоммерческие сообщества\n и \nассоциации\n.\nКонфликт США и Huawei тянется уже много лет. Власти Штатов \nобвиняют\n корпорацию в промышленном шпионаже и мошенничестве — обходе санкций против Ирана. Однако полное прерывание бизнес-отношений с Huawei могло негативно отразиться не только на корпорации, но и на технологическом развитии США и даже на обычных пользователях, далёких от большой политики. Huawei была и остаётся одним из лидеров в разработке железа и софта для сетей пятого поколения. Полный разрыв отношений с ней мог бы замедлить развитие сетей связи. С другой стороны, из-за санкций Huawei лишалась партнёрства с Google, а это значит, что она не могла использовать сервисы Google в новых устройствах Honor и Huawei. Более того, пользователи существующих устройств могли остаться без обновлений безопасности для Android.\nВ течение года Huawei дважды \nполучала\n временные лицензии, так что пользователи Honor и Huawei не пострадали. Но за это время корпорация успела выпустить \nсобственную операционную систему HarmonyOS\n и \nсмартфоны Mate 30\n, не использующие службы Google. Конфликт между США и Huawei находится в затяжной фазе. Он пока не завершён, но уже хорошо показал, что современный техногигант — это не великодушный гражданин Земли, а коммерческая структура, которая подчиняется тому, на чьей территории находится её штаб-квартира.\nНачали предупреждать о прослушке\nЛетом-осенью СМИ стали активно форсить тему прослушки разговоров с голосовыми помощниками. Дело в том, что устройства, на которых работают помощники, сохраняют записи разговоров. Некоторые потом отправляются на ручное ревью — это значит, что какие-то посторонние люди слушают эти записи и вручную их размечают. Так делают разработчики всех голосовых помощников, от Алисы до Алексы.\nШум поднялся из-за того, что посторонним людям попадают записи личного или глубоко интимного свойства. В них проскакивают физические адреса, имена людей и прочая информация, по которой можно идентифицировать или даже найти говорящего. \nПо словам некоторых подрядчиков\n, попадаются даже записи, где отчётливо слышны звуки секса.\nПроцесс ревью — необходимая часть развития голосовых помощников, отказаться от него было бы сложно. Однако основная часть претензий заключалась в том, что людей нормально об этом уведомляли. После того, как поднялась шумиха, \nGoogle\n и \nApple\n поставили программы ревью на паузу, Amazon \nдобавила\n в настройки Alexa кнопочку для согласия на такие ревью, а Microsoft \nисправила текст\n в политике безопасности.\n3\nСливы данных\nПочти утонули в утечках\nЕсли в 2018 году явным лидером по утечкам была Facebook, то в 2019 всё немного сложнее. Ещё в начале года звание самой крупной слитой базы получила подборка «Коллекций №1−5». В январе \nпоявилась\n «Коллекция №1», в которой хранился 1 миллиард уникальных комбинаций паролей и email-адресов. Спустя месяц она \nпополнилась\n четырьмя новыми базами, содержавшими в общей сложности 2,2 миллиарда уникальных записей. Но и это ещё не всё. В ноябре специалисты по кибербезопасности \nнашли незащищённый сервер\n с базой данных на 1,2 миллиарда человек. Данные принадлежали пользователям Facebook, Twitter, LinkedIn и Github.\nИз российских утечек больше всего запомнились банковские, хотя, \nпо данным InfoWatch\n, их доля в общем количестве не превышает 1%. Просто когда в сообщениях об утечке фигурирует один из крупнейших банков, это врезается в память и не желает исчезать. Так и произошло со «Сбербанком». В октябре на специализированных форумах появилось сообщение о продаже данных по кредитным картам — как позже \nвыяснилось\n, в утечке был виноват сотрудник банка. Через несколько недель данные клиентов «Сбербанка» \nпопытался продать сотрудник компании-подрядчика\n.\nВ целом число утечек в 2019 году выросло на 10%, говорит InfoWatch. При этом количество утёкших записей увеличилось вдвое. Это общемировая статистика. В России рост числа утечек составил 40%, количество записей увеличилось в шесть раз.\n4\nИскусственный интеллект и алгоритмы\nПоявился GPT-2 — гроза копирайтеров\nВ середине февраля команда OpenAI \nрассказала\n об алгоритме GPT-2. Это алгоритм для генерирования любого типа текста. Он умеет создавать новостные заметки, научные статьи, художественные произведения, умеет отвечать на общие вопросы и на вопросы по тексту, умеет заканчивать текст, извлекать из него суть. И всё это на приличном уровне. Тексты получаются адекватные, связные.\nРазработчики были настолько уверены в мощности и опасности этого инструмента, что поначалу опубликовали упрощённую модель. Они беспокоились, что Интернет заполонят фейковые новости. Полная версия модели \nбыла опубликовала\n только в ноябре. Наплыва фейковых новостей не заметно, зато на Amazon появились \nпервые книги, у которых в соавторах указан GPT-2\n.\nNVIDIA выпустила нейросети для людей\nNVIDIA в этом году выпустила несколько инструментов, которые ушли в народ и стали довольно популярны.\nНейросеть StyleGAN, на основе которой работает сайт ThisPersonDoesNotExist. Этот сайт \nгенерирует\n лица несуществующих, но до жути реальных людей. Он положил начало регулярным опросам в технологических или гиковских пабликах: надо угадать, какой человек реален, а какого создала нейросеть. Иногда угадать действительно сложно, в других случаях поддельного человека выдают мелкие артефакты или мутный фон. В течение нескольких месяцев после появления этого сайта возникали его условные клоны: ThisCatDoesNotExist, ThisStartupDoesNotExist, ThisVesselDoesNotExist.\nНейросеть GauGAN. На её основе NVIDIA \nсоздала\n особый пейнт, который чудесным способом превращает тяп-ляп наброски в фотореалистичный пейзаж. На пейзаж ещё можно наложить стиль какой-нибудь картины. Конечно, шикарные виды (и даже фантастические космические корабли) получались чаще всего у тех, кто и так хорошо умеет рисовать и знаком с понятием композиции. Этот минус попробовали убрать другие разработчики. Они \nсоздали\n подобие пейнта, в котором надо по сетке разбросать слова, обозначающие элементы пейзажа, а нейросеть сама всё красиво скомпонует и отрисует.\nПлатформа Playground AI, где можно \nпотыкать\n в демо-версии нейросетей. Это действительно полезная и классная штука, потому что даёт возможность прикоснуться к творчеству нейросетей людям, далёким от IT. На GitHub и других подобных платформах уже много разных интересных натренированных моделей, но чтобы их запустить, требуются знания, инструменты или какое-то количество времени, чтобы эти знания получить, а инструменты — должным образом освоить. Playground AI же представляет собой сайт с интуитивно понятным интерфейсом.\nГолосовые помощники заговорили как звёзды…\nМощный рывок вперёд сделал бизнес, основанный на использовании голосов известных людей. В сентябре Amazon \nобъявил\n, что Alexa умеет говорить голосом Самюэля Л. Джексона, и пообещал в 2020 году предоставить более широкий выбор знаменитостей.\nМесяцем позже в России \nпредставили\n проект Vera Voice, созданный при участии Screenlife Technologies Тимура Бекмамбетова. Этот проект развивает коммерческое направление клонирования голоса. Разработчики планируют заключать контракты с обладателями голоса и использовать его для записи аудиокниг, озвучки фильмов, игр, рекламных роликов, поздравлений.\n…и начали грубить\nВ июне в приложении «Тинькофф» \nпоявился\n голосовой помощник по имени Олег. Он с первого дня начал грубить пользователям, использовать обсценную лексику, а не так давно \nпредложил\n отрезать клиентке банка пальцы из-за того, что у неё не работает сканер отпечатка. Это всё потому, что Олег учится на открытых данных.\n5\nКриптовалюты\nНе запустили TON\nИстория Telegram Open Network началась ещё в 2018 году, однако до середины сентября ни в одном официальном канале Telegram о проекте не упоминалось. Лишь 24 сентября, чуть больше чем за месяц до предполагаемого запуска платформы, команда мессенджера запустила конкурс по проекту TON. До этого момента все новости о проекте попадали в СМИ из инсайдерских источников. По Интернету даже \nгуляла\n версия, что проект либо вообще не существует, либо существует, но разрабатывают его не Дуровы.\nЗа год о TON было не так много новостей. В марте началось закрытое тестирование платформы, промежуточные итоги в закрытом письме для инвесторов \nподвёл\n Павел Дуров два месяца спустя. В начале сентября СМИ \nузнали\n о запуске открытого бета-тестирования. 24 сентября команда мессенджера в официальном Telegram-канале \nобъявила\n конкурс на разработку смарт-контрактов для TON и поиск ошибок в тестовой сети, а затем \nопубликовала\n на официальном сайте правила использования криптовалюты Gram. А потом у проекта начались проблемы.\n31 октября должен был состояться запуск TON — в противном случае Павел Дуров обязался вернуть инвесторам вложенные деньги. В середине месяца Комиссия по ценным бумагам и биржам США (SEC) через суд \nдобилась\n запрета на распространение Gram. У Комиссии были сомнения в законности продажи токенов. Создатели проекта не зарегистрировали продажу и обращение Gram на американском финансовом рынке, как того требует закон о ценных бумагах. Для урегулирования конфликта с SEC нужно было время, и Павел Дуров (согласно, опять же, инсайдерским источникам) попросил у инвесторов отсрочки. Большинство проголосовали «за», так что запуск TON \nперенесли\n на 5 месяцев.\nИ Libra не запустили\nКороткая история проекта Libra тоже запнулась на регуляторских порожках.\nВ июне Марк Цукерберг \nобъявил\n, что планирует создать новую валюту, Libra. Выпускать и контролировать её должна \nLibra Associaton\n — некоммерческая организация, в которую вошли 27 компаний-партнёров. Среди них — ведущие платёжные системы и крупные технологические компании.\nLibra обещала быть глобальным проектом и по сути коммерческой валютой, которой можно оплачивать повседневные покупки. Возможно, она могла бы конкурировать с суверенными валютами государств. Однако подпорченная репутация соцсети всё-таки сыграла свою роль. С момента анонса не прошло и дня, как политики США и стран Европы \nстали призывать\n власти заморозить проект и тщательно его проверить. Это стоило Цукербергу нескольких важных партнёров. PayPal, Visa, Mastercard, eBay и ещё две компании \nвышли\n из Libra Associaton, решив подождать в стороне, пока ситуация не прояснится. Пока никакой ясности нет.\nFacebook планировала запустить проект в 2020 году. Сейчас, в конце декабря, руководители проекта \nтак и не могут точно сказать\n, когда именно и в каком виде состоится запуск: всё зависит от результатов переговоров с властями. Несмотря на сложности, проект всё ещё живёт. В середине декабря разработчики \nоткрыли\n доступ к тестовой сети Libra Blockchain и потихоньку собирают фидбэк.\n6\nРазработка\nПродвинули Kotlin\nGoogle \nобъявила\n, что Kotlin теперь считается предпочтительным языком для Android-разработки. «Код на Kotlin, — отметили в компании, — это значит, меньше кода. Меньше кода нужно печатать, тестировать и поддерживать».\nПо данным Google, сейчас больше половины профессиональных разработчиков использует Kotlin, а в исследовании Stack Overflow он занял четвёртую строчку среди наиболее любимых языков программирования. Поддержка C++ и Java никуда не денется.\nКажется, поняли, что такое DevOps\nЭто на самом деле не новый подход, но чисто интуитивно «взорвалась» сфера именно в этом году, тут сложно привести в пример конкретные новости. Стало больше тематических конференций/докладов и статей на медиа-площадках, увеличился спрос на специалистов, сразу несколько компаний активно выкатывают инструменты. Судя по контексту обсуждений, в девопсах перестают видеть мутировавших сисадминов и понимают, что это люди, которые отлаживают производство и выстраивают процессы разработки.\nЭффективный DevOps: 6 способов прокачать команду и себя\ntproger.ru\n7\nА что делал Илон Маск?\nДа, всеми любимому Маску посвящён целый раздел. Он / его компании в течение года сделали несколько важных вещей.\nРассказал про Neuralink\nВ середине июля Маск \nпровёл\n первую конференцию, посвящённую достижениям компании Neuralink. Он рассказал, что успели сделать специалисты за два года. Однако цель конференции, как признался сам Маск, состояла не в том, чтобы похвастаться. Neuralink стремилась показать перспективы области, привлечь к ней внимание инвесторов и, главное, специалистов, которые могли бы присоединиться к команде.\nNeuralink решила пойти по пути инвазивных нейроинтерфейсов — электроды для считывания сигналов будут вшиваться в мозг. Это позволит получить максимально чистую, незашумлённую информацию. Пробираться к мозгу специалисты предложили с помощью лазера, который оставит в черепе небольшое круглое отверстие. Электроды сделали в виде нитей, вшивать их должен специальный робот-хирург. Через нити данные будут передаваться на модуль, расположенный за ухом.\nПока Neuralink не замахивается на телепатию и слияние с ИИ. Сейчас важно довести технологии хотя бы до того, чтобы их можно было использовать в медицинских целях. Компания рассчитывает получить от американских властей разрешение на тестирование технологии на людях и в 2020 году начать эксперименты.\nЗапустил первые спутники Starlink\nВ этом году SpaceX начала запуск и развёртывание коммуникационных спутников для \nпроекта Starlink\n. С низкой орбиты — на высоте всего 550 километров — они должны раздавать интернет, покрывая всю поверхность Земли.\nПока было лишь два запуска, \nв мае\n и \nв ноябре\n, в каждой ракете было по 60 спутников. Американские власти одобрили вывод 12 тысяч спутников, но в ноябре SpaceX \nподала заявку\n на запуск ещё 30 тысяч.\nСпустя несколько дней после развёртывания первых спутников один любопытный голландец \nвысчитал\n, когда они будут пролетать над его головой, и заснял их на видео. Получилась вот такая цепочка звёздочек:\nОднако не все воспринимают Starlink и другие подобные проекты в позитивном ключе. Проблема в том, что световое загрязнение из-за спутников \nможет помешать\n работе обсерваторий. Кроме того, в наблюдениях астрономов будут возникать помехи из-за близости частот, которые используют спутники и наземные радиотелескопы.\nПоказал Cybertruck\nВ конце ноября Маск \nпровёл\n презентацию Tesla Cybertruck — это электропикап с дизайном настолько футуристичным, что тот стал предметом \nмногочисленных шуток\n.\nНасколько хороши аэродинамические свойства автомобиля, сказать сложно, но как пикап он как минимум неплох. По словам Маска, кузов Cybertruck произведён из нержавеющей стали, очень прочный — способен выдержать попадание пули. Пневматическая подвеска подстраивается под загруженность автомобиля. Для погрузки предусмотрена рампа.\nНа одном заряде младшая модель, в которой всего один двигатель, способна проехать 402 километра, старшая — 805 километров. Tesla планирует начать производство в конце 2021 года.\n8\nЧто ещё интересного\nСделали первую фотографию чёрной дыры\nВ апреле произошло историческое событие: проект Event Horizon Telescope \nопубликовал\n фотографию горизонта событий чёрной дыры в галактике M87 в созвездии Девы. Это в принципе первое изображение чёрной дыры.\nЧтобы его получить, учёные в течение недели в 2017 году собирала данные с восьми телескопов, расположенных в разных точках планеты. Они получили больше 2 тысяч терабайт данных. Их обработка заняла ещё два года.\nНачали выпускать складные смартфоны\n2019 год показал, что складные смартфоны — это реальный тренд в развитии гаджетов, а не пустые эксперименты с концепциями.\nОдной из первых \nвышла\n на этот рынок Samsung, и её пример показал, насколько опасно торопиться при выпуске устройств нового типа. Экраны Galaxy Fold, выданных на пробу журналистам, \nломались\n буквально через день. Samsung пришлось отложить старт продаж на несколько месяцев, чтобы найти и устранить проблему.\nРеальные складные смартфоны ещё успели показать Motorola — компания \nдала новую жизнь\n раскладушке razr — и Microsoft. \nMicrosoft Duo\n даже обошёлся без гибкого экрана.\nС чередой складных смартфонов пришли шутки о ночных кошмарах мобильных разработчиков. В Android 10 Google постаралась \nпредусмотреть\n как можно больше возможностей и сценариев использования складных устройств, однако сейчас они настолько разные, что проблем с адаптацией приложений вряд ли удастся избежать.\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/news-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/22.-cybertruck.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 732\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/ezwsGwmurF81.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/it-events-of-2019/",
                "title": "Чем запомнился 2019-й год в IT — рассказывают эксперты",
                "created_date": "30 декабря 2019 в 16:58",
                "body": "Развитие ИИ, цифровизация, утечки данных — спрашиваем у экспертов, чем им запомнился уходящий год.\nВадим Юн\n, \nгенеральный директор компании Crayon в России\nВ 2019 году в активное развитие получили технологии в сфере искусственного интеллекта и машинного обучения. Одна из самых хайповых тем этого года — технология подмены лиц. Нейронная сеть научилась качественно накладывать мимику одного человека на лицо другого. Достаточно предоставить одну фотографию, и нейронная сеть сгенерирует видео, где «обновленное» лицо будет двигаться как в реальной жизни. Теперь нейронные сети не только распознают определённые объекты и находят лица людей на изображениях, но и чётко определяют их границу, а также различают эмоции и мимику. Это означает, что все системы компьютерного видения научатся более точно понимать эмоции, а также заменять их на другие, таким образом, что это будет неразличимо для глаза.\nТехнологию deepfake будут применять при производстве видео, что позволит значительно улучшить качество новых фильмов и видео. В её основе заложена работа двух нейросетей, которые постоянно обучаются и прогрессируют, используя изображения из специальных библиотек, а также видео с YouTube. Однако у deepfake есть и обратная сторона медали — видео с подменой лиц зачастую могут носить провокационный характер. Уже сейчас в сети можно найти огромное количество фейковых видео, которые могут нести угрозу взаимоотношениям тех или иных групп людей. В связи с этим, в некоторых странах, например в Китае и США, существуют законы об ограничении использования deepfake-видео. Мы считаем, что в России также вскоре появятся законы, регулирующие применение данной технологии.\nЕщё один прорыв в применении ИИ в 2019 году — это совершенствование технологии по распознаванию естественного языка, который используется в различных IoT-устройствах, например в умных колонках. В этой сфере появляется всё больше и больше производителей. Крупные технологические компании активно вкладывают средства в технологию распознавания языка. В 2020 году на российском рынке искусственного интеллекта мы ожидаем появления одного-двух новых игроков.\n5\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nКонстантин Савчук\n, \nуправляющий партнер компании Constanta\nЭпоха 5G\n2019 год запомнился введением сетей 5G в коммерческую эксплуатацию в 18-ти странах. В рамках Всемирной конференцией радиосвязи (ВКР) были определены дополнительные частоты для ускорения запуска 5G по всему миру, но насущная мировая проблема нехватки частот для 5G до сих пор тормозит развёртывание сетей.\nПроблема в России имеет более острый характер из-за использования Роскосмосом и спецслужбами частот для 5G. На текущий момент тестируется 5G в Сколково на других диапазонах, для решения вышеупомянутой проблемы ПАО «Ростелеком» совместно с ПАО «МегаФон», ПАО «ВымпелКом» и ПАО «МТС» объединятся для расчистки диапазона в России.\nРазвитие искусственного интеллекта\nВ рамках развития ИИ был утвержден проект Национальной стратегии развития искусственного интеллекта. Компаниями Сбербанк, «Яндекс», Mail.ru Group, МТС, Российский фонд прямых инвестиций (РФПИ) и «Газпром нефть» создан альянс для ускорения развития технологий ИИ в РФ.\nЕщё одной важной новостью для России является запуск Сбербанком и дочерней компанией SberCloud самого производительного в России компьютера для работы с ИИ. Цель создания машины — предоставление мощностей компаниям разного размера (ранее были доступны только крупнейшим корпорациям). Компьютер занимает 29-е место в рейтинге Топ-500 самых производительных компьютеров мира.\nПроцесс цифровизации в России\nС начала 2019 года в России вступила в активную фазу развития Национальная программа «Цифровая экономика Российской Федерации». За год успешно запущены несколько пилотных сервисов упрощения процедуры получения различных документов и поступления в вузы, получения цифрового паспорта и запущен проект по обязательной маркировке табака, лекарств и обуви.\nУтечки данных в России и мире\nПо данным аналитического центра InfoWatch глобальных утечек в первой половине 2019 года стало более чем в 3 раза больше в сравнении с аналогичным периодом предыдущего года. Основными отраслями маневрирования злоумышленников оказались медицина (19%) и высокие технологии (18%). Практически 75% всех утечек занимают персональные данные, второе место разделяют платёжная информация и государственная тайна — по 10,9%.\nВ мае киберпреступники из группировки Unistellar поместили в облако персональные данные 275 млн жителей Индии (20% населения страны). Данные были стёрты, но злоумышленники оставили записку с контактной информацией для выкупа.\nВ ноябре исследователь в области безопасности Винни Тройя обнаружил базу профилей подписчиков Facebook, Twitter, LinkedIn и GitHub в количестве 1,2 млрд записей. Данные в таком объёме были обнаружены впервые, но в основном база содержала данные, с помощью которых возможна кража профилей в соцсетях.\nОдной из крупнейших утечек в России стала утечка данных клиентов Сбербанка, содержащая несколько десятков миллионов записей по персональным данным клиентов банка и их кредитным картам. Это не единственный случай за прошедший год, когда в открытом доступе были обнаружены базы данных российских банков.\n9\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n9\nПовысить\nПонизить\nПавел Коростелёв\n, \nруководитель отдела продвижения продуктов компании «Код безопасности»\nВал утечек в октябре. Сбербанк, Альфа-банк, ОТП-банк, Вымпелком — это только самые крупные. Такого количества громких инцидентов в короткий срок до этого не было.\nУсиление нормативных требований. Центральный банк выпустил положения по защите информации в кредитных и некредитных финансовых организациях. ФСТЭК и ФСБ выпустили несколько приказов, касающихся безопасности критической информационной инфраструктуры.\nСерьёзно запустилось импортозамещение в области операционных систем. Госы начали массово закупать российские дистрибутивы Linux.\n3\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nАлексей Парфентьев\n, \nруководитель отдела аналитики «СёрчИнформ»\n2019-й прошел под знаком ИБ — и это не узкий взгляд представителей отрасли, количество инцидентов информационной безопасности так выросло, что о них действительно заговорили все.\nВо-первых, гремели утечки. Эксперты насчитали за год 5183 сообщения о «сливах» по всему миру, в общей сложности на 7,8 млрд строк. Это худший год в истории утечек. Рекордной стала компрометация 1,2 млрд «наборов» персональных данных, в том числе полных профилей пользователей Facebook, Twitter и LinkedIn, обнаруженная в конце ноября.\nТенденция затронула и Россию. Летом 360 тыс. записей, в том числе персональные данные политиков и крупных бизнесменов, оказались в открытом доступе из-за брешей на госпорталах. Тогда же РЖД потеряла данные 706 тыс. сотрудников — и публично признала утечку в СМИ. В октябре и ноябре гремели новости о сливах из Сбербанка: официально банк подтвердил компрометацию данных 5 тыс. клиентов, журналисты и эксперты заявляли о 60 млн. Тогда же сообщали об утечке информации о 9 млн клиентов проводного интернета Билайна и компрометации базы ФНС на 20 млн человек.\nК тому же стало заметно, что утечки — главная «кормовая база» для мошенников. Вслед за громкими «сливами» учащались сообщения об атаках социальных инженеров, причем как на отдельных пользователей, так и на целые организации. И атаки стали более технологичными. Например, в 2019-м впервые зафиксировали телефонное мошенничество с помощью обученной нейросети для подделки голоса. Под видом гендиректора международной компании мошенники позвонили руководителю иностранного филиала и убедили перевести им 243 тысячи долларов.\nВо-вторых, много говорили об уязвимостях — и бездействии производителей, которые не торопятся их устранять.\nОтличились Intel, которые получили от исследователей репорт о дырах в безопасности процессоров ещё в 2018-м, а устранить их сумели только к концу 2019-го. Уязвимости позволяли злоумышленникам извлекать с ПК, ноутбуков и облачных серверов чувствительные данные, в том числе пароли и ключи шифрования. О победе над проблемой компания впервые заявила в мае, но ИБ-специалисты быстро указали, что патч закрывает только часть брешей. Так что к ноябрю пришлось выпускать вторую партию правок и мириться с репутационными потерями.\nНо самая громкая история — с уязвимостями нулевого дня BlueKeep (CVE-2019-0708), которая затронула старые версии Windows, и BlueKeep-2 для новых ОС. Microsoft пришлось выпустить патчи даже для давно не поддерживаемых версий. Это важный прецедент — производитель нечасто заботится о безопасности старых продуктов.\nСреди других значимых апдейтов можно назвать синхронную инициативу Google Chrome и Mozilla Firefox. Популярные браузеры в новых версиях получили функцию, которая позволяет проверить, не были ли скомпрометированы данные пользователей. Программы сравнивают их с опубликованными в сети базами утекших логинов и паролей, в случае совпадения автоматически оповещают об опасности.\nЧто касается релизов, то 2019-й не поразил прорывами. Рынок двигался по проторенным дорожкам: наращивал скорости передачи данных (5G и Wi-Fi 6-го поколения по стандарту 802.11ax), скорость и объёмы их обработки (BigData, машинное обучение, глубокая аналитика).\nПри этом многообещающие премьеры прошлых лет так и не «выстрелили»: мешает неопределённость в регулировании, законодатели не успевают ввести в правовое поле новые понятия. Например нет ясности, кто виноват, если от беспилотного транспорта страдают люди. Нигде в мире нет технических стандартов и законодательной базы для внедрения блокчейна — в результате технология «буксует», бизнес не может массово использовать её преимущества. Инвестиции в такие проекты падают.\nНо есть и обратная сторона. Благодаря тому, что «мода» на определённые IT-решения была сформирована 2–3 года назад, теперь заказчики и вендоры знают, что им нужно друг от друга. Например мы выпустили File Auditor — первое отечественное DCAP-решение для защиты данных, и перевели обслуживание DLP на облачные серверы как раз в ответ на потребности клиентов.\nНельзя отрицать, что «цифра» начала уверенно проникать в нехарактерные ранее области. И темпы космические — особенно в части внедрения IoT и интернет-сервисов. В этой ситуации по экспоненте растут объёмы данных, а с ними — число уязвимостей и угроз. Об этом, кстати, говорили на Gartner IT Symposium/Xpo 2019 в Барселоне. Таким образом, главным трендом наступающего десятилетия станет рост числа возможных векторов атаки на ИИ, облака, микросервисы и «умные» пространства. В этой связи ИБ неизбежно укрепит позиции — как минимум. А как максимум станет одним из 10 стратегических направлений в IT на ближайшие годы.\nХорошая новость в том, что одновременно вырастет цифровая и ИБ-грамотность пользователей. Эта потребность сформировалась под давлением многочисленных угроз, но тренд безусловно положительный. Дело за профессиональным сообществом: IT-компаниям стоит вкладываться в просветительские проекты, ИБ-специалистам в других бизнесах — не жалеть времени на обучение коллег.\n3\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nДмитрий Рогов\n, \nдиректор по технологическому развитию ИТ-компании «АйДи – Технологии управления»\nЕсли говорить глобально, то 2019 можно назвать годом глобального осознания ценности технологий нейросети. Это выражается в резком росте прикладных решений на базе технологии, которая окончательно перестала быть «игрушкой» или концептом на будущее.\nНапример Microsoft выпустил приложение Math Solver, способное распознавать написанное от руки уравнение или пример, и далее самостоятельно решать его, причём практически мгновенно. Такого рода решения задают тон развитию технологии в целом, поскольку обозначают собой новый уровень применении нейросетей на практике. Технологию научились «упаковывать» в понятное пользователям приложение с полезной функциональностью.\nОт уровня абстракции технология прочно вошла в повседневную жизнь. Голосовые помощники становятся всё более интеллектуальными, единственный их минус — пока довольно трудно исключить курьёзные сбои при генерировании ответов на вопросы человека. Нейросеть никогда не поймёт смысла того, что она генерирует, а исключить разного рода «неловкие ответы» можно только через существенное расширение затрат на фазу тестирования.\nВзлёт демонстрирует и направление компьютерного зрения.\nВ масштабе же российского рынка самым заметным событием, к сожалению, стала ситуация вокруг претензий Rambler к NGINX. Она стала яркой иллюстрацией общих проблем в стране с культурой opensource разработки. NGINX — самый распространённый веб-сервер в мире. С точки зрения имиджа и репутации России в глобальной ИТ-отрасли было крайне приятно осознавать, что подобное решение создано у нас, силами наших специалистов.\nМежду тем, происходящее сейчас показывает — даже немногочисленные разработки из России с глобальной ценностью не застрахованы от разрушения с применением административного ресурса в рамках корпоративных конфликтов. Сигнал во внешний мир посылается крайне негативный.\n4\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n4\nПовысить\nПонизить\nАйнур Мингалиев\n, \n.Net-разработчик ГК InnoSTage\nНа слуху у участников ИТ-рынка в этом году были темы, связанные с утечками информации. Проблема утечек конфиденциальной и пользовательской информации часто обсуждалась в связке именно с внутренними нарушениями в организациях. Действительно, такие факторы как неосторожность сотрудников или умышленная кража со стороны персонала, в 2019-м становились частыми причинами утечек и в результате болевыми точками для компаний, как в плане финансов, так и репутации.\nПо отчету InfoWatch за первое полугодие 2019 года было зарегистрировано 1276 случаев утечек конфиденциальной информации. Из них 695 утечек произошли по причине внутренних нарушений в компаниях. Кроме того, ужесточение регулирования сферы кибербезопасности привело к увеличению количества штрафов за утечку прежде всего пользовательских сведений. Например, согласно тому же отчёту, Американская сеть клиник Cottage Health была оштрафована на $3 млн за утечку защищённой медицинской информации, агентство недвижимости Sergic — на 400 тыс. евро.\nЕсли подводить итоги по релизам в 2019-м, то одними из самых обсуждаемых релизов стали C#8 и .NET Core 3.0. Например среди новых возможностей C#8 можно выделить метод интерфейсов по умолчанию. Кроме этого, возможность ссылочных типов не поддерживать null по умолчанию. Также появилась новая конструкция foreach await.\nРелиз .Net Core 3.0 в свою очередь дал поддержку C#8, Windows Presentation Foundation и Windows Forms для создания приложений Windows Desktop, улучшил поддержку Docker, сократил «расход» оперативной памяти и т. д.\nГоворя об ИТ-ивентах, среди российских одним из ключевых по-прежнему остается DotNext, который прошёл в Москве и Санкт-Петербурге. В этом году программа была расширена — к традиционным докладам добавили воркшопы. На конференции были собраны трендовые темы. Например состоялись выступления на тему погружения разработчика в машинное обучение, где в том числе речь шла про ML.NET — кроссплатформенную среду для машинного обучения с открытым исходным кодом. Также несколько спичей посвятили функциям релизов C# 8 и .NET Core 3.0.\n6\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n6\nПовысить\nПонизить\nЗураб Белый\n, \nруководитель практики Java центра разработки компании «Рексофт» в Воронеже\nВыход Java 13\nВ памяти ещё живёт то время, когда выход новой версии Java был событием пятилетки. Но всё меняется. Oracle не только перешёл на полугодичные релизы, но и уверенно закрепил эту тенденцию. Два релиза в этом году, и текущая актуальная 13-я версия являются тому доказательством. С одной стороны, такая частота релизов делает язык более современным, востребованным и желанным к изучению. С другой, редкие релизы были одновременно и сильной стороной Java. Стабильность и надежность — два основных фактора, влияющих на принятие решения при выборе технологии для разработки. А сейчас срок поддержки новой версии сильно уменьшился. Последний релиз с долгой поддержкой — одиннадцатый. Но современные реалии диктуют свои условия: скорость развития технологий, спрос на новые решения и высокая конкуренция между языками программирования требуют изменений устоявшихся традиций.\nВыход Raspberry PI 4\nПрограммирование сегодня вс— больше уходит в сторону микроконтроллеров, носимых устройств и IoT. Raspberry PI в этом мире стоит где-то посередине — полноценный компьютер, но умещающийся на ладони. Начиная с самой первой версии этот одноплатник открыл новый спектр возможностей. Сейчас это уже четырёхъядерный процессор, современные порты (наконец-то появился современный USB-С), поддержка 4k-мониторов. По сравнению с предыдущей версией, Raspberry PI 4 — сильный скачок в развитии линейки. А низкая, адекватная цена делает этот компьютер доступным не только для профессионального использования, но также для обучения и домашних экспериментов.\nПервая IT nights в Иннополисе\nВ начале августа этого года прошла первая ночная IT-конференция в Иннополисе в Казани. Из всего обилия мероприятий в уходящем году в список добавлю только это. Во-первых, за необычный формат: все доклады были во второй половине дня и заканчивались ночью, а днём организаторы предоставляли различные развлечения в самом городе. Во-вторых, за новую площадку. Москва и Санкт-Петербург уже перенасыщены конференциями и митапами, но на этих городах IT-индустрия в России не заканчивается, нужно развивать и другие комьюнити. В-третьих, за низкую стоимость при хорошем качестве. Конференция собрала крутых специалистов, а цена входного билета кажется смешной на фоне других IT-конференций в России.\nВыход JetBrains Space\nРебята из JetBrains продолжают завоёвывать сердца программистов. Среда разработки, система код-ревью, таск-трекеры, а теперь ещё и платформа для всех процессов разработки. С учётом использования других продуктов компании в проекте и их плотной интеграции со Space, этот продукт станет убийцей Slack, Jira и других популярных продуктов. Сейчас разработка находится на стадии beta-тестирования, но уже можно попробовать поиграться с ней внутри своей команды, тем более что на время, пока не вышел первый релиз, она является полностью бесплатной.\n11\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nАнна Водолазская\n, \nдиректор по маркетингу «Академии АйТи»\nПодводя итоги года в разрезе ИТ-обучения, повышения квалификации и переподготовки кадров, стоит отметить несколько важных моментов.\nВ 2019 году вырос спрос на управленцев нового поколения, которые могут выступать в роли «переводчиков» между потребностями бизнеса и поставщиками цифровых решений, в роли новаторов, со знаниями бизнес-моделей, построенных на цифровых технологиях. По всему миру организации всё больше стали заинтересованы в позиции Chief Digital (Transformation) Officer. CDTO отвечает за работу бизнеса в условиях цифровой экономики. В зону его ответственности попадают разработка и реализация стратегии цифровой трансформации, данные и механизмы работы с ними, обучение сотрудников, накопление компетенций, создание системы управления знаниями, «оцифровка» продуктов и услуг, изменение бизнес-процессов.\nВ России, по сообщениям TAdviser со ссылкой на исследование KMDA 2018 года, в 18% компаний уже есть должность CDO/CDTO. Еще 28% респондентов отметили готовность к вводу такой позиции. 35% из опрошенных компаний имеют готовую стратегию цифровой трансформации и внедряют её, и более 26% компаний собираются разрабатывать. Всего в ходе исследования были опрошены представители 300 компаний из 15 отраслей. Рынок ИТ-образования откликнулся на спрос и вывел ряд программ для переподготовки современных цифровых управленцев. Ожидается, в 2020 году спрос на эти программы значительно возрастёт. Сами программы будут эволюционировать под потребности бизнесов.\nВо-вторых, отмечается повышенный спрос на курсы по машинному обучению, базам данных, языкам разработки. По аналогу прошлого года было востребовано обучение импортозамещающим технологиям российских компаний.\nСтабильно высокий интерес к обучению проектному менеджменту, подготовку и сертификацию на PMP (Project Management Professional), а также ИТ-менеджменту. Эти знания сейчас важны практически любому специалисту, задействованному в проектах. Кроме того, внедрение проектного менеджмента в органах власти по всей стране требует повышения квалификации кадров.\nВ-третьих, на протяжении последнего времени, мы отвечаем на повышенный интерес заказчиков к обучению информационной безопасности, так как количество киберугроз и уровень рисков растёт экспоненциально с каждым годом. Особенное внимание обучению кибербезопасности уделяют заказчики из банковской отрасли. В то же время, в отраслях, не относящихся непосредственно к ИТ, значимость информационной безопасности сегодня ещё недооценена. По нашим оценкам, только около 40% рынка включает кибербезопасность в реестр главных корпоративных рисков. Однако, основами безопасности должен владеть каждый специалист «будущего», начиная с рядовых сотрудников.\n0\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nЮрий Орлов\n, \nдиректор департамента информационной безопасности QBF\nВ этом году существенно видоизменилась работа финансовых компаний с точки зрения IT-технологий. Прежде всего, мы воспользовались возможностью обслуживать клиентов дистанционно. Драйвером развития удалённой идентификации, то есть проверки через интернет соответствия пользователя той личности, от имени которой он производит действия, стала запущенная в 2018 году Единая биометрическая система (ЕБС).\nКстати, расширение сферы использования биометрии наблюдается во всём мире. По данным J’Son & Partners, в 2018 году количество кейсов с использованием биометрической информации достигло 40%. Уже в 2022 году доля данных операций может превысить 55%, причём более 30% из них будут осуществляться в финансовом секторе. Внедрение системы удалённого распознавания клиентов даёт мощный толчок для развития цифровизации предоставляемых услуг. Уже сейчас разрабатывается множество сервисов, позволяющих воспользоваться услугами финансового рынка с помощью смартфона. В перспективах внедрение технологических решений для широкого взаимодействия с юридическими лицами, в частности, представителями малого бизнеса.\nКроме того, огромные перспективы для развития IT-технологий в финансовом секторе открывает Мастерчейн. На данный момент это единственная блокчейн-платформа в нашей стране, которая прошла сертификацию и может использоваться для промышленного применения в банках. Продукт подготовлен экспертами команды Ассоциации ФинТех (АФТ) совместно с представителями отечественной финансовой индустрии и Банка России. Сейчас мы ожидаем выпуска конкретных технологических решений с использованием возможностей отечественной блокчейн-платформы. Они способны упростить деятельность финансовых организаций сразу в трёх направлениях.\nВо-первых, могут быть снижены транзакционные издержки при межбанковских и межгосударственных переводах. Во-вторых, разрабатываемые решения способны уменьшить временные и финансовые издержки при электронном документообороте. В-третьих, технологические предложения с использованием Мастерчейна упростят проверку клиентов на предмет участия в сомнительных операциях, в частности отмывании денег и финансировании терроризма. Блокчейн планируется использовать для обмена данными между разными финансовыми организациями о проверках физических и юридических лиц.\n1\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n1\nПовысить\nПонизить\nИгорь Дикшев\n, \nгенеральный директор R-Labs\nВо-первых, это проекты в рамках реализации программы «Цифровая экономика» (разработка и утверждение дорожных карт по технологиям). Также в этом году Сбербанк запустил вычислительный кластер SberCloud, который занял 29 строчку рейтинга Top500 самых высокопроизводительных компьютеров мира. Стоит также включить в список начало запуска сотовых сетей 5 поколения, что позволит приступить к оказанию целого ряда инновационных услуг, например, на базе AR. Отметим также важные нововведения в законотворчестве в части поддержки российских разработчиков и отечественных ИТ-компаний, мероприятия в области обработки и защиты персональных данных (создание «цифрового профиля» гражданина РФ; активизация законодателей с инициативами, обязывающими операторов хранить персональные данные россиян на серверах в РФ).\nКроме того, в текущем году на рынок стали выходить проекты по созданию цифровых двойников организации, которые реализуются в рамках программ цифровой трансформации. Здесь стоит упомянуть появление решения СИМБА. В 2019 году компании активно развивали онлайн-каналы продаж. Одним из примеров является внедрение компанией Аэрофлот e-commerce-проектов, в результате чего отмечен существенный рост конверсии продаж.\n3\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nСергей Левашов\n, \nдиректор Центра бизнес-анализа ГК «РАМАКС»\nВ числе наиболее значимых событий 2019 года в IT отмечу масштабное внедрение FR-систем — как государством, в том числе системы городского видеонаблюдения, так и компаниями (банки, ритейл, авиация). Значимое событие также — формирование ИТ-экосистем крупнейшими российскими банками. Следует упомянуть активное тестирование беспилотных автомобилей компанией Яндекс. В области Blockchain выделю создание компанией Vostok платформы в сфере логистики и финансов. В области Big Data — планы Ростелеком и ВТБ по созданию платформы обмена большими данными.\nДо конца этого года Ассоциация больших данных, в которую входят Сбербанк, Тинькофф Банк, «Ростелеком», «Мегафон», Qiwi, планирует создать тестовую площадку-«песочницу» для обработки на единой платформе данных своих участников для тестирования связанных с Big Data сервисов.\n1\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n1\nПовысить\nПонизить\nКонстантин Шакуров\n, \nIT-продуктолог SimbirSoft\nРазрабатывая IT-решения для бизнеса в 2019 году, мы наблюдали огромный спрос на современные, «хайповые» технологии, такие как искусственный интеллект или рекомендательные системы. Эти технологии у всех на слуху, у пользователей и бизнеса формируется ожидание, что IT – это «волшебная коробка», готовый ответ на любую проблему.\nНа практике нужно учитывать множество факторов, и зачастую это требует значительных вложений. Например, для Machine Learning нужно собирать и структурировать данные, причём правильно и в течение продолжительного времени. Если IT-ориентированные компании серьёзно подходят к оценке как затрат, так и ожидаемых результатов, то некоторые бизнесы следуют технологической моде, и для них это рискованно. Проблема выбора подрядчиков в этих условиях как никогда актуальна.\nМы много внимания уделяем разработке решений для финтеха, ритейла, страхования, фармацевтики. Мы видим, что цифровизация в финтехе проходит высокими темпами.\nТехнологические гиганты, такие как Тинькофф или Сбербанк, влияют на рынок даже сильнее, чем регуляторы. Банковский сектор стал локомотивом IT-трансформации, вслед за ним постепенно меняются и консервативные страховые компании. Мы сами в 2019 году выпустили своё коробочное решение для страхования и сейчас разрабатываем приложения на его основе для бизнеса.\nЕщё одна перспективная область для IT — это ритейл, который работает с колоссальным количеством данных. Новыми решениями интересуются аптечные сети. Однако, зачастую ритейл ещё не готов к массовому внедрению IT, поскольку для правильной работы с данными необходимо унифицировать работу всех магазинов сети. В целом, рынок IT — всё более массовый, насыщенный, хайповый. Бизнес нацелен на работу с информационными системами и предъявляет всё более высокие требования к качеству работ.\n5\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nВладимир Кургузов\n, \nстарший программист «Аэроклуб ИТ»\nСамым ожидаемым в этом году был выпуск 3-го декабря .NET Core 3.1. Одним из важных качеств последнего релиза для нас является его статус Long Term Support (LTS). Это значит, что данную версию фреймворка Microsoft будет поддерживать как минимум 3 года. То есть мы можем разрабатывать на нём довольно крупные проекты и не беспокоиться о появлении несовместимых изменений во фреймворке.\nПо сравнению с предыдущими версиями, третья получила довольно хорошую оптимизацию и множество нововведений. Одно из них — Blazor WebAssembly. Если кратко, Blazor — это UI-фреймворк, который может работать в различных окружениях: не только на сервере, но и на клиенте. Приложения на Blazor размещают свои компоненты в браузере при помощи среды исполнения .NET, основанной на стандарте WebAssembly. Это позволяет запускать клиентский код без необходимости использования каких-либо плагинов для браузера или переноса кода.\nЯ считаю эту технологию достаточно перспективной, поскольку с её помощью приложения получают скорость выполнения браузерного кода, близкую к нативному исполнению. Это полезно, например, для одностраничных сайтов. Кроме того, WebAssembly совсем недавно был стандартизирован W3C, что, надеюсь, ускорит применение этой технологии в веб-разработке.\nКоллеги отметили, что в 2019 году стало сложнее «летать» на квадрокоптерах. Получить официальное разрешение в Москве практически невозможно (насколько нам известно, это пока удалось только одному человеку), а штрафы за использование воздушного пространства увеличились в 10 раз (с 3–5 тысяч рублей до 30–50 тысяч рублей). В других городах получение разрешения упирается в бюрократическую волокиту: на согласование двадцатиминутного полета нужна неделя. Надеемся, что в следующем году это изменится в лучшую сторону.\nИ, в свете последних событий, 2019 год запомнится, конечно же, исками от Rambler. В первую очередь — попыткой компании предъявить права на nginx, что вызвало довольно сильный резонанс во всём IT-сообществе. Мы поддерживаем мнение, что opensource технологии должны быть свободными, и выражаем благодарность и уважение Игорю Сысоеву за разработку nginx.\nЖелаем вам в будущем году больше открытых стандартов и проектов, больше возможностей, и больше крутых открытий в IT!\n5\nОтвет эксперта\n2019-12-30T16:58:19+03:00\n\n \n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, чем запомнился 2019-й год в IT?\nЭкспертам запомнились:\nповсеместные утечки данных;\nразвитие технологий машинного обучения: дипфейки, обработка естественного языка, рекомендательные системы и т. д.;\nвступление в активную фазу развития Национальной программы «Цифровая экономика Российской Федерации».\nТакже эксперты упомянули следующие события:\nвыход Java 13;\nвыход Raspberry Pi 4;\nвыход JetBrains Space;\nвыход .NET Core 3.1;\nусложнение процесса получения разрешения на полёты на квадрокоптере;\nвведение 5G в коммерческую эксплуатацию в 18 странах;\nимпортозамещение в области операционных систем.\nА что запомнилось вам? Делитесь в комментариях.\n100500\nЛучший ответ\n2019-12-30T16:58:19+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/it-events-2019-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Vadim-Jun_Crayon_2-e1576314959635-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/DSC08493-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/34506_7f838b8e_mjK34x6q_1577104965-e1577369796887-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/40446_c3879a36_EFdaPADX_1574760151-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/08/D.Rogov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/87615_c719b3a7_EEWy5nwP_1577456981-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/89124_03cc4a38_yF33srQ0_1575901413-1-e1577457118236-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/40269_d313e989_b81MwMGW_1575293298-e1577457285730-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Jurij-Orlov-e1576750649567-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Dikshev-4-e1577527579121-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/01/13450_66b1ce6e_MXk653YI_1547647852-e1548331529913-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/w5ftf5b4y45b5hw6h4tfgb7m5jhw56-e1576148710276-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Kurguzov-e1577529462769-150x150.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/6-principles-of-efficient-devops/",
                "title": "Эффективный DevOps: 6 способов прокачать команду и себя",
                "created_date": "29 декабря 2019 в 12:49",
                "body": "Виктор Ведмич, System Engineering Team Leader, EPAM\nДо сих пор бытует представление, что DevOps — это такой продвинутый сисадмин, который знает больше остальных сисадминов. На самом деле, DevOps — Development Operations — это культура процессов разработки. Сюда входит всё: как вы ставите приоритеты, какие технологии используете, как взаимодействуете с заказчиками и т.д.\nЦель DevOps — максимально быстро доставить продукт. Причём продукт, который работает так, как нужно заказчику.\nЯ тружусь в команде EPAM почти 10 лет и хочу поделиться с вами принципами и подходами, которых мы придерживаемся в процессе разработки.\nПостоянная обратная связь от клиента\nГоворить «чем больше развёртываний, тем лучше» — это как говорить «чем больше строчек кода, тем лучше».\nDevOps/Linux-инженер\n«КРОК», Москва, от 100 000 до 250 000 ₽\ntproger.ru\nВакансии на tproger.ru\nВесь мир использует Continuous Delivery — подход, при котором программное обеспечение производится короткими итерациями. Но инженеры часто забывают о том, что сам бизнес должен быть включён в процесс. CD не будет полным, если вы не добьётесь постоянной обратной связи — работает ли продукт так, как нужно клиенту? Новые функции востребованы? Помогают ли они в решении бизнес-задач?\nМы всегда предупреждаем клиентов, как часто будет проходить демо продукта. Даже если изменили «цвет одной кнопки» — обязательно покажем это на ближайшей встрече и аргументируем своё решение. Такой подход позволяет выискивать проблемы в интеграции намного раньше и решать их ещё на стадии разработки.\nЧем раньше вы выявите ошибку, тем меньше времени потратите на её исправление. А это значит, что ваша компания сэкономит ресурсы — время сотрудников, серверные мощности и т.д.\nЧтобы клиент дал нормальную обратную связь, только что выложенная функция должна работать хорошо. И с этим связан наш следующий принцип.\nSuccess Delivery\nКакой прок в частых развёртываниях, если продукт работает нестабильно? Другой наш принцип — success delivery (успешная доставка продукта). Если во время или после развёртывания ничего не работает или работает плохо, то у клиента возникнет много вопросов. Так что success delivery напрямую влияет на доверие к вам.\nНедавно для одного клиента мы сделали так: проводили развертывание ночью (у заказчика в это время была ночь), но при этом не выводили сервис из строя, а только ограничили его функциональность. Если случайный пользователь заходил на сервис, то видел предупреждение: «Можно смотреть весь контент, но пока что нельзя его изменять: прямо сейчас мы выгружаем новую версию». Такое решение снизило негатив со стороны пользователей до нуля.\nЕсли говорить о подходах, то упомяну Blue-green deployment. В одном из моих проектов подход позволил и уменьшить количество ошибок, и сократить время доставки (с 4 часов до 30 минут).\nBlue-green deployment — это создание копии продукта с новыми функциями рядом с предыдущей версией, на том же сервере. В нужный момент вы просто переключаете клиента со старой версии на новую. Прелесть паттерна в том, что если в новой версии что-то не работает, то можно сделать «свитч» обратно.\nДругой подход: Canary deployment. При его использовании мы даём только 5% нагрузки на новую версию, и 95% — на старую, а затем оцениваем, как пользователи взаимодействуют с новым функциями и как система справляется с нагрузкой. Раньше Canary deployment можно было делать только на дорогостоящих девайсах, сегодня подход могут использовать все.\nМаксимально быстрая обратная связь для разработчика\nЧеловек не может быть мультизадачным. Обычно происходит так: разработчик делает коммит, а потом решает не тянуть и перейти к следующей задаче. Теперь ему снова потребуется время, чтобы погрузиться в детали предыдущей.\nА если я сделал коммит и тут же увидел сообщение, что что-то сломалось, то могу быстро вернуться в контекст и всё исправить.\nПоэтому мы должны предоставлять очень быструю обратную связь, в идеале — через несколько секунд. Конечно, не всегда получается так быстро. Наши рамки — не более 5–10 минут. Это то время, за которое человек не успеет переместить фокус.\nДля этого мы используем автоматизацию, а точнее, автоматизированные тесты. Если тестов слишком много, то решаем: может, их нужно распараллелить? Или разбить на куски? Выдавать результаты тестов по очереди, группами? Все лучшие практики сохраняются во внутренней базе знаний.\nНе гонитесь за автоматизацией\nВы наверняка сталкивались с командами, которые считают, что DevOps — это автоматизация всего. Особенно молодые инженеры с горящими глазами любят автоматизировать всё подряд. Наши разработчики не исключение, но решение об автоматизации остаётся за техлидом, который высчитывает ROI (окупаемость инвестиций) этой автоматизации.\nЛюбая затрата должна окупаться. Если я потрачу на автоматизацию 160 часов, а сама задача обычно занимает 5 минут в месяц — пусть лучше она останется «ручной».\nКонечно, иногда дело не только в ROI. Другой случай — задача большая, сложная, её трудно будет повторить. Тут автоматизация оправдана, она выступает в роли документации.\nИли, например, автоматизация работы с облачным провайдером. Если мы понимаем, что проект большой и мы будем часто вручную работать с провайдером, есть смысл автоматизировать. А если заказчику срочно нужен MVP, чтобы проверить спрос, мы готовы сработать «некрасиво», вручную.\nПредлагайте внедрять новые технологии\nМы не делаем технологии ради технологий, но всегда сообщаем клиенту, если что-то можно значительно улучшить.\nДля начала клиент должен осознать проблему. Я, как эксперт в этой сфере, вижу проблему и сообщаю её клиенту, затем предлагаю решение и аргументирую свой подход.\nБывает, что клиент не готов инвестировать в решение и просит оставить как есть. В таком случае мы всё равно можем внедрять эту технологию, но уже в своё свободное время. Некоторые технологии сильно облегчают работу нам самим, так что оно того стоит.\nНа старте карьеры я работал с клиентом, у которого была не очень хорошая мониторинговая система. Мы предложили внедрить Zabbix, но он отказался, потому что не хотел тратить ресурсы. Постепенно мы развивали технологию на некоторых частях проекта сами, потому что это было удобно. В какой-то момент клиент увидел серьёзную выгоду и попросил внедрить Zabbix на всей платформе.\nНе DevOps-специалисты, а delivery-команда\nНад продуктом всегда работает delivery-команда. Такая команда отвечает за конечную доставку продукта, а не за какую-то часть работы. Слово «Delivery-менеджер» мы не придумали сами, оно уже \nсуществовало на рынке\n.\nВ практике EPAM delivery-менеджер — всегда технарь и, как правило, бывший разработчик. Даже если сейчас он не пишет код, то способен сделать code review.\nОн знает, как устроены приложения, платформы и их компоненты изнутри. Может координировать архитектурные и технологические решения. Это не значит, что человек работает во всех этих ролях одновременно, но он понимает основы и может организовать команду.\nЧто касается delivery-команды, то это комбинация людей с правильными скиллами. Сюда может войти бизнес-аналитик, QA-тестировщик, UX-дизайнер, разработчики с нужным стеком и т.д. Команды каждый раз подбираются индивидуально в зависимости от проекта, подбором занимаются сами delivery-менеджеры.\nКак правило, delivery-менеджер развивает специализацию на какой-то индустрии, будь то финансы, электронная торговля или сфера путешествий, и следит за её трендами. Поэтому delivery-менеджер ценен для заказчика — он понимает рынок и может предложить решения, которых не было в техническом задании, но которые выгодны для бизнеса.\nDevOps — это всегда культура, и от неё зависит, насколько эффективно в компании будут выстроены процессы разработки, и насколько выгоднее эти процессы будут для неё самой, клиентов и пользователей. Все лучшие практики мы постоянно добавляем в базу знаний, а также обучаем этому сотрудников.\nКак развиваться в DevOps\nЯ участвовал во многих спорах, с чего нужно начать своё развитие в DevOps. Мне кажется, главное — база, фундаментальные знания, которые, к сожалению, часто отсутствуют у молодого поколения.\nЗнание сетей\nУ моего заказчика была интересная ситуация: при построении внутренней сети неопытные системные инженеры выбрали абсолютно случайный диапазон IP-адресов. И так получилось, что эти адреса совпадали с диапазоном, который использует AWS. Это серьёзная ошибка, для решения пришлось настроить маршрутизацию, проделать очень много работы. Если бы те инженеры хорошо понимали работу сетей, они не допустили бы таких катастрофических промахов.\nПолезные ресурсы по теме:\nУчебный курс Андрея Созыкина «Компьютерные сети»\n (бесплатный курс по компьютерным сетям с серией коротких видео);\nЛекция Виктора Ашика «Сети и протоколы + Виртуализация»\n.\nЛекция Виктора Ашика «Сети и протоколы»\n (видео-уроки о работе сетей, протоколах, устранении неполадок в сети, IP адресации и др.).\nВ. Г. Олифер, Н. А. Олифер «Компьютерные сети, принципы, технологии, протоколы» 2-е издание\n (базовый учебник по компьютерным сетям).\nЭ. Таненбаум, Д. Уэзеролл «Компьютерные сети» 5-е издание\n (книга по современным сетевым технологиям).\nОперационные системы\nКто бы что ни говорил про контейнеры, но понимание ядра операционных систем остаётся актуальным даже в 2020 году. Windows или Linux — тут каждый выбирает, что ему ближе.\nПолезные ресурсы по теме:\nКурс Microsoft 20410D — Windows Server 2012 R2. Установка и настройка\n (подробный курс по Windows Server 2012 R2).\nВведение в Linux\n (знакомство с операционной системой Linux и её базовыми возможностями).\nЭви Немет, Гарт Снайдер, Трент Хейн, Бэн Уэйли «Unix и Linux. Руководство системного администратора»\n (Unix и Linux. Руководство системного администратора).\nСкриптинг\nЭто Python, Bash, Powershell. Нужно уметь автоматизировать рутинные задачи.\nПолезные ресурсы:\nScratch – Imagine, Program, Share\n (позволяет в игровой форме освоить базовые понятия программирования).\nBrad Miller and David Ranum «Problem Solving with Algorithms and Data Structures using Python»\n (интерактивный учебник по основам алгоритмизации и структур данных).\nCS50 на русском. Гарвардский курс по основам программирования\n.\nОблачный провайдер\nЯ рекомендую начать с одного: Azure, AWS или Google Cloud. А дальше использовать CICD инструменты, например, Jenkins — нестареющая классика. Потом смотреть в сторону контейнеризации: Docker и Kubernetes.\nПолезные ссылки:\nIntroduction to Containers\n.\nDeploying and Scaling Microservices with Docker and Kubernetes\n.\nЕщё несколько ресурсов, которые мне нравятся:\nПодкаст «\nРадио-Т\n» — каждую неделю здесь обсуждают последние околокомпьютерные новости.\nLinux Academy\n — классный проект. Он недешёвый, но ребята делают качественный контент.\nW3Schools Online Web Tutorials\n (общая информация о большинстве аспектов веб-программирования).\nCMTV\n [Грани Hi-Tech] (видео по самым разнообразным технологиям).\nКак учиться\nМне сильно помогает Social Learning — когда ты учишься не один, а с кем-то. Это, во-первых, мотивирует не бросать, а во-вторых, ты знакомишься с разными точками зрения и подходами к одной проблеме. Сейчас готовлюсь к экзамену Certified Kubernetes Administrator. И готовлюсь не один, а вместе с коллегами. Мы встречаемся два раза в неделю по вечерам и разбираем кейсы. Экзамен хорош тем, что программа уже разложена по полочкам, притом ты сразу понимаешь, как это использовать на практике.\nЧтобы разбираться в DevOps, конечно, недостаточно выучить принципы, научиться каким-то технологиям или запомнить набор сервисов. Чтобы разбираться в DevOps, нужно работать в компании, которая этим принципам действительно следует.\nНе смешно? А здесь смешно: \n@ithumor\nDevOps\nТакже рекомендуем:\nКто такой DevOps и как им стать: план обучения\nТоп книг по программированию, вышедших на русском языке в 2018 году\nЗачем и как использовать контейнеры: разбираемся с Docker, Kubernetes и другими инструментами\nИзмерьте в себе DevOps — тест от Tproger и NetApp",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devops-icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Viktor-Vedmich-1-150x150.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/top-200-worst-passwords-2019/",
                "title": "200 худших паролей 2019 года. Кажется, пора устанавливать менеджер паролей",
                "created_date": "27 декабря 2019 в 20:51",
                "body": "На основе материала \n«Here are the most popular passwords of 2019»\nКаких только личных данных нет в сети — от паролей к банковской карте до подробного описания ваших завтраков и планов на неделю. Цена утечки таких данных может быть очень высока. Несмотря это, многие люди пренебрегают правилами информационной безопасности и продолжают устанавливать везде один самый простой пароль.\nНиже находится список из 200 самых популярных паролей 2019 года, который был собран из утечек данных. Проверьте себя: насколько вы заботитесь о своей безопасности?\nА в конце статьи мы опишем 5 шагов, которые помогут вам защитить свои данные.\nПерейти к советам\nТоп-200\n1. 12345 — 2812220 раз.\n2. 123456 — 2485216 раз.\n3. 123456789 — 1052268 раз.\n4. test1 — 993756 раз.\n5. password — 830846 раз.\n6. 12345678 — 512560 раз.\n7. zinch — 483443 раза.\n8. g_czechout — 372278 раз.\n9. asdf — 359520 раз.\n10. qwerty — 348762 раза.\n11. 1234567890 — 329341 раз.\n12. 1234567 — 261610 раз.\n13. Aa123456. — 212903 раза.\n14. iloveyou — 171657 раз.\n15. 1234 — 169683 раза.\n16. abc123 — 150977 раз.\n17. 111111 — 148079 раз.\n18. 123123 — 145365 раз.\n19. dubsmash — 144104 раза.\n20. test — 139624 раза.\n21. princess — 122658 раз.\n22. qwertyuiop — 116273 раза.\n23. sunshine — 107202 раза.\n24. BvtTest123 — 106991 раз.\n25. 11111 — 104395 раз.\n26. ashley — 94557 раз.\n27. 00000 — 92927 раз.\n28. 000000 — 92330 раз.\n29. password1 — 92009 раз.\n30. monkey — 86404 раза.\n31. livetest — 83677 раз.\n32. 55555 — 83004 раза.\n33. soccer — 80159 раз.\n34. charlie — 78914 раза.\n35. asdfghjkl — 77360 раз.\n36. 654321 — 76498 раз.\n37. family — 76007 раз.\n38. michael — 71035 раз.\n39. 123321 — 69727 раз.\n40. football — 68495 раз.\n41. baseball — 67981 раз.\n42. q1w2e3r4t5y6 — 66586 раз.\n43. nicole — 64992 раза.\n44. jessica — 63498 раз.\n45. purple — 62709 раз.\n46. shadow — 62592 раза.\n47. hannah — 62394 раза.\n48. chocolate — 62325 раз.\n49. michelle — 61873 раза.\n50. daniel — 61643 раза.\n51. maggie — 61445 раз.\n52. qwerty123 — 59782 раза.\n53. hello — 59125 раз.\n54. 112233 — 58745 раз.\n55. jordan — 58698 раз.\n56. tigger — 57167 раз.\n57. 666666 — 56801 раз.\n58. 987654321 — 56653 раза.\n59. superman — 56113 раза.\n60. 12345678910 — 55414 раза.\n61. summer — 55403 раза.\n62. 1q2w3e4r5t — 55318 раз.\n63. fitness — 55095 раз.\n64. bailey — 54405 раз.\n65. zxcvbnm — 53307 раз.\n66. fuckyou — 52997 раз.\n67. 121212 — 52684 раза.\n68. buster — 51495 раз.\n69. butterfly — 51413 раза.\n70. dragon — 50640 раз.\n71. jennifer — 50602 раза.\n72. amanda — 50560 раз.\n73. justin — 50294 раза.\n74. cookie — 49712 раза.\n75. basketball — 49556 раз.\n76. shopping — 49085 раз.\n77. pepper — 48564 раза.\n78. joshua — 48230 раз.\n79. hunter — 47430 раз.\n80. ginger — 47404 раза.\n81. matthew — 47207 раз.\n82. abcd1234 — 47064 раза.\n83. taylor — 46375 раз.\n84. samantha — 46353 раза.\n85. whatever — 46339 раз.\n86. andrew — 46083 раза.\n87. 1qaz2wsx3edc — 45643 раза.\n88. thomas — 45317 раз.\n89. jasmine — 45190 раз.\n90. animoto — 44940 раз.\n91. madison — 44183 раза.\n92. 987654321 — 44175 раз.\n93. 54321 — 43912 раза.\n94. flower — 43696 раз.\n95. Password — 43430 раз.\n96. maria — 43177 раз.\n97. babygirl — 43037 раз.\n98. lovely — 42897 раз.\n99. sophie — 42889 раз.\n100. Chegg123 — 42542 раза.\n101. computer — 42531 раз.\n102. qwe123 — 42478 раз.\n103. anthony — 42427 раз.\n104. 1q2w3e4r — 42242 раза.\n105. peanut — 42143 раза.\n106. bubbles — 42142 раза.\n107. asdasd — 42096 раз.\n108. qwert — 41948 раз.\n109. 1qaz2wsx — 41840 раз.\n110. pakistan — 41798 раз.\n111. 123qwe — 41602 раза.\n112. liverpool — 41272 раза.\n113. elizabeth — 41268 раз.\n114. harley — 41084 раза.\n115. chelsea — 40499 раз.\n116. familia — 39996 раз.\n117. yellow — 39726 раз.\n118. william — 39702 раза.\n119. george — 39270 раз.\n120. 7777777 — 39071 раз.\n121. loveme — 38797 раз.\n122. 123abc — 38501 раз.\n123. letmein — 38353 раза.\n124. oliver — 38269 раз.\n125. batman — 37973 раза.\n126. cheese — 37956 раз.\n127. banana — 37910 раз.\n128. testing — 37881 раз.\n129. secret — 37784 раза.\n130. angel — 37764 раза.\n131. friends — 37741 раз.\n132. jackson — 37731 раз.\n133. aaaaaa — 37568 раз.\n134. softball — 37556 раз.\n135. chicken — 37250 раз.\n136. lauren — 37151 раз.\n137. andrea — 36940 раз.\n138. welcome — 36723 раза.\n139. asdfgh — 36597 раз.\n140. robert — 35654 раза.\n141. orange — 35594 раза.\n142. Testing1 — 35389 раз.\n143. pokemon — 35293 раза.\n144. 555555 — 35128 раз.\n145. melissa — 35045 раз.\n146. morgan — 34829 раз.\n147. 123123123 — 34721 раз.\n148. qazwsx — 34436 раз.\n149. diamond — 34422 раза.\n150. brandon — 34227 раз.\n151. jesus — 34220 раз.\n152. mickey — 34180 раз.\n153. olivia — 34110 раз.\n154. changeme — 33940 раз.\n155. danielle — 33781 раз.\n156. victoria — 33770 раз.\n157. gabriel — 33679 раз.\n158. 123456a — 33562 раза.\n159. 0.00000000 — 33417 раз.\n160. loveyou — 33306 раз.\n161. hockey — 33091 раз.\n162. freedom — 33047 раз.\n163. azerty — 32881 раз.\n164. snoopy — 32792 раза.\n165. skinny — 32682 раза.\n166. myheritage — 32619 раз.\n167. qwerty1 — 32560 раз.\n168. 159753 — 32365 раз.\n169. forever — 32115 раз.\n170. iloveu — 32043 раза.\n171. killer — 31879 раз.\n172. joseph — 31852 раза.\n173. master — 31667 раз.\n174. mustang — 31619 раз.\n175. hellokitty — 31458 раз.\n176. school — 30905 раз.\n177. Password1 — 30871 раз.\n178. patrick — 30821 раз.\n179. blink182 — 30756 раз.\n180. tinkerbell — 30739 раз.\n181. rainbow — 30726 раз.\n182. nathan — 30489 раз.\n183. cooper — 30457 раз.\n184. onedirection — 30388 раз.\n185. alexander — 30078 раз.\n186. jordan23 — 29874 раза.\n187. lol123 — 29832 раза.\n188. jasper — 29813 раза.\n189. junior — 29502 раза.\n190. q1w2e3r4 — 29368 раз.\n191. 222222 — 29362 раза.\n192. 11111111 — 29291 раз.\n193. benjamin — 29288 раз.\n194. jonathan — 29279 раз.\n195. passw0rd — 29267 раз.\n196. 0123456789 — 29110 раз.\n197. a123456 — 29103 раза.\n198. samsung — 29073 раза.\n199. 123 — 29068 раз.\n200. love123 — 29064 раза.\nКак защититься?\nВыбирайте пароль правильно. Используйте чередование регистров, букв, цифр и символов. Избегайте слов и очевидных комбинаций клавиш. «passw0rd» — плохой пароль. «q1w2e3r4» тоже. «mOr0*enNo3» — неплохо, но не идеал. «Y-5$gjwT_3*7gBEt» — пример для подражания.\nИспользуйте разные пароли для разных аккаунтов. Нередки случаи, когда поставщики услуг допускали утечку (или намеренно сливали информацию). Если пароль к вашему аккаунту в соцсетях и электронной почте совпадает с паролем к давно заброшенной браузерной игрушке — не удивляйтесь хакерским атакам.\nИспользуйте менеджер паролей. Запомнить эти наборы символов почти нереально, а стикер на мониторе — явно не лучший вариант.\n\nМенеджеры есть почти во всех современных браузерах, некоторых антивирусах, кроме того, можно установить отдельную программу. В качестве бонуса многие менеджеры сами генерируют пароль, вам даже не придётся над этим задумываться. Кроме того, это неплохая защита от фишинговых сайтов.\nМенеджеры есть почти во всех современных браузерах, некоторых антивирусах, кроме того, можно установить отдельную программу. В качестве бонуса многие менеджеры сами генерируют пароль, вам даже не придётся над этим задумываться. Кроме того, это неплохая защита от фишинговых сайтов.\n\nСайт \nhaveibeenpawned.com\n поможет проверить, не засветился ли ваш e-mail в каких либо утечках информации. На этом же сайте можно \nпроверить\n, насколько часто используется какой-либо пароль.\nСамое главное — будьте предельно осторожны. Худший враг пользователя — сам пользователь. Практика показывает, что большая часть утечек связаны с человеческим фактором. Ввели пароль на постороннем сайте, установили приложение из непроверенного источника, открыли подозрительный файл из письма. И всё это вопреки предупреждениям защитных программ.\nМожете сравнить эту таблицу с \nтопом 2018 года\n. Подробнее о мерах по защите, менеджерах и генераторах паролей вы можете узнать в нашей статье «\nКак перестать использовать пароль «123456» и начать жить\n». А про то, что вообще происходит с учётными данными в интернете, можно почитать \nздесь\n.\nНе смешно? А здесь смешно: \n@ithumor\nБезопасность\nТакже рекомендуем:\nИгра от Google, в которой можно отточить свои хакерские навыки\n23 сайта для практики хакинга\nТоп книг по программированию, вышедших на русском языке в 2018 году\nНе вставляйте в консоль скопированный из Интернета код!",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/password_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/gifts-for-programmers/",
                "title": "Что подарить программисту, чтобы не облажаться",
                "created_date": "26 декабря 2019 в 17:31",
                "body": "Мы уже писали о том, \nчто не стоит дарить программисту\n. Но как говорится, «критикуешь — предлагай». Вот мы и предлагаем вам подборку подарков для программистов. А в конце расскажем, что посоветовали наши подписчики.\nПрежде чем переходить к конкретному списку подарков, подумайте вот о чём:\nТак ли уж человек вовлечён в IT-индустрию? Часто вы видели сварщиков в футболке с надписью «Сварной» или машину бухгалтера с наклейкой «Сальдо СОШЛОСЬ!»? Возможно, это просто работа, а хорошим подарком станет набор рыболовных блёсен или кораблик в бутылке.\nА он точно программист? Сторонние люди привыкли называть программистами всех, кто имеет отношение к компьютерной технике. Но есть куча IT-специальностей, не связанных с программированием напрямую, и системный администратор, к примеру, не слишком обрадуется книге «100 примеров на Java для продвинутых». Постарайтесь выяснить аспекты работы, расспросив коллег или самого человека.\nБеспроводная зарядка\nПровода — одна из самых бесячих вещей при работе с техникой — цепляются, неопрятно выглядят, ломаются, путаются. Поэтому чем больше беспроводных устройств — тем удобнее. Беспроводная зарядка — функциональный и достойный недорогой подарок. Главное убедиться, что смартфон получателя поддерживает эту функцию.\nКому подойдёт\n: владельцам смартфонов, поддерживающих беспроводную зарядку.\nПодписка на доставку готовой еды на неделю\nНе заморачиваться насчёт еды очень круто, потому что экономит время и силы. Поэтому, если получатель подарка не имеет каких-то ограничений в еде, этот подарок сделает его жизнь более комфортной и приятной. Тем более это отличный шанс попробовать такой сервис.\nТолько выясните предпочтения получателя: может, он вегетарианец и не ест мясо, а может ест не больше 1500 ккал. Учитывайте это при выборе меню.\nКому подойдёт\n: почти кому угодно.\nФитнес-браслет\nНекоторые \nэксперты предполагают\n, что трендом 2020 года будет Internet of Bodies — можно будет собирать и обрабатывать всё больше показателей нашего тела. Сейчас у каждого второго есть фитнес-браслет или умные часы, и неспроста — они удобны и полезны. Если у вашего получателя ещё нет ни одного из этих устройств, то они будут хорошим подарком. И довольно недорогим.\nСамые популярные варианты — Huawei Band 3 Pro или Xiaomi Mi Band 4.\nКому подойдёт\n: почти кому угодно.\nXiaomi Mi Band 4 можно купить тут\nУмный дом от Яндекс\nЯндекс.Станция и Яндекс.Станция Мини\nКак пишет сам Яндекс: «​Умная колонка с Алисой — находит и ставит музыку в хорошем качестве, советует кино, управляет умным домом и помогает в делах». С Алисой работает много устройств — чайники, лампочки, розетки, увлажнители. Это значит, что вы сможете управлять их работой голосом. Например, выключить свет не выбираясь из нагретой постели или включить чайник утром до того, как из этой кроватки придётся выбраться. Проблема Станции только в том, что сама по себе она не очень полезна. Она хороша как часть умного дома, а для него нужно докупить остальные элементы. Кроме того, велика опасность, что получателю умный дом вообще не интересен и не нужен.\nЯндекс.Станцию можно купить тут\nЯндекс.Станцию Мини можно купить тут\nКому подойдёт\n: любителям «умных» технологий.\nНесколько устройств, которые работают с Алисой (но хороши и сами по себе)\nЧайник\nХороший вариант — Redmond SkyKettle. Стильный, надёжный и с выбором температуры.\nКупить можно тут\nЛампа\nТут хороший выбор — Xiaomi Mi Smart LED Desk Lamp (White). Минималистичная и стильная, плюс можно выбрать температуру света — более холодный и белый для работы днём и тёплый жёлтый для вечернего времени и чтения.\nКупить можно тут\nУвлажнитель\nMust-have для комфортной работы, особенно зимой. Особенно если программист носит линзы. В российский квартирах/офисах зимой влажность опускается до 20 %, хотя нормой считается 40–60 %. Низкая влажность не только вызывает дискомфорт — больше сохнут слизистые — глаза, нос, губы — и кожа, но и повышает ваши шансы заболеть (особенно актуально для офисов). В общем, увлажнитель — это вклад и в здоровье, и в комфорт программиста. Совет: при вручении имеет смысл рассказать о том, зачем нужен этот подарок.\nМы пользуемся Xiaomi Smartmi Zhimi Air Humidifier 2, нам нравится.\nКупить можно тут\nArduino Kit\nArduino — это платформа для создания собственных автоматизированных устройств. Она включает как программные библиотеки, так и электронные платы. При желании и умении из неё можно сделать что угодно. Учтите, что одних навыков программирования для работы с Arduino недостаточно, потребуются знания в инженерии, схемотехнике, механике… Дальнейшее зависит только от полёта фантазии.\nЕсли человек никогда не имел дела с Arduino, ищите готовые наборы для сборки — так будет проще и интереснее.\nКому подойдёт\n: любителям экспериментов, тем, кто интересуется работой руками.\nКупить можно тут\nRaspberry Pi\nRaspberry Pi — настоящий компьютер размером с банковскую карту. Эту штуковину изначально разрабатывали для обучения основам информатики, но потом оказалось, что такому устройству можно найти куда больше применений. На основе этой платформы можно построить медиацентр, веб-сервер, даже собственное облачное хранилище.\nКому подойдёт\n: тем, кто хочет соорудить нестандартное устройство, но не желает возиться с припоем и канифолью. Raspberry Pi — полноценный компьютер и подключается к остальному оборудованию через стандартные разъёмы.\nГотовимся к Новому году: простая гирлянда на Arduino\ntproger.ru\nДоска для записей\nИдеальный инструмент для программистов (и не только). Спектр применения огромный — от визуализации потока мыслей до записей информации по текущему спринту в разработке. А если она в офисе, то можно ещё и оставлять записки коллегам или просто рисовать на ней. Берите максимально большую из возможных. Когда ничего не умещается — это угнетает.\nКому подойдёт\n: Тем, у кого есть постоянное рабочее место. Таскать эту штуку с собой не слишком удобно.\nКупить можно тут\nКружки и футболки\nПо сути это просто чистый холст для принта. И вот подбирать этот принт будет самой сложной задачей. Если вы плохо знакомы с тем, чем на самом деле занимается ваш друг, можете остановиться на оптимистичном и жизнерадостном «Hello, world!».\nКому подойдёт\n: тому, кто любит тематические штуки.\nКупить можно тут\nБонус: ступаем на опасную территорию\nСовсем недавно \nмы писали\n, что дарить программисту технику, связанную с его работой, очень опасно — можно легко ошибиться. Мы всё ещё считаем так же, поэтому подумайте очень хорошо, прежде чем выбирать один из этих подарков. \nМышь Logitech MX Master 3\nОдна из самых крутых и функциональных мышей из существующих. Ключевые фишки — может подключаться к трём устройствам сразу, держит заряд 70 дней, имеет кучу программируемых клавиш, а поверхность под большим пальцем понимает жесты. Но самое крутое, что она может перемещаться между экранами двух разных устройств без переподключения, так, будто это просто несколько мониторов одного компьютера. Только представьте: вы можете скопировать файл на одном устройстве, перенести мышку на другой экран и вставить его там. В общем, это надо видеть.\nНо предупреждаем ещё раз: очень хорошо подумайте, нужна ли получателю такая крутая мышка. Может, он пользуется самым простым устройством за 300 рублей и ничего другого ему не нужно.\nКупить можно тут\nНаушники: беспроводные и с шумоподавлением\nБеспроводные наушники — это прорыв в качестве жизни. Но тут важно не ошибиться в выборе, потому что плохие беспроводные наушники способны вывести из себя даже самого уравновешенного пользователя. Мы сами пользуемся Xiaomi Air Dots Pro 2, Honor FlyPods 2 и Apple AirPods.\nНаушники с шумоподавлением — ещё более рисковый подарок, но может быть очень полезным. Особенно если получатель подарка жалуется, что его часто дёргают и отвлекают и если ему нужна тишина для работы. Но такие наушники могут быть некомфортны человеку, так что подумайте десять раз перед покупкой.\nСоветы из комментариев\nВ нашей статье про антиподарки многие люди написали свои варианты того, что можно подарить программисту. Вот они:\n«Хороший шаманский бубен в хозяйстве всегда нужен», — Владимир Полухин.\n«Программистам очень часто не хватает гуманитарных знаний и, если хотите подарить книгу, то лучше обратить внимание в этой области. Например “История Мексиканской революции”, “Военное дело чукчей (середина XVII—начало XX в.)”, можно что-то из русской литературы, Успенского (всего) или Чернышевского. Вообще проводя все рабочее время за компьютером программисты ищут любую возможность не сидеть за компьютером, поэтому бумажные книги тут выигрывают», — Павел Кравцов.\n«Батарейки хорошие подарите. У меня на батарейках — мыши, клава, наушники, часы, уточка, куча техники. Батарейки летят только в путь! Еще вариант — сертификат на онлайн курсы, на английский, на алгоритмы или по основам IT. Провожу собесы, часто прогеры даже про паттерны ничего не знают», — Евгений Макаров.\n«Презерватив в рамке с подписью “В случае чуда — разбить стекло”», — Святослав Кудряшов.\n«Нужна любая антистресс-фигня, чтобы можно было ее помять, покидать, потрясти, пока размышляешь над ошибками в коде, читаешь, что там тебе понаписали на форумах программистов и разбираешь чужие коды. Шаманский бубен, например, тоже к этому относится. Любая подобная фигня надоедает уже через полгода активного “мяния”, потому новая фигня начнет использоваться уже сразу после получения подарка», — Наталья Абаимова.\n«Можно купить что вроде кубика Рубика. Но только если человек любит головоломки», — Жорик Белый.\n«Запас энергетиков чая или кофе. Ну или матрас, если в офисе спать где-нибудь. Мягкую подушку», — Николай Бормотов.\n«Подарите программисту подписку на продукты JetBrains. Штука нужная, а сам себе редко кто покупает. 🙂 Ещё можно сидушку мягкую под попу, если ещё нет (на алике 700 рублей стоит). Коленный стул (для ровной спины) тоже неплохо может зайти (6–8 тыс. руб.)», — Александр Мельничук.\nНе смешно? А здесь смешно: \n@ithumor\nArduino\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/iconfinder_CRISTMAS-11_2795700-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/experts/it-trends-2020/",
                "title": "IoT, информационная безопасность и облачные технологии — за чем ещё следить айтишнику в 2020 году?",
                "created_date": "23 декабря 2019 в 19:10",
                "body": "Айтишникам нужно следить за трендами, чтобы знать, в каких направлениях можно развиваться, что требуется работодателям, да и вообще быть в курсе происходящего в отрасли. Спрашиваем у экспертов, за чем стоит следить наступающем году.\nСергей Комаров\n, \nдиректор департамента информационных решений компании РДТЕХ\n\nМой топ-3 интересных тенденций и направлений развития отрасли в 2020 году выглядит следующим образом:\nНаиболее интересное направление, за развитием которого я бы рекомендовал наблюдать в 2020 году, — это так называемый «Интернет тел» (Internet of Bodies, IoB — по аналогии с Internet of Things, IoT), который представляет собой экосистему, состоящую из умных медицинских приборов, носимых гаджетов и программного обеспечения, использующего технологии искусственного интеллекта.\nНа втором месте — технологии 3D-биопринтинга, т. е. применение 3D-печати в медицине. На сегодняшний день уже многого удалось достичь: успешно «печатаются» органы из костной и хрящевой тканей, а их пересадка не вызывает отторжения, т. к. в их «материале» используются стволовые клетки пациента. Не за горами и то время, когда уйдут в прошлое очереди пациентов, ожидающих пересадки органов.\nНу и третье место занимает стандартизация блокчейна, которая ожидается в течение 2020 года. Не секрет, что отсутствие международных стандартов в этой области существенно тормозит развитие технологии, препятствует её применению в проектах как для государственных, так и для коммерческих заказчиков.\n7\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n7\nПовысить\nПонизить\nЕвгений Черток\n, \nИТ-директор компании «Рексофт»\nСейчас достаточно много технологий, которые уже меняют мир вокруг нас. Все они являются частью единой цепи, которую можно представить следующим образом: Интернет вещей → Большие данные → Машинное обучение → Информационная безопасность.\nПо прогнозам Cisco, к 2020 году к IoT подключится 50 млрд устройств: у каждого жителя планеты будет шесть «умных» гаджетов. Во многом текущие внедрения уже влияют на нашу жизнь, хотя порой люди их не замечают и принимают как должное. На мой взгляд, в следующем году следует внимательно следить за войной протоколов для IoT, которые пока не имеют единого стандарта. Крупные производители будут лоббировать собственные проприетарные протоколы, но также будут активно развиваться и открытые протоколы, доступные всему IT-сообществу.\nДанные, которые генерируются массивом IoT, составляют лишь часть задач для технологий, попадающих в класс «Больших данных». Но сами по себе данные не дают добавленной стоимости. Для их обработки применяются технологии машинного обучения, искусственного интеллекта, нейросети и т. д. Отдельное направление в этой сфере — монетизация данных, которая вызовет взрывной спрос как на новый инструментарий в этой области, так и на специалистов по работе с ним. Также важен пласт телекоммуникационной и серверной инфраструктуры для передачи, хранения, обработки, онлайн аналитики больших массивов неструктурированных данных. Под все эти задачи уже создано и предлагается специально заточенное «железо», в том числе серверы с многопоточной обработкой за счёт тысяч процессорных ядер и дополнительных аппаратных ускорителей, работающих с нейросетями.\nВместе с ростом обозначенных технологий ключевую роль будут играть вопросы информационной безопасности. Пока мы находимся в потоке данных, которые становятся известны о нас практически в круглосуточном режиме. Правила игры ещё до конца не определены. Мы практически каждый день читаем об утечках данных из банков, социальных сетей, передаче данных через антивирусы и Smart-TV. Однозначно, что со временем проблема передачи данных будет урегулирована и поставлена в законодательные рамки, но уже сейчас вопросы информационной безопасности и защиты частной жизни выходят на самый передний край информационных технологий.\nИ отдельным пунктом прогноза обращу ваше внимание на технологии микроплатежей. Мир постепенно движется к новой модели потребления и оплаты сервисов. На мой взгляд, во все приложения и сервисы будут встроены весьма небольшие микроплатежи, каждый из которых невесом для бюджета конкретного пользователя, однако в массе своей они составят основу денежных потоков для мировых корпораций, тем более что тема микротранзакций отлично коррелирует со сферой IoT и вопросами информационной безопасности. \n11\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nАлексей Максимов\n, \nтехнический директор IT-компании MediaSoft\nРазработчику в первую очередь необходимо следить за тем, чего требует рынок, то есть за наиболее востребованными технологиями и языками программирования.\nВ плане популярности языков программирования глобальных изменений в 2020 году, на мой взгляд, произойти не должно, всё останется примерно так же, как в 2019. Если вы только начинаете свою карьеру в разработке или хотите изучить что-то новое, то спокойно можете ориентироваться на рейтинг популярности ЯП от Google, GitHub или StackOverflow и точно не прогадаете.\nПо-прежнему будет популярен и востребован JavaScript во всех его проявлениях, но ещё большую популярность, скорее всего, приобретёт GraphQL, и если вы ещё не пробовали применять его в своих проектах, то самое время это сделать.\nС точки зрения разработки бэкенда по-прежнему популярными останутся Go, Python, Java и PHP — на них реализовано большое количество проектов, которые постоянно развиваются и требуют поддержки (и, соответственно, разработчиков), так что свою актуальность они не потеряют ещё долго.\nВ разработке мобильных приложений революции также не ожидается, но достаточно востребованным станет Flutter, так что советую его как минимум попробовать.\n20\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n20\nПовысить\nПонизить\nАртур Хусаинов\n, \n.Net-разработчик ГК InnoSTage\n2020 год обещает множество крупных релизов и трендов для мирового сообщества .NET-разработчиков. И я хотел бы выделить некоторые из них. Один из самых ожидаемых и крупных релизов — платформа .NET 5. Эта платформа — дальнейший шаг для NET.Core, она объединит всё значимое, что представляла среда .NET-разработки: разработка кроссплатформенных десктопных приложений, мобильных приложений с Xamarin, игровых проектов на движке Unity, а также многое другое. .NET 5 — новая ветвь в сфере технологий.\nМашинное обучение — тренд этого и следующего года. Разработка искусственного интеллекта и машинное обучение стало гораздо приятнее с технологией ML.NET. В июле 2019-го была анонсирована новая версия ML.NET 1.2, в которую включен пакет сценариев TimeSeries для решения таких проблем, как обнаружение аномалий и создание прогнозов продаж. В будущем году ожидаются обновления в данной технологии.\nЕщё один не менее важный проект — это платформа Blazor. Эксперименты над технологией Blazor — недавним прототипом, а ныне почти готовым клиентским фреймворком веб-интерфейса на основе .NET и WebAssembly — пока ведутся, но уже находятся на финишной прямой. И релиз этой технологии профессиональное сообщество также ждёт в будущем году. Фреймворк позволит при создании клиентских приложений использовать C#, а не JavaScript, сохранять единую логику приложений для сервера и клиента, а также отображать пользовательский интерфейс в виде HTML-страницы с CSS для широкой поддержки браузеров, в том числе для мобильных устройств. \n14\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n14\nПовысить\nПонизить\nКонстантин Савчук\n, \nуправляющий партнер компании Constanta\nИсследовательское агентство Gartner в 2019 году спрогнозировало рост глобальных расходов на ИТ на 0,6 %. Рост российского ИТ-рынка в 2019 году по разным оценкам ожидается на 3–5 %. Положительная динамика на российском ИТ-рынке обеспечивается в том числе за счёт государственной поддержки. В рамках Национальной программы «Цифровая экономика Российской Федерации» на развитие «цифровой экономики» до 2024 года будет инвестировано более 1,6 трлн рублей, включая бюджетные и внебюджетные источники финансирования. Основным направлением по объёмам финансирования является федеральный проект «Информационная инфраструктура». В связи с этим российскому ИТ-шнику с особым вниманием стоит следить за технологиями на рынке IoT и облачной инфраструктуры. В 2020 году драйверами рынка IoT выступят распространение технологии 5G c одновременным увеличением количества умных устройств. Чтобы объединить все эти разрозненные устройства в единую функционирующую систему, требуются сильные специалисты в области IoT.\nВ результате генерации огромного объёма данных возникает потребность в развитии облачных технологий для обеспечения хранения и обработки информации. Для анализа поступающих данных используются технологии Big Data, которые позволяют превращать неструктурированную информацию в полезный инструмент для принятия решений. Специалист по Big Data должен одновременно совмещать навыки разработчика, математика и бизнес-аналитика — всё это позволяет оценивать проекты и с точки зрения практического применения Big Data, и с точки зрения технической реализации. Востребованными становятся эксперты по облачным инфраструктурам, которые отвечают за проектирование, интеграцию и поддержку виртуальной инфраструктуры данных. Для решения задач хранения и обработки данных требуются навыки специалиста в Data Engineering.\nОдновременно с ростом ценности данных в IoT растут и требования к информационной безопасности. Среди основных направлений ИБ выделяют защиту устройств и поддержание безопасности удаленной связи посредством использования проверок подлинности, шифрования и других способов обеспечения сохранности данных. Помимо данных для кибер-атак уязвимыми являются сами IoT-устройства, которые могут быть выведены из строя. Особо чувствительной к кибер-атакам является сфера IIoT, когда выход из строя одного устройства может привести к нарушению устойчивости всего производственного процесса. Таким образом, в новой развивающейся цифровой сфере особо привлекательны становятся специалисты по информационной безопасности и кибербезопасности. Конкуренция со стороны работодателей за качественных специалистов будет только нарастать.\n6\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\n \n\nРейтинг полезности ответа: \n6\nПовысить\nПонизить\nВадим Юн\n, \nгенеральный директор компании Crayon в России\nВ 2020 году мы ожидаем появления ещё большего количества решений для умного дома, ориентированных на массового пользователя. Очевидно, что отдельные IoT-устройства в меньшей степени интересны для конечного потребителя, чем экосистемы. Именно комплексные решения для умного дома получат широкое распространение в ближайшем будущем. Если сейчас IoT-устройства, существующие на рынке, способны лишь реагировать на запрос пользователя, то в скором времени будут появляться экосистемы с проактивными помощниками, способные не только распознавать речь, но и понимать интонации, эмоции, настроение пользователя, учитывать действия, которые человек производит в текущий момент и будущие события, запланированные в его календаре. Известно, что сейчас компании, в том числе российские, готовят к выпуску подобные решения для умного дома.\nПоскольку умный дом собирает огромное количество информации о его владельцах, больше внимания будет уделяться безопасности. К тому времени, как решения в области IoT станут массовыми, появятся специализированные digital-юристы, которые будут обеспечивать безопасность «цифровой личности» пользователей на законодательном уровне.\n3\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nНина Бурминская\n, \nинженер-программист 2 категории компании ICL Services\nПо последним новостным публикациям в сфере IT, аналитики не ожидают появления каких-то прорывных технологий в области высоких технологий (как когда-то поразил всех выход Искусственного Интеллекта (ИИ) на кардинально другой уровень или изобретение нового подхода программирования и т. д.). В сфере нашей работы могу выделить несколько тенденций за которыми буду следить в 2020 году, чтобы не упустить важные новшества:\nРазвитие ИИ, в частности как виртуального помощника, чат-бота. Чат-боты — это очень востребованная услуга и, по моему мнению, она будет только развиваться. Чат-боты уже сейчас прекрасно выполняют функции первой линии поддержки и уменьшают затраты многим компаниям.\nДальнейшее развитие мобильных технологий, но, как мне кажется, дальше банального «upgrade» отрасль не пойдет (больше камер, больше оперативки, оптимизация). Но следить за этим рынком, неоспоримо, стоит и после 2020 года. Мобильные технологии всё больше захватывают рынок потребителей и останавливаться не собираются.\nОбласть интернета вещей (IoT) тоже кажется весьма многообещающей. По данным статистических порталов технология IoT уже захватила примерно 90 % электронных устройств и сделала нашу жизнь немного удобнее. Я думаю, в 2020 эта тенденция продолжится и ускорится.\nСоздание и развитие новых IT-специальностей, например таких как DevOps. Уже сейчас виден сильный разрыв между программистами и специалистами технической поддержки, для ликвидации которого необходим человек, умело совмещающий и знающий обе области.\nТакже необходимо следить за рынком облачных решений (как пример Azure, Amazon Web Services), которые развиваются буквально каждый день, предлагая новые услуги и технологии. Отсюда также будет появляться всё более насущная нехватка в специалистах по информационной безопасности в сфере облачных технологий. В нашей стране, насколько мне известно, таких специалистов пока не выпускают.\nПродолжится массовый переход услуг/приложений на платный доступ по подписке, что, конечно, печально и уныло.\nТехнологии создания виртуальной реальности (VR) тоже просто обязаны выйти на качественно новый уровень. Это прежде всего касается игр, но далее данную технологию уже можно будет использовать и в повседневной жизни.\nОжидается повсеместное внедрение Agile-подхода во всех сферах, где это возможно. Таким образом ориентация бизнеса будет всё более направлена в сторону клиента и никак иначе.\nСуммируя всё вышеперечисленное, IT-специалистам, не знакомым с облачными и мобильными решениями, в 2020 году следует, по моему мнению, не просто задуматься о переквалификации в эту сферу, но и действовать, чтобы преуспеть и «успеть за поездом».\nБизнесу для внедрения новых технологий необходима гарантия «непрерывности» сервиса, поэтому очень перспективным кажется развитие информационной безопасности в различных областях IT.\nВ целом, хочется отметить, что различные компании абсолютно разной величины всё больше и больше будут внедрять информационные технологии в свои процессы, и в 2020 это станет всё более заметным.\n17\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n17\nПовысить\nПонизить\nНикита Жигалов\n, \nруководитель отдела развития продуктов Macroscop\nСегодня мы столкнулись с парадоксальной ситуацией: чтобы максимально обезопасить данные, специалистам нужно следить не за развитием технологий, а за совершенствованием социальной инженерии. Другими словами, даже самые современные технологии — ничто, если не предусмотрена банальная «защита от дурака». За примерами далеко ходить не нужно. Совсем недавно в СМИ писали о крупнейшей российской корпорации, зафаерволлившей любой канал доступа к персональным данным своих клиентов. Один хакер безуспешно пытался обойти высокотехнологичную защиту компании. А под конец решился и пришёл прямиком в офис. Он представился техническим специалистом-айтишником – охранник пропустил хакера через все биометрические замки и преграды. Хакер без проблем зашёл в серверную – дверь оказалась открытой! Недолго думая, оп вынес из офиса сервер с нужными ему данными. Причём, охранник беспрепятственно позволил это сделать!\nКогда вы читаете очередную новость об утечке данных, в 99,9% случаев речь идёт о самом человеке. Кто-то позволил, кто-то недоглядел, кто-то присел кому-то на уши. Вы можете с ног до головы обмазаться касперскими, протоколами и шифрованиями, но когда к охраннику придёт уверенный жулик, он добьётся своего.\nВ итоге важнее становятся не технологии, а инструкции работы с этими технологиями. Ещё один пример. Каждую неделю к нам в техподдержку софта обращается разгневанный пользователь, утверждающий, что тот или иной модуль не работает. И каждую неделю выясняется, что всё работает, а этот пользователь просто не читает мануалы. Человека нужно защищать от человека. Выходит, и развитие всей отрасли будет зависеть от банального человеческого понимания.\n30\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n30\nПовысить\nПонизить\nРуслан Титов\n, \nтехнический архитектор бизнес-приложений «1С» компании «ГЭНДАЛЬФ» \nНа мой взгляд, тенденции развития IT в наступающем году особо не изменятся, но при этом будут развиваться лавинообразно.\nВо-первых, \nтренд на цифровизацию и автоматизацию\n — его причины заключаются в повышении конкуренции на рынке (во многом за счёт импортозамещения). Компаниям всё чаще требуются люди, которые могут спроектировать и выстроить систему, максимально эффективно помогающую управлять ресурсами организации. В 2020 году такая потребность лишь возрастет.\nЕщё один тренд \n— облачные решения\n. С развитием технологий телекоммуникаций появились новые возможности управления организацией — как говорится, здесь и сейчас, а не «через час, когда выгрузится XML». Это означает, что в 2020 году будет крайне востребованы специалисты со знанием облачных инфраструктур, Linux, PostgresSQL, Kubernetes и т. д. За этим тоже стоит следить и активно развиваться в этом направлении.\nОтмечу \nтренд на автоматизацию управления оборудованием на промышленных предприятиях и сбор данных с него\n — такой вывод я могу сделать из собственного опыта работы в этом году. К нам всё чаще обращаются с запросом на автоматизацию учёта с возможностью получения данных с АСУТП или иных источников технико-экономических показателей. И думаю, число подобных запросов будет только увеличиваться, а сама сфера — очень динамично развиваться.\nВ дополнение к одному из пунктов выше также скажу о тренде на сбор и анализ BI (Business intelligence). Он набирает обороты в связи с развитием облачных корпоративных инфраструктур.\nТаким образом, потребность в IT-специалистах разных направлений в 2020 году будет только возрастать. А это означает повышение конкуренции на рынке труда и, как следствие, повышение требований к знаниям IT-специалистов. Так что актуальные тенденции нужно не только отслеживать, но и опережать их, развивая собственные профессиональные навыки по разным направлениям.\n10\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n10\nПовысить\nПонизить\nПетр Урваев\n, \nруководитель технологических решений SimbirSoft\nВ 2019 происходила кардинальная модернизация IT-систем в ритейле, финтехе, медицине, появлялись новые сервисы в страховании и других отраслях. Мы видим, что бизнес стал внимательнее к пользовательскому опыту (UX) и трендовым технологиям. Громоздкие архитектуры уходят в прошлое. Крупные компании тщательно планируют свою IT-инфраструктуру, создают единые информационные экосистемы. Если говорить о наиболее перспективных направлениях 2020 года, то двигателями IT, скорее всего, будут мобильные решения, искусственный интеллект, скоринг, системы прогнозирования на основе Machine Learning, которые востребованы уже практически во всех сферах бизнеса.\n1\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n1\nПовысить\nПонизить\nДанис Тазетдинов\n, \nChief Software Engineer в EPAM\nВ последнее время гаджеты, приложения и сервисы всё больше участвуют в повседневной жизни человека. Это, в свою очередь, приводит к тому, что всё больше личных данных управляются этими приложениями и сервисами. И наиболее важным трендом сейчас является защита этих данных. Как показывает опыт, даже у больших компаний есть серьёзные проблемы с тем, чтобы обеспечить адекватную безопасность данных пользователей. Учитывая, что смартфон и планшет для человека практически полностью заменили настольный компьютер, больше внимания нужно уделять защите и безопасности мобильных приложений.\n\nТенденция использовать E2E-шифрование (когда даже компания-разработчик не может расшифровать данные пользователя) сейчас заметна уже не только в мессенджерах. Сейчас это используется и в облачных файловых хранилищах, системах резервных копий и т. д.\nРадует, что пока квантовые компьютеры не достигли уровня, на котором современные алгоритмы шифрования станут бесполезными. Но это уже вопрос времени (причём не такого далёкого). Так что вновь становится актуальной задача разработки (и, что более важно, доказательства) надёжных алгоритмов шифрования.\nЗащита и повышение надёжности приложений всегда были в тренде. Сейчас же будут актуальны даже новые способы построения интерфейса пользователя, такие как SwiftUI и Jetpack Compose, поскольку эти решения позволяют уменьшить количество ошибок, а следовательно, сделать приложение надёжнее. В 2020 году эти технологии будут активнее использоваться.\nНу а если отвлечься от фундаментальных вопросов, можно, например, обратить внимание, что первоначальный вау-эффект, который вызвали приложения вроде Pokémon Go, постепенно проходит, и «дополненная реальность» становится обыденной. Примерка мебели или одежды, гиды в музеях и навигация в аэропортах уже здесь. Осталось лишь дождаться более подходящих устройств, чтобы эти приложения стали уже повседневной жизнью. Опыт Google Glass и Magic Leap One показал, что это не так просто сделать. Но движение в этом направлении явно есть. Все крупные вендоры работают над решениями в этой области. Не исключено, что в 2020 году мы увидим очередные попытки выйти на рынок потребительских устройств.\nТак что прикладным разработчикам есть смысл смотреть в сторону сближения бизнес-приложений и игр. Не помешает освежить свои знания в тригонометрии, а также изучить фреймворки, которые существенно облегчат жизнь разработчиков — в iOS это ARKit и SceneKit.\nА ещё всё чаще слышна мысль как от пользователей, так и от производителей устройств, что не нужно использовать гаджеты весь день. Мобильные операционные системы подстегивают пользователей меньше проводить времени за экраном. Для разработчиков это означает, что их приложения должны чётко выполнять свои функции и требовать как можно меньше внимания пользователя.\n\nЕсли подытожить, то для пользователей год будет интересным — даже если не появятся хорошие AR-очки, то уж точно в новых телефонах камеры станут лучше, процессоры быстрее, а 5G сети более распространёнными. Разработчикам же стоит быть внимательнее к пользователям, защищать их данные и не требовать лишнего внимания.\n14\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\n \n\nРейтинг полезности ответа: \n14\nПовысить\nПонизить\nДмитрий Рогов\n, \nдиректор по технологическому развитию ИТ-компании «АйДи – Технологии управления»\nВ фокусе ИТ-специалиста в 2020 году должны находиться все аспекты и науки, связанные с большими данными (сбор, анализ, хранение и т. д.), нейросетями. Много внимания необходимо уделять квантовым вычислениям. Ведущие ИТ-компании уже сегодня активно развивают это направления, используя абстрактные модели квантового процессора, для которых создаются прототипы языков программирования.\nВполне вероятно, что в 2020 году может произойти переход фазы развития квантовых вычислений от прототипирования к начальным этапам прикладной разработки, тогда рынку понадобятся программисты, способные решать эту задачу.\nMicrosoft, Google, IBM — эти компании совершенно точно разрабатывают свои прототипы языков программирования для квантовых компьютеров, и пусть это пока что остается на уровне НИОКР, как только технологический прорыв в создании квантовых процессоров произойдет, сообщество оперативно отреагирует принятием первых стандартов в области квантовых языков. Возможно, это будет некий гибрид существующих разработок, возможно «победит» какой-то из языков ИТ-гигантов.\nТочный сценарий сегодня предсказать трудно, но внимательно следить за квантовыми вычислениями нужно однозначно. \n2\nОтвет эксперта\n2019-12-23T19:10:37+03:00\n\nРейтинг полезности ответа: \n2\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, за чем айтишнику следить в 2020 году?\nЭксперты отметили следующие тренды и направления:\nинформационная безопасность;\nинтернет вещей;\nBig Data;\nтренд на цифровизацию и автоматизацию;\nоблачные технологии;\nAR- и VR-приложения;\nмашинное обучение;\nстандартизация блокчейна;\nприменение 3D-печати в медицине.\n100500\nЛучший ответ\n2019-12-23T19:10:37+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nBig Data\n, \nБезопасность\n, \nМашинное обучение\nТакже рекомендуем:\nИзучаем нейронные сети: с чего начать\nВ данной статье собраны материалы — в основном русскоязычные — для базового изучения искусственных нейронных сетей. \nИгра от Google, в которой можно отточить свои хакерские навыки\nИзучаем нейронные сети за четыре шага\nТоп книг по программированию, вышедших на русском языке в 2018 году",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/2020trends-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/12/rdtex_Komarov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/89124_8cff701d_rFXBOwdk_1576583941-e1576853014837-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/45000_553a8809_Ab7vDV7X_1576572984-e1576853112907-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/87615_01db1b98_LwZ67JbI_1577085991-e1577182549805-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/DSC08493-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Vadim-Jun_Crayon_2-e1576314959635-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/03/512_16afb162_6r30kPD3_1551868195-e1553620177778-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/17-1-e1576933813498-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/Titov-Ruslan-e1566837673488-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/1iTn0ir0fBY-e1573477470375-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Danis-Tazetdinov-e1576951502435-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/08/D.Rogov-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/quiz/cpp-20-kaspersky-lab/",
                "title": "Вы готовы к C++20? Тест для серьёзных программистов от Tproger и «Лаборатории Касперского»",
                "created_date": "23 декабря 2019 в 15:43",
                "body": "C++ уже более двадцати лет. Тем не менее его до сих пор учат в вузах, на нём повсеместно программируют, в том числе пишут операционные системы и программное обеспечение. А Бьёрн Страуструп стабильно выкатывает новый стандарт каждые три года, и в следующем году мы ждём C++ 20. Вместе с «Лабораторией Касперского» мы предлагаем проверить, насколько вы готовы к новому стандарту, и порешать заковыристые задачки.\nМежду теми, кто наберёт 8–10 баллов, мы разыграем классные призы в соответствии с \nусловиями конкурса\n.\nВ результатах просто для веселья вы узнаете, какой вы язык программирования — из тех, что поддерживают ООП. Новых там нет, не удивляйтесь 🙂 Поехали?\n\n\n\n\n\n\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Скоро загрузится, клянусь своей IDE!';\r\n        }, 5 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Ещё совсем немножко, прям милипусенько...';\r\n        }, 10 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Викторина загружается дольше, чем обычно: попробуйте потанцевать с бубном — отключить AdBlock и перезагрузить страницу :(';\r\n        }, 20 * 1000);\r\n    \n\n\n\nНачать тест\n\n\n\n\r\n        var quiz_data_stringify = \"\";\r\n        var quiz_data = JSON.parse(window.atob(quiz_data_stringify));\r\n        var quiz_template = decodeURIComponent(escape(window.atob('PCVxdWl6LnF1ZXN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHF1ZXN0aW9uLCBpLCBhcnIpIHslPgoKPGRpdiBjbGFzcz0icXVpel9pdGVtIiBpZD0icXVpel9pdGVtXzwlPXF1ZXN0aW9uLmlkJT4iIGRhdGEtbnVtPSI8JT1pJT4iIGRhdGEtaWQ9IjwlPXF1ZXN0aW9uLmlkJT4iPgoKICAgIDxkaXYgY2xhc3M9InF1ZXN0aW9uIj4KICAgICAgICA8JT1xdWVzdGlvbi50ZXh0JT4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImFuc3dlcnMiPgogICAgICAgIDwlcXVlc3Rpb24uYW5zd2Vycy5mb3JFYWNoKGZ1bmN0aW9uKGFuc3dlciwgbnVtLCBhcnIpIHslPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhbnN3ZXIiIGRhdGEtbnVtPSI8JT1udW0lPiIgZGF0YS1pZD0iPCU9YW5zd2VyLm9wdGlvbnMuaWQlPiI+CgogICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9Imljb24iIGNsYXNzPSJxdWl6X2ljb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InF1aXpfY29udHJvbCBhbnN3ZXJfPCU9cXVlc3Rpb24udHlwZSU+Ij5PPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnRlbGxvLWljb24iIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48L3NwYW4+CiAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFuc3dlcl90ZXh0IiBkYXRhLXJvbGU9ImFuc3dlcl90ZXh0Ij4KICAgICAgICAgICAgICAgIDwlPSBhbnN3ZXIub3B0aW9ucy50ZXh0ICU+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3IiPjwlPSBhbnN3ZXIub3B0aW9ucy5kZXNjciAlPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9InBlcmNlbnQiIGNsYXNzPSJwZXJjZW50Ij48c3BhbiBjbGFzcz0iaWNvbi1jaGFydC1iYXIiPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICA8JT1hbnN3ZXIucGVyY2VudCAlPiU8L3NwYW4+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8JX0pOyU+CgogICAgPC9kaXY+CgogICAgPGJ1dHRvbiBjbGFzcz0icXVpel9idXR0b24iIGRhdGEtcm9sZT0ibmV4dCIgZGF0YS1jdXJyZW50PSI8JT1pJT4iIGRhdGEtbmV4dD0iPCU9KGkrMSklPiI+0JTQsNC70YzRiNC1PC9idXR0b24+Cgo8L2Rpdj4KPCV9KTslPgoKCjwvZGl2Pgo=')));\r\n        var quiz_result_template = decodeURIComponent(escape(window.atob('')));\r\n        if (quiz_data.code_mode) {\r\n            var head = document.head || document.getElementsByTagName('head')[0];\r\n            var script = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.defer = true;\r\n            script.src = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.js?x84192';\r\n            head.appendChild(script);\r\n            link = document.createElement('link');\r\n            link.rel = 'stylesheet';\r\n            link.type = 'text/css';\r\n            link.href = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.css?x84192';\r\n            head.appendChild(link);\r\n        }\r\n    \n\n\n\n\nC++\n, \nПартнёрский материал",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Oblozhka-S-miniArtboard-1-880x308.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/books/books-to-gift-to-a-programmer/",
                "title": "Книги, которые можно подарить любому программисту — подборка от СЕО Tproger",
                "created_date": "23 декабря 2019 в 14:20",
                "body": "Когда мы писали статьи по \nлучшим\n и \nхудшим\n подаркам программисту, мы попросили директора Tproger посоветовать книги, которые он бы рекомендовал прочитать любому айтишнику. Он прислал нам список с краткими комментариями (они написаны на сером фоне). Делимся с вами.\nАлексей, генеральный директор Tproger\n \n«Алгоритмы: построение и анализ», Кормен Томас Х., Лейзерсон Чарльз И.\nКупить\n \nНастольная энциклопедия, дорогая, толстая, считается классикой.\nВ книге Алгоритмы: построение и анализ описаны самые разнообразные алгоритмы, сочетается широкий диапазон тем с глубиной и полнотой изложения; при этом изложение доступно для читателей самого разного уровня подготовки. Каждая глава книги относительно самодостаточна и может использоваться в качестве отдельной темы для изучения. Алгоритмы описаны простым человеческим языком и с применением псевдокода, который понятен любому, кто хоть в небольшой степени знаком с программированием, а пояснения принципов их работы даны без излишней математической строгости и требуют лишь элементарных знаний.\n«Algorithmic Puzzles», Anany V. Levitin, Maria Levitin\nКупить\n \nДля подготовки к собеседованиям, просто разминки ума.\nWhile many think of algorithms as specific to computer science, at its core algorithmic thinking is defined by the use of analytical logic to solve problems. This logic extends far beyond the realm of computer science and into the wide and entertaining world of puzzles. In \nAlgorithmic Puzzles\n, Anany and Maria Levitin use many classic brainteasers as well as newer examples from job interviews with major corporations to show readers how to apply analytical thinking to solve puzzles requiring well-defined procedures.\n«Как пасти котов. Наставление для программистов, руководящих другими программистами», Дж. Ханк Рейнвотер\nКупить\n \nДля тех, кому интересно стать тим-лидом, руководителем или лучше понимать, что от него хотят руководители и быстрее продвигаться в карьере.\n«Как пасти котов» – это книга о лидерстве и руководстве, о том, как первое совмещать со вторым. Это, если хотите, словарь трудных случаев управления IT-проектами. Программист подобен кошке, которая гуляет сама по себе. Так уж исторически сложилось. Именно поэтому так непросто быть руководителем команды программистов. Даже если вы еще месяц назад были блестящим и дисциплинированным программистом и вдруг оказались в роли менеджера, вряд ли вы знаете, с чего надо начать, какой выбрать стиль руководства, как нанимать и увольнять сотрудников, проводить совещания, добиваться своевременного выполнения задач. В таком случае без этой книги вам не обойтись. А может быть, вы – опытный менеджер, желающий пересмотреть свои принципы лидерства? Тогда, опять же, эта книга для вас. Вне зависимости от возраста, пола и социального статуса, она поможет вам укрепить свои позиции в роли лидера программистов. Материал изложен довольно компактно и легко укладывается в голове. Стоя в книжном магазине и раздумывая, что же купить, задайте себе один простой вопрос: «Нужно ли мне совершенствовать свои лидерские навыки?» Полагаю, вы ответите: «Да», – а значит, данная книга окажется для вас небесполезной.\n«Scrum. Революционный метод управления проектами», Джефф Сазерленд\nКупить\n \nЕсли хотите наконец-то \nнормально \nразобраться, что же такое Scrum и Agile, поднять свою продуктивность не только в программировании, но и в любых делах по жизни.\nМетодика Scrum — решение, найденное Джеффом Сазерлендом, чтобы преодолеть классические недостатки управления проектами: отсутствие слаженной работы внутри команды, невыполнение намеченных планов, дублирование задач внутри подразделений и т. д. В отличие от старого «поэтапного» подхода, при котором выбрасываются на ветер огромные средства и который зачастую так ни к чему не приводит, Scrum позволяет выполнять обязательства меньшими силами, в короткие сроки и с низкими затратами, а итоговый продукт отличается отменным качеством. Сегодня Scrum уже прочно закрепилась в управленческом арсенале большинства технологичных компаний мира. Теперь этот инструмент повышения продуктивности доступен и вам.\n«Стартап на миллиард», Вячеслав Макович и Максим Спиридонов\nКупить\n \nДля тех, кто мечтает запустить свой стартап. Книга либо даст вам детальный план, либо поможет понять, что всё сложнее, чем вы думали, и просто идеи недостаточно.\nФормулы успеха в бизнесе не существует. Однако есть успешный опыт, который вполне можно использовать для запуска своего дела. Книга Максима Спиридонова и Вячеслава Маковича – это сочетание опыта, изучения успешных стартап-проектов и прогнозирования того, какие идеи будут наиболее перспективными в ближайшем будущем.\nВ книге «Стартап на миллиард» вы найдете ответы на главные вопросы: каковы задачи основателя стартапа, как собрать команду, как найти бизнес-идею и оценить ее, как понять конкурентов, избежать ошибок на старте, выстроить работу над вашим продуктом и сделать стартап по-настоящему успешным.\nАвторы доступно и понятно объясняют основные механики запуска и развития современного стартап-проекта. Притом неважно, в какой именно сфере вы работаете. Советы и рекомендации будут актуальны, ведь охватывают все сферы бизнеса.\nА есть ли у вас личный топ книг? Пишите в комментариях.\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/iconfinder-icon-2-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2015/03/NyjQoyroZP8-e1465409559781-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/mn02_120719_3d_p1-201x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/106402511-186x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/6411503-11-210x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/1.00x-thumb1-199x280.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/47451010-maksim-spiridonov-startap-na-milliard1-191x280.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/worst-presents-for-programmer/",
                "title": "Не дарите это айтишнику! Топ-5 антиподарков для программистов",
                "created_date": "22 декабря 2019 в 19:11",
                "body": "Интернет пестрит статьями «Что подарить программисту», которые вроде как должны помочь порадовать человека, но по факту эти статьи чаще напоминают вредные советы. Мы от лица всех программистов решили рассказать, что не стоит дарить айтишникам, если вы сами не в теме.\nПересылайте эту статью своим далёким от IT друзьям. Давайте избавим программистов от необходимости натянуто улыбаться и чувствовать себя неловко, получая очередной пылесос для клавиатуры или USB-лампочку с Алиэкспресса.\nСложная техника: мыши, клавиатуры, ноутбуки и т. д.\nКазалось бы, что может быть более очевидного, чем подарить программисту новую клавиатуру или мышь? А то и целый ноутбук. Но подумайте вот о чём: стали бы вы дарить смычок скрипачу? Мышка, клавиатура, ноутбук — это рабочие инструменты айтишника, к выбору которых обычно подходят очень обстоятельно и изучив не один вариант.\nВывод\n: не берите, если не в теме.\nUSB-штуковины\nПрикольные штуки, которые ломаются через месяц и абсолютно бесполезны — пылесосы для клавиатуры, мини-вентиляторы, подставки для чашек с подогревом — вариантов масса. Да, возможно, именно ваш конкретный программист очень полюбит эту подставку для чашки, но чаще всего эти мелочи будут лежать мёртвым грузом. Единственная вещь, которая может ещё хоть как-то пригодиться — USB-увлажнитель. Но как правило лучше потратить чуть больше и купить более качественный вариант.\nВывод\n: берите, только если на 100 % уверены, что человек будет этим пользоваться. Но и тогда лучше поискать более полноценные решения.\nКниги по программированию\nЭто мало того что специфическая вещь, так ещё и чаще всего ненужная. У книг по программированию есть целый ряд недостатков. Для начала мало какой программист пойдёт учиться чему-то или искать решение конкретной проблемы в книге, скорее уж он погуглит или задаст вопрос на StackOverflow. Кроме того, книги по программированию очень быстро теряют актуальность — они не успевают за развитием IT сферы. Ну и наконец, сейчас бумажные книги уже не совсем функциональный предмет. Обычно покупают те бумажные книги, которые хотелось бы иметь при себе — или очень значимые для человека, или такие, что их нужно иногда открывать заново, пересматривать отдельные моменты, консультироваться с ними. Выбрать такую книгу по программированию непросто.\nВывод\n: не рискуйте с технической литературой, лучше посмотрите \nподборку книг, которые подойдут любому программисту, от СЕО Tproger\n.\nФлешки\nИх тысячи, любых форм, размеров и цветов. Ирония в том, что как правило у всех они уже есть, а уж у айтишников и подавно.\nВывод\n: если у программиста нет флешки — она ему не нужна. Не тратьте деньги зря.\n«Шапочки из фольги»\nСюда относятся шары, очищающие пространство, наклейки, защищающие от излучения, кристаллы, помогающие писать код, и колокольчики, изгоняющие усталость… Скорее всего, выбирая такие вещи вы хотите проявить заботу о человеке. К сожалению, ваши усилия вряд ли оценят, потому что ни одна из этих вещей не имеет доказанной эффективности.\nВывод\n: программисты — люди прагматичные. Лучше посмотрите что-нибудь более полезное.\nЧто подарить программисту, чтобы не облажаться\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/gift-delivery-icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/ai-ml-trends-2020/",
                "title": "Графовая аналитика, обучение с подкреплением и ModelOps — тренды ML 2020 для задач бизнес-аналитики",
                "created_date": "19 декабря 2019 в 14:18",
                "body": "Пять трендов AI и ML в российской бизнес‒аналитике от команды Advanced Analytics компании GlowByte.\nТренд №1 — Автоматизированное машинное обучение (AutoML)\nЧто это?\nС 2019 года мы наблюдаем развитие рынка инструментов автоматизированного машинного обучения (Automated machine learning или AutoML).\nЕсли кратко, парадигма AutoML — это одна большая кнопка «построить хорошую модель».\nAutoML часто позиционируют как инструмент, с которым могут работать представители бизнеса, не обладающие технической экспертизой — то есть человеку не нужно техническое образование для того, чтобы решить Data Science задачи.\nЧто будет в 2020?\nПопулярность инструментов AutoML будет расти. Но важно понимать, что говорить об AutoML как о самостоятельном подходе пока рано, особенно в контексте больших корпораций. AutoML — скорее инструмент, помогающий специалистам по машинному обучению выполнять первичную проверку гипотез, проводить быстрые пилоты, создавать прототипы и строить benchmark модели для дальнейшего углублённого анализа.\nТренд №2 — Объяснимый ИИ (XAI)\nЧто это?\nОбъяснимый искусственный интеллект (Explainable AI или XAI).\nКонференция MIELOCONF\n24 января, Москва, 10 000–17 000 ₽\ntproger.ru\nСобытия и курсы на tproger.ru\nБизнес-пользователю важно понимать логику, которая стоит за принятием решения. Особенно это характерно для областей, где исторически господствовали легко интерпретируемые классификационные модели вроде деревьев решений или логистической регрессии (например в кредитных рисках, целевом маркетинге, страховании) и где, с одной стороны, уже всем очевидно, что использование, скажем, xgboost даст кратно лучшие результаты, а с другой — есть не только процессные ограничения, но и желание найти скрытые и неочевидные взаимосвязи.\nЧто будет в 2020?\nПоследние годы эту брешь между точностью и интерпретацией закрывают методы вроде LIME, XSHAPE и других, и судя по высокой активности в академической среде, в 2020 году нас ждёт их заметное распространение.\nТренд №3 — Обучение с подкреплением (RL)\nЧто это?\nОбучение с подкреплением (Reinforcement Learning или RL) — это по сути развитие концепции непрерывного A/B тестирования, только вместо двух сегментов — тысячи, и процесс работает непрерывно.\nИзначально обучение с подкреплением использовали для игр, в последние годы тренд перешёл и на бизнес‒задачи.\nЧто будет в 2020?\nСпециалисты продолжат искать способы использовать RL для бизнеса. На рынке уже много успешных кейсов применения: в оптимизации маркетинга — выбор наиболее подходящей кампании; в цифровом маркетинге — персонализации страниц и рассылок; в кредитный рисках — работа с проблемной задолженностью.\nТренд №4 — Графовая аналитика\nЧто это?\nГрафовая аналитика — это набор методов, которые ориентированы на анализ структуры связей между сущностями, а не на свойства сущностей. Примеры графов: связи между людьми в социальных сетях, связи банковских счетов через проходящие по ним переводы, структура владения группы компаний.\nМетодами графовой аналитики мы анализируем структуру связей и выявляем неочевидные связи.\nВ задачах машинного обучения графовая аналитика прежде всего позволяет строить более сильные предикторы — переменные, которые описывают окрестности интересующей нас сущности. Например мы можем получить ответы на вопросы: «Как влияет на кредитный рейтинг компании рейтинг её контрагентов или контрагентов контрагентов или в принципе всей цепочки поставок?».\nБлагодаря методам графовой аналитики мы можем ограничиваться не только прямыми связями, но и окрестностями по связям различной длины.\nЧто будет в 2020?\nСейчас графы успешно применяются для анализа сущностей с «естественной» сетевой структурой, таких как социальные сети. В дальнейшем мы увидим всё больше графов для сущностей с неочевидной сетевой структурой, таких как выстраивание последовательностей цепочек событий происходящих с клиентом или анализ причинно-следственных отношений для задач управления маркетинговыми коммуникациями.\nТренд №5 — Операционализация машинного обучения (ModelOps)\nЧто это?\nИнтерес к машинному обучению растёт каждый год. Лидеры почти всех индустрий вовлечены в R&D и пилотирование применения машинного обучения и углубленного анализа данных для задач бизнеса. Как следствие сейчас концентрация усилий сдвигается на внедрение результатов успешных пилотов в промышленную эксплуатацию.\nИ соответственно возникает потребность и в методологии выстраивания бизнес-процессов вокруг так называемого жизненного цикла моделей машинного обучения и в инструментах автоматизации этих процессов.\nЭто направление получило название ModelOps, по аналогии с DevOps — акроним от Model, под чем понимается модель машинного обучения, и Operations, под чем понимается ИТ эксплуатация.\nЧто будет в 2020?\nНа рынке уже есть более 50 решений и инструментов, так или иначе связанных с задачами ModelOps, среди которых бесплатные, открытые решения (например MLFlow, KubeFlow) и решения от вендоров — лидеров в области Data Science, таких как SAS и IBM.\nВ этом году, вероятно, мы увидим качественное развитие отрасли, а именно движение в сторону унификации как подходов к методологии управления жизненным циклом моделей машинного обучения, так и к техническим решениям для автоматизации процессов.\nНе смешно? А здесь смешно: \n@ithumor\nИскусственный интеллект\n, \nМашинное обучение\nТакже рекомендуем:\nИзучаем нейронные сети: с чего начать\nВ данной статье собраны материалы — в основном русскоязычные — для базового изучения искусственных нейронных сетей. \nИзучаем нейронные сети за четыре шага\nТест на знание алгоритмов\nШпаргалка по разновидностям нейронных сетей. Часть первая. Элементарные конфигурации",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/graphics-icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/devgamm-minsk-2019-review/",
                "title": "Пост-обзор главной в СНГ геймдев-конференции DevGAMM Minsk 2019",
                "created_date": "18 декабря 2019 в 20:12",
                "body": "21 и 22 ноября в Минске прошло мероприятие, которое с 2014 года собирает специалистов из игровой индустрии со всего СНГ под одной крышей, — конференция \nDevGAMM\n. В этом году конференция поставила персональный рекорд — её посетили более 2300 участников со всего СНГ и Европы. По этому поводу организаторы даже подготовили красивые \nинфографики\n.\nЯ сходил на DevGAMM, вновь вспомнил о забытом желании делать игры и приготовил пост-обзор.\nTL;DR\nКрутая локация и организация, несомненный плюс — куча нетворкинга и «звёзды» индустрии. Большинство докладов про продюсирование, дизайн и геймдизайн, а также хардкорные технические темы, вроде оптимизации шейдеров в игровых движках и портирования с помощью нативных API. Основной вывод: конфа покажется недружелюбной тем, кто просто любит игровую индустрию и не работает в сфере, но для профессионалов это одно из главных событий года.\nПлощадка\nУже традиционно конференция проходит параллельно на двух площадках: на территории комфортабельного отеля Minsk Marriott Hotel и спортивно-развлекательного комплекса Falcon Club.\nГлавный вход и стойка регистрации расположились в Falcon Club. Оттуда можно было попасть в самый большой из лекционных залов и экспо-зону со стендами партнёров. Там же разместилась DevGAMM Showcase — выставка проектов инди-разработчиков.\nПлощадки конференции соединены между собой, так что перемещаться между ними можно было без нужды выходить наружу. Не запутаться и найти нужный путь в многочисленных коридорах и залах помогали линии на полу, служащие аналогом навигатора, и приложение на смартфоне.\nЧто за приложение?\nPINE Tool\n. В нём можно было подсвечивать интересующие доклады, ставить напоминания и искать другую информацию. Оно также было DevGAMM-аналогом Тиндера: можно было посмотреть список гостей, найти тех, кто понравился, и назначить встречу в определённой зоне.\n\nЭто было весело и необычно, хотя благодаря хорошей организации получилось бы обойтись и без него: на стенде регистрации выдавали буклеты и мини-карту (а ещё стикеры для бейджа, браслет для доступа в специальные зоны и обеденные талоны).\nОрганизация\nОб участниках начали заботиться ещё за несколько дней до мероприятия — на почту пришло специальное письмо-гайд по тому, как провести время на конференции максимально полезно. В нём были кратко описаны все активности и точки интереса на мероприятии, в том числе места отдыха, маршруты для иногородних и варианты ночлега в Минске.\nMiddle Unity3D Developer\nPlarium, Краснодар\ntproger.ru\nВакансии на tproger.ru\nРазве что немного подкачали шведские столы — их хватило только на один день из двух. Но бургеров и фалафелей, которые выдавали по талонам, хватило всем.\nОбразовательная часть\nКонечно, какая конференция без докладов. На DevGAMM они шли параллельно в 6 залах, так что посетить все при всём желании не получилось бы (если у вас нет маховика времени).\nЗа таким количеством направлений и залов кроется общий нюанс конференции — если вы пришли на мероприятие, чтобы набраться опыта и узнать больше о геймдеве, то вы, вероятнее всего, останетесь ни с чем. На мой взгляд, сейчас DevGAMM больше про нетворкинг и закулисные обсуждения с экспертами индустрии.\nТем не менее спикеров сюда приглашают именитых, в частности были:\nМао Сугияма с докладом про издание игр на Nintendo Switch;\nДжей Бриттон, который озвучивал Frostpunk, Elite Dangerous, Divinity: Original Sin 2 и другие игры, с размышлением о роли режиссуры и нарратива игры в работе актёра озвучки;\nАдриан Вершинин, сценарист серии Battlefield, Star Wars: Battlefront, Crysis 3 и других хитов, с рассказом о работе игровых сценаристов;\nЦветан Русимов с историей о M&A Imperia Online – сделки в 27,5 млн долларов;\nпредставители Larian Studios и Elverils с совместным кейсом удачного портирования Divinity: Original Sin 2 на MacOS.\nПолный список докладов и материалы спикеров можно посмотреть на \nсайте\n конференции.\nДискуссии\nДля твёрдо намеренных увеличить список связей на LinkedIn и любителей находить новых знакомых на DevGAMM было несколько лаунж-зон, например:\nQuiet Lounge от компании Playgendary в Falcon Club. Тут можно было отдохнуть в тишине, зарядить устройство и угоститься сладостями.\nUnreal Engine Lounge — место встречи всех UE4-разработчиков конференции.\nА специально для издателей и продвинутых разработчиков прошло несколько круглых столов по издательству игр в Китае, разработке на популярных движках и продюсированию игр.\nЧем заняться кроме докладов\nGame Roast\nЭто, вероятно, самая запоминающаяся и смешная часть конференции.\nКраткие правила\nНа своеобразной «прожарке» видеоигровых проектов встречаются издатели игр, блогеры и инди-разработчики. По традиционным правилам издатели в течение 5 минут должны рассказать зрителям и разработчикам, что в их игре не так, в юмористической форме. Инди, в свою очередь, за одну минуту должны отстоять свою позицию и завоевать доверие зрителей. А зал решает, кто же из них победил. Проигравший выпивает несовместимый с принципами смешивания алкогольных напитков коктейль.\nПричём в этом году всё перевернулось с ног на голову: команда инди-разработчиков разыграла на сцене настоящую революцию — издателей и блогеров скрутили парни в чёрных масках, а на стенах появились транспаранты со слоганом «Developers World Order». Последствием «революции» стали изменившиеся правила — теперь уже выступление разработчиков стало пятиминутным, а защита издателей сократилась всего до одной минуты. Проигравший же пил ещё более смертоносный микс из рижского бальзама, текилы и рижских шпрот.\nВпрочем, слова не смогут целиком передать ту атмосферу, которая царила в зале и главным образом на сцене во время Game Roast.\nDevGAMM Awards\nДважды в год проходит престижная премия независимых разработчиков — DevGAMM Awards. Этот год не стал исключением из правил.\nПодать на неё проект может любой инди-разработчик или студия, но он должен отвечать нескольким требованиям: иметь рабочий и играбельный билд, быть самостоятельным IP либо его продолжением и выйти в продажу не позже года назад. Кроме того, на конференции действует правило «1 билет — 1 игра», то есть чтобы подать игру на конкурс, нужно подтвердить участие в конференции.\nПодробно описывать награждение не имеет смысла, но организаторам удалось достичь ощущения присутствия на церемонии вручения «Оскара» или как минимум «Эмми».\nС полным списком участников и победителей можно ознакомиться на специальной \nстранице\n.\nБольшинство проектов ещё находятся в стадии тестирования, но все они выглядят как минимум многообещающе.\nНаграждение победителей конкурса от Disgusting Men и Epic Games\nКроме традиционной церемонии вручения DevGAMM Awards этот год стал ещё и дебютом нового состязания — «Всенародного конкурса разработчиков на UE4» от Disgusting Men, Kefir и Epic Games.\nГлавный сюрприз конкурса — гран-при в 600 000 $ и право участвовать в выставках и конференциях по всей Восточной Европе — разделили между собой все финалисты конкурса.\nПодробнее почитать про всех финалистов и познакомиться с их проектами можно в \nматериале\n на сайте Disgusting Men.\nDevGAMM Quest и Expo\nЕжегодно организаторы и партнёры конференции приглашают поучаствовать в игре DevGAMM Quest, за участие в которой можно выиграть весьма ценные призы, вроде MacBook Pro, Nintendo Switch или игрового кресла DXRacer.\nПравила квеста максимально просты: нужно за первые сутки конференции пройти все необходимые точки партнёров в экспо-зоне, познакомиться с компаниями поближе и выполнить несложные условия получения заветной печати на бланке участника. Например, в этом году среди заданий были такие: продержаться 5 минут в VR-шутере от партнёров Skillbox, заняться вязанием на стенде NIKO Firm и пройти тест «Кто ты из персонажей компании Playrix».\nКвест решает сразу несколько полезных задач: вы в максимально короткие сроки знакомитесь со стендами большинства компаний-участников конференции, узнаёте о том, чем они занимаются, и получаете за это приятные призы и сувениры.\nDevGAMM Showcase\nЗа два дня конференции в выставке проектов независимых геймдев-студий приняли участие более 90 проектов от разработчиков из СНГ и не только. Среди прочих на Showcase можно было поиграть и в игры-победительницы премии DevGAMM: TOHU, Gripper, Get Access, Encased. Игры на движках Unreal Engine и Unity получили поддержку и специальные стенды.\nЗаключение\nЕсли вы работаете в игровой индустрии — DevGAMM обязателен к участию. И даже если вы не посетите ни одного профильного выступления, то точно найдёте новых знакомых, проведёте два дня в компании таких же людей с горящими глазами, решивших начать не только играть в игры, но и разрабатывать их.\nИнди-командам и одиночным разработчикам определённо стоит поучаствовать в конференции и подать свои наработки на Awards или как минимум Showcase. Профессиональная обратная связь, нетворкинг с профессиональными геймдизайнерами, разработчиками и продюсерами, закулисные обсуждения и питчинг перед инвесторами — это то, без чего не обходится ни одна DevGAMM.\nЕсли же вы только думаете над разработкой собственной игры, поход на конференцию станет для вас не менее полезным. Ведь на ней вы сможете набраться вдохновения, опыта и ценных советов от таких же специалистов, уже прошедших путь начинающих инди-разработчиков, побольше узнать о подводных камнях и не совершить чужих ошибок. Что ещё круто, так это то, что только на конференциях люди как никогда открыты к общению и всякого рода социальным взаимодействиям, так что, быть может, вы и команду себе собрать сможете!\nДля тех, кто просто интересуется игровой индустрией и любит видеоигры, конференция, возможно, не оправдает ожиданий в виде окна в геймдев. На ней много контента для неподготовленного слушателя, «локальные» встречи и профессиональные активности, которые предназначены для инвесторов и разработчиков. Кроме того, если у вас нет природной болтливости, то вам может стать одиноко среди сплочённых компаний из коллег по цеху.\nА если вы так до сих пор не решились сходить ни на одно IT-мероприятие, то почаще заглядывайте в наш \nраздел событий\n, там точно найдётся что-нибудь вам по душе независимо от того, тестируете ли вы ПО, пишете сайты или прошиваете микроконтроллеры для космических аппаратов.\nНе смешно? А здесь смешно: \n@ithumor\nРазработка игр\nТакже рекомендуем:\nКонечный автомат: теория и реализация\nКак научиться разрабатывать игры: подробная блок-схема\nЯзыки программирования, на которых были написаны популярные компьютерные игры — пять вдохновляющих примеров\nПишем свою первую игру. Прохождение для разработчиков",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/2AABDD39-C151-4FD7-BFCE-939C9C65977D-880x308.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 960\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/IMG_2839.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1540px\" viewBox=\"0 0 1540 879\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/skrinshoty-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-speaker-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-quiet.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-GR.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-awards.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-unreal_awards.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-quest4.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 848\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/devgamm-showcase1.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/7-steps-to-outsource-an-application/",
                "title": "Как забрать приложение на аутсорс, чтобы заказчик остался доволен — опыт компании из Казани",
                "created_date": "17 декабря 2019 в 18:23",
                "body": "Цель любого бизнеса — эффективно использовать свои ресурсы. Содержать штат опытных специалистов часто неоправданно дорого, поэтому для многих компаний аутсорс становится наилучшим решением. Передав сервис на поддержку профессиональному ИТ-аутсорсеру, компания может сократить расходы, не проигрывая в качестве, а иногда даже добиваясь лучшего результата и ликвидируя риски.\nНо для того, чтобы такое сотрудничество получилось успешным, нужно правильно организовать процесс работы. Как не разочаровать заказчика и избежать проблем, рассказывает эксперт по поддержке приложений \nкомпании ICL Services\n Марат Минникеев.\nКак аутсорс-команде организовать работу с заказчиком?\nШаг первый: подготовка документов и сбор информации\nЧтобы составить грамотный проработанный план, менеджер будущего проекта должен запросить у заказчика пакет документов, состоящий из:\nописания приложений;\nопросных листов;\nперечня обращений состоящих из инцидентов, запросов на обслуживание и запросов на изменение, которые предстоит решать команде поддержки.\nЕсли информации недостаточно, нужно встретиться с ИТ-командой заказчика, чтобы получить более полную информацию о текущем состоянии проекта и планах дальнейшего развития.\nПосле того, как вся необходимая информация собрана, мы переходим к проработке плана по передаче сервиса на поддержку. Весь проект можно разделить на 5 этапов:\nПланирование перевода услуг.\nЭтап передачи знаний.\nПредоставление услуг при поддержке заказчика.\nПредоставление услуг с льготным периодом.\nПолная готовность предоставления услуг.\nШаг второй: планирование перевода услуг на сопровождение\nНа этом шаге менеджер проекта начинает формировать более детальный план по передаче сервиса, составляет график встреч по передаче знаний, список документов и реестр рисков. В это же время заказчик и исполнитель уточняют разделение ответственности между командами, а также согласовывают SLA и метрики для будущего проекта. Планирование передачи сервиса — один из важнейших этапов проекта, так как здесь мы выстраиваем подробный план, от которого постараемся не отклоняться в будущем.\nНа этом же этапе проектная команда проводит аудит инфраструктуры и системы управления ИТ-услугами заказчика. Обычно он включает в себя как удалённую работу, так и выезд в офисы заказчика для очных встреч.\nВ моей практике был случай, когда заказчик отказался от аудита, чтобы сэкономить, но как показала практика — зря. В процессе дальнейшей работы стали всплывать разные баги и костыли, которые мешали нормальной работе приложений. И решать их приходилось в рамках change management (процесс по управлению изменениями), что стоило заказчику дополнительных денег.\nШаг третий: формирование команды из ключевых сотрудников (core team) и команды поддержки для оказания сервиса\nПри формировании основной команды проекта необходимо выбирать сотрудников, которые:\nучаствовали в аналогичных проектах;\nработали с аналогичными системами и стеком технологий, который пригодится при освоении нового материала;\nбудут в дальнейшем оказывать поддержку сервиса, смогут передать знания и помогут остальной команде в освоении новой информации.\nК формированию ключевой команды мы подходим основательно и всегда закладываем бэкап ресурсов — несколько запасных специалистов — на случай форс-мажора. Однажды на одном из этапов передачи сервиса на поддержку наш коллега покинул команду, но за счёт бэкапа мы смогли оперативно ввести нового сотрудника в команду и продолжить работу по передаче сервиса без отклонений от графика.\nШаг четвёртый: передача знаний как один из сложнейших этапов в проекте передачи сервиса\nЦель передачи знаний — получить от заказчика специфические знания, навыки и соответствующую документацию, относящуюся к его ИТ-инфраструктуре. Передача знаний планируется и осуществляется с разбивкой на технологические направления. Основные из них:\nпередача всей необходимой документации о сервисе;\nпланирование KT-сессий (Knowledge Transfer, сессий передачи знаний);\nвстречи и тренинги совместно с командами специалистов заказчика на территории заказчика;\nвнутренняя передача знаний остальным членам команды исполнителей.\nВесь необходимый объём информации нужно доводить до всех заинтересованных вовремя. Важно, чтобы люди научились вам доверять. Для этого ваши действия должны стать для них максимально понятными и прозрачными. Отчёты о состоянии работ должны идти регулярно.\nПример этапа передачи знаний\nРасскажу, как проходил этап передачи знаний на одном из наших проектов крупной международной логистической компании. Сразу хотелось бы сказать, что приложения для нас были новыми, а большая часть информации по ним хранилась в головах у специалистов заказчика, но т. к. мы уже знали технологический стек, домен, и у нас был опыт работы с аналогичными системами, проблем и заминок в освоении новой информации не было.\nПока формировалась команда, мы работали над получением максимального объёма информации о приложениях. Ознакомившись со всеми имеющимися инструкциями мы запланировали выезды на площадку заказчика, где познакомились с текущей командой. Заказчик провёл экскурсию по объекту, чтобы мы более детально понимали всю логику бизнес-процесса. Днём мы получали информацию по передаваемым приложениям, а по вечерам собирались с командой, обсуждали и структурировали её. На этапе передачи знаний требуется полное вовлечение в проект, поэтому мы слаженно работали по 12–15 часов в сутки, благодаря чему нам удалось за 2 месяца перенять знания по нескольким WMS (Warehouse Management System) и TMS (Transportation Management System) системам.\nШаг пятый: первые попытки оказания сервиса — совместная работа с поддержкой команды заказчика\nНа этом шаге все оперативные задачи поступают к проектной команде, которая в свою очередь может запрашивать помощь или консультации у команды заказчика. Самое главное на этом этапе — получить практический опыт поддержки решения и проверить, достаточно ли информации было получено ранее.\nКроме этого, очень важно удостовериться, что команда заказчика доступна для консультаций и помощи. Ведь именно на этом этапе начинает проявляться недовольство со стороны пользователей. В нашем случае причин обычно две:\nвремя решение заявок немного выросло;\n«раньше было лучше».\nДавайте разберём эти проблемы. Рост времени решения заявок — это временное явление. Оно связано с тем, что наша команда перенимает опыт, консультируется с командой заказчика и дополняет информацию в базу знаний.\nВторая проблема связана с тем, что заявки начинают решаться строго по процессу с соблюдением приоритетов и SLA, а это многим не нравится, ведь каждый пользователь считает, что его заявка самая важная и срочная. Со временем люди начинают привыкать к процессу, и проблема исчезает.\nШаг шестой: льготный период предоставления сервиса — штрафные санкции не применяются\nНа этом шаге команда проекта самостоятельно предоставляет услуги по поддержке приложений заказчика. Исполнение контрактных обязательств в части уровней предоставления услуг (SLA) измеряются, но штрафные санкции не применяются. Основная цель этого периода — проверить, достижимы ли показатели SLA, а также запланировать и внедрить меры, которые помогут улучшить и скорректировать предоставление услуг, если показатели SLA не достигаются. Также в этот период можно проверить реальную нагрузку на команду, и укрепить её дополнительными людьми, если нужно.\nШаг седьмой: передача сервиса на полноценную поддержку\nЗаключительный этап проекта — заказчик полностью передаёт сервис в руки профессионалов. Это значит, что теперь команда проекта самостоятельно поддерживает приложения заказчика. SLA и C-SAT (качество работы) измеряются, и если показатели не соблюдаются, заказчик применяет штрафные санкции.\nПроблемы, которые возникают во время передачи сервиса и пути их решения\nОтсутствует описание процесса incident management, из-за чего нагрузка неэффективно распределяется между сотрудниками.\nЭксперты нашей команды обычно адаптируют процесс под структуру проектной команды.\nУ бизнеса отсутствует понимание метрик SLA и приоритезации обращений, из-за чего затягивается решение высокоприоритетных задач.\nНаши специалисты вырабатывают процесс приоритезации под каждый проект индивидуально.\nНет инструкций по решению инцидентов с обслуживаемым ПО. Крайне сложно формализовать подход к решению задач.\nНа этапе передачи знаний специалисты нашей команды дополняют и структурируют имеющиеся инструкции и оформляют их в единую базу знаний.\nВо время КТ-сессий всплывают приложения, которые не входят в перечень обслуживаемого ПО, но влияют на бизнес.\nТакого лучше не допускать и на этапе планирования согласовывать список поддерживаемого и допустимого к установке ПО.\nЗачастую в компаниях отсутствует матрица коммуникаций (эскалаций), из-за чего задерживается выполнение высокоприоритетных для бизнеса обращений.\nНаша команда совместно со специалистами заказчика составляет матрицу по всем стримам с контактами ответственных и сроками перехода на следующий уровень.\nСамая популярная проблема — устаревшее ПО и самописные костыли для приложений.\nНа этот случай заложен аудит, который покажет всю картину и больные места инфраструктуры заказчика. Как показывает практика, без аудита всплывает много неприятных сюрпризов.\nВ моей практике ещё ни разу не было случая, чтобы на этапе передачи знаний не всплыло какое-нибудь новое приложение. Связано это обычно с тем, что заказчик внезапно захотел передать приложение, которое не должно было входить в скоуп поддержки.\nКакие плюсы можно получить при правильной передаче сервиса на внешнюю ИТ-поддержку?\nНа управление приложениями тратится меньше времени, что даёт возможность сосредоточиться на поддержке бизнеса и важных стратегических проектах.\nКачество сервиса контролируется через измеримые и прозрачные SLA.\nСервисные процессы стандартизируются с использованием лучших практик и зарекомендовавших себя бизнес-подходов.\nПроцессы предоставления сервиса соответствуют нуждам бизнеса.\nКачество услуг постоянно совершенствуется через определение изменений ценности сервиса.\nКоманда специалистов формируется на основе специфики ПО и пожеланий заказчика.\nБлагодаря правильно и прозрачно проведённому проекту по передаче знаний, заказчик передаёт нам стек приложений, состоящий, например, из нескольких WMS и TMS систем, БД SQL и Sybase, а также поддержку серверной инфраструктуры. Весь проект передачи знаний в среднем занимает от 3 до 6 месяцев. За это время мы можем создать правильную команду, изучить новые приложения, разобраться в дебрях накопленных годами костылей и багов, создать и структурировать базу знаний с нуля и при этом не уронить качество передаваемого сервиса.\nУзнать подробности об условиях и результатах, посоветоваться с экспертами и заказать услугу можно на \nсайте ICL Services\n.\nОрганизация разработки\n, \nПартнёрский материал\n, \nУправление проектами\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/team-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/experts/required-ml-skills/",
                "title": "Хочу шарить в машинном обучении. Что нужно знать?",
                "created_date": "16 декабря 2019 в 19:03",
                "body": "Область машинного обучения сейчас на подъёме, и специалистов в ней остро не хватает. О том, какими навыками нужно владеть, чтобы стать одним из таких специалистов, мы решили узнать у экспертов.\nВадим Юн\n, \nгенеральный директор компании Crayon в России\nПрактика нашей компании показывает, что до 70% времени на проектах, связанных с машинными обучением, занимает этап подготовки данных. Специалистов, занимающихся работой с данными (или Data Scientist), умеющих анализировать и визуализировать данные, на рынке сейчас сильно не хватает.\nСитуация обусловлена двумя факторами. Во-первых, внезапно взлетевшем спросом на экспертов по обработке данных. Сейчас каждая компания, деятельность которой так или иначе затрагивает сферу ИТ, стремится нанять такого специалиста к себе в штат. Если зайти на HH.ru или любой другой сервис по подбору персонала, можно увидеть огромное количество открытых вакансий на позицию Data Scientist в различных компаниях. Кроме того, это одна из самых высокооплачиваемых работ. Как следствие рынок перегрет по уровню заработной платы. Во-вторых, нехватка специалистов связана с тем, что дата-саентисты — это в первую очередь математики. Чем сложнее задача и методы, которые используются для анализа данных, тем более «хардкорная» математика нужна. Несмотря на то, что в России высокий уровень технического образования, рынок оказался не готов для того, чтобы предложить необходимое количество математиков с хорошими навыками программирования, умением строить алгоритмы и практическими знаниями методов статистического анализа данных.\nЕсли у вас математический склад ума и вам интересна карьера с множеством возможностей для карьерного роста, обратите внимание обучающие курсы по работе с данными, например на Coursera, Khan Academy, Udacity или Kaggle.\n9\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n9\nПовысить\nПонизить\n\n \nСергей Ширкин\n, \nдекан факультета Искусственного Интеллекта в онлайн-университете GeekUniversity\nСовременное машинное обучение условно можно разделить на три основных направления: работа с табличными данными, компьютерное зрение и обработка естественного языка.\nРабота с табличными данными наиболее распространена. Это, как правило, прогнозные модели, на основе предсказаний которых работают бизнес- процессы. В этом направлении важны знания математической статистики, моделей машинного обучения (чаще всего используется градиентный бустинг), знание предметной области и умение внедрить код на Python в продакшн.\nВ компьютерном зрении важны знания современных архитектур нейронных сетей. Так как это направление последние два-три года интенсивно развивалось, то ценится знание основных достижений и умение применять методы, описанные в статьях, на практике. Помимо знаний Python в компьютерном зрении желательно знать C/C++, так как это быстрые языки, и они являются предпочтительными для внедрения моделей.\nТакже сейчас активно развивается обработка естественного языка, модели которой позволяют работать как с письменной речью (классификаторы текстов, чат-боты), так и с устной (голосовые боты). Здесь ценится умение читать статьи, разбираться в нейронных сетях, знать особенности языков и отслеживать и внедрять новейшие достижения NLP.\n6\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n6\nПовысить\nПонизить\nСергей Афанасьев\n, \nисполнительный директор, начальник управления статистического анализа «Ренессанс Кредит»\nЧтобы быть в тренде, специалисту по машинному обучению надо обратить внимание на дисперсию — она решает, в какой точке кривой специалист окажется.\nЕсли говорить об общих навыках, то для специалистов Data Science выделяют три основных компетенции. Во-первых, наличие навыков программирования: умение писать код на Python (или, например, на R), знание библиотек машинного обучения. Во-вторых, уверенная математическая база — знание алгоритмов ML, теория вероятностей, математическая статистика, линейная алгебра. В-третьих, бизнес-экспертиза — понимание, как работает бизнес, опыт в бизнес-аналитике, навыки проведения исследований.\nСфера Data Science бурно развивается, но является недоспециализированной — во многих отраслях нет явно выделенных специальностей с чёткими требованиями. Поэтому в Data Science часто ищут full stack специалиста, который должен и хорошо писать код на Python, и обладать бизнес-экспертизой, и быть хорошим математиком, и уметь внедрять модели в продакшн, и быть хорошим менеджером проекта, и заниматься R&D и т. д. Эдакий и швец, и жнец, и на дуде игрец.\nВ нашем банке, как и во многих других организациях, есть своя специфика, поэтому при подборе специалистов к нам DS-команду мы даём два теста.\nSQL-тест включает несколько задач на написание select-запросов. На него мы отводим 30–40 минут. Несмотря на то, что тестовые запросы пишутся в 5–7 строк, они составлены так, что отражают основные проблемы, с которыми аналитики сталкиваются в своей работе с базами данных. Многие кандидаты, к сожалению, не справляются с этими задачами, хотя этому тесту уже более 10 лет.\nTake-home test на моделирование — домашнее задание на 2–3 дня, в котором требуется построить модель регрессии на данных, взятых из открытых источников. По результатам этого теста мы оцениваем уровень знания Python, основ моделирования, навыки работы с данными, навыки проведения исследования и интерпретации результатов.\n14\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n14\nПовысить\nПонизить\nАлексей Найдёнов\n, \nзаместитель руководителя отдела анализа данных хостинг-провайдера REG.RU\nНесмотря на стремительное развитие инструментов, применяющихся в машинном обучении — новых библиотек, фреймворков, архитектур нейросетей и всё более мощного оборудования, — навыки, необходимые специалисту по Machine Learning, почти не изменились за последние пять лет. Разумеется, в каждой конкретной области вам могут пригодиться какие-то определённые знания, но в целом можно выделить несколько основных требований:\nВам нужно хорошо знать C++ или Python, чтобы уметь писать высокопроизводительный код.\nБазовые алгоритмы и структуры данных тоже важны — они помогают понять, как именно нужно писать более производительный код.\nНеобходимо разбираться в архитектуре «железа» — понимать, как выполняются распределённые и параллельные вычисления и уметь оптимизировать обработку больших данных.\nОчень важный момент — знание математики, в первую очередь — линейной алгебры и теории вероятностей для понимания работы алгоритмов машинного обучения.\nХорошее знание основных методов Machine Learning и Deep Learning. Эти области не ограничиваются нейросетями: сюда входят и компьютерное зрение, и базовые алгоритмы классификации/кластеризации/регрессии, и обработка естественного языка, и многое другое.\nТаким образом, если вы планируете начать изучение машинного обучения, стоит уделить особое внимание этим навыкам. Если же вы продолжающий специалист, вам тоже найдётся, куда расти: следите за релизами языков программирования, изучайте преимущества тех или иных графических ускорителей для вычислений, тестируйте новые версии библиотек. Главное — знать, в каком направлении стоит развиваться и не останавливаться на достигнутом.\n3\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nНиколай Бурныков\n, \nсистемный архитектор Orange Business Services Россия и СНГ\nСпрос на экспертов в сфере машинного обучения сегодня стремительно растёт. И несмотря на то, что набор необходимых профессиональных навыков и опыта зависит в первую очередь от места работы, существуют и общие тренды.\nВ настоящее время наблюдается расцвет нейронных сетей и алгоритмов глубокого обучения, в связи с чем требуется умение работать с двумя базовыми фреймворками глубокого обучения — PyTorch и Tensorflow (а также его надстройкой — Keras). Безусловно, очень важно, чтобы специалист уже имел опыт решения производственных задач в указанных средах, но плюсом будет также и авторство научных статей по данной тематике.\nПоскольку направление методов работы с алгоритмами глубокого обучения развивается невероятно быстро, важно постоянно повышать свою квалификацию, следить за инновациями и делиться опытом с единомышленниками. Для этого специалистам необходимо:\nотслеживать профильные выставки и конференции, а также принимать в них участие;\nучаствовать в соревнованиях по машинному обучению, в том числе на платформе Kaggle;\n вступить в международные профильные сообщества, такие как OpenDataScience, чтобы обмениваться опытом и совершенствовать свои навыки.\n3\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\n\n \nПонизить\nЮрий Латин\n, \nгенеральный директор компании Bell Integrator \nHard Skills\nЗнание основ математической статистики, теории вероятности.\nПродвинутое знание одного из языков программирования, используемых для машинного обучения: Python/R.\nПродвинутое знание методологии машинного обучения и дата майнинга (регрессия, классификация, кластеризация, древесные и линейные алгоритмы, нейросети).\nЗнание основных преимуществ и ограничений различных алгоритмов машинного обучения и умение выбора модели, соответствующей задачи.\nНавыки работы с распространенными библиотеками, применяемыми для машинного обучения: Numpy, Pandas, Sklearn, XGBoost, Keras, TensorFlow, PyTorch.\nНавыки EDA (exploratory data analysis) и умение работать с соответствующими библиотеками: Seaborn, matplotlib, Shiny.\nПонимание методологии подготовки и очистки данных, feature engineering.\nПонимание принципов оценки качества (валидации) моделей и используемых при этом метрик.\nПонимание функционального / объектно-ориентированного программирования.\nSoft skills\nПродвинутые коммуникационные навыки. Способность доступно объяснить сложные технические концепции для не технической аудитории.\nНавыки работы в команде / самостоятельной работы.\nНавык учиться и применять полученные знания на практике, саморазвитие.\nНавык глубокого погружения в проблему и критического её осмысления.\nНавыки и умения решать незнакомые задачи и проблемы. Умения их структурировать.\nНавыки решения проблем на основе принципов системного анализа, комплексного решения проблем.\nНавыки творческого решения проблем. Креативность и гибкость мышления. Навыки генерации идей и нестандартного мышления.\nНавыки качественного и ответственного выполнения работы.\nРазностороннее развитие, эрудированность, многогранность навыков и умение их применять на практике.\nНастойчивость и способности концентрации на решении поставленных задач.\nМотивация и умение мотивировать окружающих.\nОпыт\n1–3 года прикладного математического моделирования в бизнес-ориентированной среде или в среде разработки.\nОпыт внедрения моделей машинного обучения в производственную среду.\nОпыт работы с большими датасетами, базами данных, экосистемой Hadoop, Spark.\nОпыт работы с Git.\n8\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nДамир Заляев\n, \nстарший менеджер по разработке ПО компании ICL Services\nЕстественно, всё зависит от области. Как я вижу, сейчас наиболее популярными областями являются Обработка Естественного Языка, Видеоаналитика и работа с Временными Рядами.\nОднако вне зависимости от области важны как теоретические знания:\nпонимание основных алгоритмов/архитектур;\nизучение последних достижений в сфере ИИ (например по материалам конференций).\nТак и практические навыки:\nвладение языком программирования и мэйнстрим фреймворками;\nумение собирать и подготавливать данные;\nумение выбрать, обучить и развернуть модель;\nумение презентовать результаты;\nИ, конечно, лучшее подтверждение имеющихся навыков — это факты успешного участия в реальных проектах или, например, на Kaggle.\n5\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nДенис Власов\n, \nведущий аналитик Учи.ру\n\n \nОто всех DS ожидается, что они знают программирование, прикладную статистику и базовую математику. Остальные требования специфичны и зависят от задач и компании.\nТочно не обойтись без умения разобраться в бизнес задачах компании и перевести их на язык технического решения. Например, запрос — выяснить, почему ученик быстро уходит с определённых онлайн-заданий, можно обработать десятком различных способов. Но выбрать правильный, самый быстрый, недорогой и объективный метод можно только разобравшись в смысле задачи.\nСюда же можно отнести и обратный путь — DS вместе с разработчиками должен уметь транслировать MVP в производство. Особенно ценны DS, которые сами могут что-то катнуть в продакшн или хотя бы имеют представление о возможных подводных камнях при продуктизации. Такой опыт особенно важен для небольших и средних компаний, но не помешает и в больших компаниях, где производство затрагивает несколько команд.\n10\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n10\nПовысить\nПонизить\nАлексей Парфентьев\n, \nруководитель отдела аналитики «СёрчИнформ»\nНа наш взгляд, обязательны следующие 3 пункта:\n1. Математика. Прежде всего, специалист по машинному обучению должен иметь хороший математический бэкграунд. Это обязательно для хорошего понимания того, как работают классические алгоритмы ML и что же происходит внутри современных нейросетей. Понадобится и линейная алгебра (операции с векторами и матрицами), и матанализ (дифференцирование сложных функций, интегрирование), и математическая статистика и, конечно, теория вероятностей. Поэтому в этой области data science (науки о данных) крайне желательно иметь профильное высшее образование — мехмат, ВМК.\n2. Python. Понадобятся базовые знания основ программирования, для того чтобы не путаться хотя бы в собственном коде, а лучше — быстро разбираться в чужом. Понадобится знать Python — если раньше люди пользовались R, C++ в ML, то в наше время быстрого развития нейросетей удобный и простой Python вытеснил всё остальное. Кстати, его можно освоить довольно быстро. Подойдёт и как первый язык для изучения программирования.\n3. Курсы, книги, участие в Kaggle. Нейросети завоевали лидерство в современном машинном обучении и сейчас имеет смысл развиваться в этом направлении. Благо появилось множество книг, бесплатных курсов и обучающих видео по ML и нейросетям. Например, мы можем смело рекомендовать курс «Deep Learning на пальцах» при Новосибирском Государственном Университете (бесплатные лекции можно найти на YouTube). Что касается книг, можем рекомендовать как первую книгу С.И. Николенко «Глубокое обучение. Погружение в мир нейронных сетей». Ну и конечно участие в конкурсах. Нет ничего лучше, чем практика, и конкурсы Kaggle (от Google) предоставляют отличную возможность попрактиковаться и посоревноваться в машинном обучении. Для успешного прохождения собеседований участие в Kaggle будет огромным плюсом.\n15\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\n \n\nРейтинг полезности ответа: \n15\nПовысить\nПонизить\nРустам Салимзибаров\n, \nруководитель отдела разработки «Сателлит Инновация»\nСпециалист по машинному обучению нового типа сегодня обязан удовлетворять целому ряду требований. Эти требования учитывает работодатель при поиске сотрудников. Эти же качества нужно развивать и абитуриентам или даже школьникам, мечтающим посвятить свою жизнь работе с искусственным интеллектом. Если обобщать, я бы назвал 5 таких требований.\nВо-первых, это знание математики. В особенности это касается теории вероятности и математической статистики. Помните времена, когда школьники кричали: «Зачем мы это учим! Нам не пригодится это в жизни!»? Забудьте о них. В жизни сегодня пригодится всё. И с каждым днём этого всего становится больше.\nВо-вторых, это Python. Сегодня все пишут ML на Python. Не нравится? Не проблема. Мы всегда найдём другого специалиста, которому нравится Python. Да, у этого высокоуровневого языка программирования есть свои недостатки. Но достоинств всё же больше. Всё-таки, «сейчас — лучше, чем никогда». Язык развивается, и за обновлениями и новинками следить обязательно.\nВ-третьих, важным качеством является усидчивость. Специалист должен быть готов к тому, чтобы возиться с выборками сырых данных, днями подбирать оптимальные параметры нейронной сети и так далее. Усидчивость нужно развивать, культивировать и всячески поощрять.\nЧетвёртым качеством можно назвать любознательность, то есть, в нашем контексте, умение самостоятельно искать границы человеческих знаний в данной области. Иногда правильный ответ кроется там, где, казалось бы, уже всё помечено чёрными метками. И часто бывает, что самую сложную задачу способен решать только любознательный специалист. Кстати, любознательность — эта та черта, которую также можно развивать.\nНаконец, пятое качество — и требование одновременно — это воображение. Не нужно воображать работу специалистом по машинному обучению. Попробуйте, например, представить гиперплоскости в 100000-мерном пространстве. Получилось? Если нет, то в обязательном порядке стоит к этому стремиться — и следить за теми, у кого уже получилось.\n7\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n7\nПовысить\nПонизить\nПетр Урваев\n, \nруководитель технологических решений SimbirSoft\nОценивать риски и прогнозировать бизнес-события с помощью Machine Learning сегодня хотят всё больше компаний. В частности, банкам нужен кредитный скоринг, ритейлерам — решения для предсказания спроса. В целом, в любом бизнесе есть маркетинговые или операционные данные для анализа, например для управления логистикой и другими процессами. Редко у кого всё выстроено оптимально, обычно всегда есть, что улучшать, поэтому спрос на решения Data Science и Machine Learning постоянно растёт.\nЕсть разные мнения, какие навыки важнейшие для ML-специалиста, мы с командой остановились на трёх:\nУметь эффективно учиться. Ориентироваться в новых подходах, фильтровать огромный поток информации и понимать, что действительно пригодится на практике.\nДосконально знать алгоритмы. Нужно знать, применим ли алгоритм в конкретном кейсе, при каких условиях.\nПереводить бизнес-задачи на язык математики. Так, говоря о предсказании спроса, важно понимать, какой именно параметр мы будем прогнозировать, как оценивать результат, какие будут ограничения.\nЕсли речь идёт о начинающих специалистах, как и везде, требования сводятся к простой формуле: знать матчасть и нарабатывать практику. Применительно к ML, из теории нужно знать как минимум Python или R, основные библиотеки, алгоритмы, их ограничения, плюсы и минусы. Если вы уже являетесь разработчиком и располагаете хотя бы базовыми знаниями в теории вероятностей, статистике, мат. анализе и линейной алгебре, вы достаточно быстро разберётесь с этим. Для практики тоже большой простор: можно работать с публичными датасетами, участвовать в соревнованиях — например на платформе Kaggle.\nЧто касается базового образования, оно может быть разным — физика, прикладная математика, биоинформатика. Главное — иметь структурированное математическое мышление и не падать в обморок при виде матриц, формул и алгоритмов. 🙂 Сроки обучения тоже у всех разные: бывает, что люди с бэкграундом осваивают Data Science за 3 месяца — с другой стороны, обучение на этом не заканчивается (и вообще не заканчивается никогда).\nЧтобы не упустить ничего нового в ML, важно постоянное самообразование. Если нужно подтянуть теорию, то достаточно хорошие насыщенные курсы предлагают edX и Coursera. Для практики можно воспользоваться датасетами из UCI Machine Learning repository. Есть образовательный раздел на Kaggle и рассылки по машинному обучению и искусственному интеллекту, в частности от сообщества Open Data Science и издательства O’Reilly. А если есть время и желание разобраться в научной составляющей, то на arxiv.org и других ресурсах можно найти статьи по Machine Learning.\n6\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n6\nПовысить\nПонизить\nАлександр Ефимов\n, \nдиректор по аналитическим и индустриальным решениям SAS Россия/СНГ\nКакие навыки специалиста по машинному обучению сейчас наиболее востребованы\nБизнес ориентирован на внедрение систем искусственного интеллекта, а специалист по машинному обучению как раз призван научить машину «думать» и принимать решения в соответствии с умными алгоритмами. Отсюда и перечень требований к такому специалисту.\nВо-первых, он должен обладать базовыми для этой профессии навыками: разбираться в методах машинного обучения, понимать, где они используются, какие лучше применять для решения той или иной задачи, какие алгоритмы больше подходят под конкретные данные и так далее. В последнее время очень востребованы навыки работы с нейросетями. Естественно, можно даже не упоминать совсем уж базовые вещи вроде умения писать SQL-запросы, логические выражения, иметь представления о различных базах данных и так далее.\nВо-вторых, помимо хорошей аналитической базы, важно обладать бизнес-видением — то есть, решая задачу, специалист по машинному обучению должен мыслить не только в её узких рамках, но и видеть всю ситуацию заказчика, понимать, зачем это нужно, что это даст, как это будет работать в рамках всего бизнеса.\n12\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n12\nПовысить\nПонизить\nКсения Шишканова\n, \nархитектор big data решений Accenture в России\nЗа последние 5 лет сформировался стандартный набор требований к специалисту по машинному обучению, который включает: сильную математическую подготовку (теорию вероятности, статистику, линейную алгебру), как минимум один из языков программирования Python/R (реже С++), знание и способность на практике реализовать модели машинного обучения.\nИспользование ML и AI стало повсеместной практикой, появилось множество новых технологий и подходов, соответственно, можно выделить навыки, наличие которых станет преимуществом:\nNeural Networks и Deep Learning\nПомимо традиционных моделей машинного обучения, стремительно набирают популярность нейронные сети, в том числе глубокое обучение, которое выигрывает по скорости разработки модели, извлечению целевой функции и подбору параметров.\nНейронные сети показывают отличный результат в ряде задач (CV/NLP/RL/GAN), что поспособствует развитию фреймворков tensorflow, keras, pytorch и т. п. Тем не менее, в ряде задач по прежнему превалируют традиционные ML-подходы и алгоритмы в силу меньших требований к вычислительным мощностям (для нейронных сетей чаще используют GPU) и объёму данных для обучения.\nОпыт работы со стеком технологий BigData\nЧаще всего, чтобы провести предварительный анализ, предобработку, обучение и тем более запуск самой модели, вычислительных мощностей одной машины не хватает, и весь пайплайн построения модели происходит на кластере с распределённым хранением и вычислением данных. В роли хранилищ могут выступать файловые системы (HDFS(Hadoop), Druid и пр.), NoSQL базы данных (Cassandra, MongoDB, CouchbaseDB и пр.), MPP базы данных (vertica, greenplum, clickhouse и пр.). Для анализа чаще всего используются Spark, HiveQL, либо другие внутренние фреймворки хранилищ. Более того, специалист должен уметь работать с технологиями, и понимать, как писать алгоритмы для распределённых вычислений, а также оценивать их ресурсоёмкость и эффективность.\nОбработка изображений и видеопотоков\nВ большом количестве областей используется анализ изображений и видеозаписей (медицина, сельское хозяйство, госслужба, автопилотирование, IoT и многое другое). Обработка такого рода данных требует специальных навыков: детектирование объектов, выделение границ, классификация, сегментация объектов. В качестве технологий могут использоваться OpenCV, DLIB, алгоритмы R-CNN, Fast R-CNN, Faster R-CNN, YOLO и др.\nПомимо этого, специалисту, который хочет оставаться в тренде, необходимо постоянно читать новую литературу и научные работы, иметь способность быстро погружаться в новую сферу, разбираться в терминологии, быть готовым начать заново проделанную работу, если не удалось достичь ожидаемого эффекта.\n16\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nМихаил Толмачев\n, \nSenior Manager в EPAM\nВажно учитывать потребности бизнеса, а бизнесу нужно то, что очень хорошо работает с высокой долей надёжности, т. е. даёт минимум 90–95 % точности.\nСейчас во всём мире тренд на Deep Learning, компьютерное зрение, нейросети. Нейросети можно использовать для предсказания спроса, рекомендации товара, персонализированного маркетинга. Однако, чтобы понять, как эти технологии работают, нужно иметь углублённые знания, быть Data Scientist. В отличие от Deep Learning, методы классического машинного обучения — матричного разложения, факторизационных машин — гораздо легче интерпретируются бизнесом, то есть с их помощью можно объяснить, почему те или иные товары были интересны, какие основные драйверы спроса. Также ограничения на интерпретируемость моделей бывает на законодательном уровне, например в фарме или банках.\nВ последнее время быстро развивается тренд на Generative Adversarial Networks (GANs). Эти алгоритмы позволяют на основании входящих данных генерировать новые данные, которые очень похожи на настоящие. Возьмём, например, картинку, где машина едет по пустыне, и картинку средней полосы России. Накладываем одно на другое, и вот уже машина едет по полю. Популярные приложения FaceApp и Prisma работают на данной технологии. Есть целый \nвеб-сайт\n, генерирующий лица людей, которые на самом деле не существуют, при этом выглядят они как настоящие.\nОдна из главных проблем Data Science — отсутствие достаточного количества данных для обучения, а с помощью GANs можно создавать больше данных и более точно обучать модели. Но пока эта область тяжела для применения в бизнесе. Чтобы это начало давать гарантированно хороший результат в реальной жизни, нужно провести больше академических исследований.\nСейчас также активно развивается направление Reinforcement Learning — обучение с подкреплением. Оно применяется в автопилотируемых автомобилях, интернет-рекламе. Потенциально подобную технологию можно внедрять, например, на нефтехимических заводах, в таком случае всё производство могло бы управляться без вмешательства людей с гораздо более высокой эффективностью.\nОсновным языком программирования по-прежнему является Python. Есть различные отклонения, как R, например, но он больше используется для академических исследований.\nТакже специалисту в области машинного обучения очень важно владеть навыками бизнес-аналитика, быть клиентоориентированным, понимать боль клиента. Нужно уметь доносить клиенту информацию о том, как работает ML, и что необязательно самая последняя модель нейросетей будет вести себя лучше, чем классические алгоритмы вроде линейной регрессии. Технологии — вторичны, специалисту нужно всегда сначала думать о бизнес-задаче.\n10\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n10\nПовысить\nПонизить\nАнтон Чан\n, \nIT-директор финтех-компании Cashwagon\nБлагодаря технологиям МО компании принимают лучшие решения в сфере риск-менеджмента. По данным \nIBM\n, к 2021 году бизнес не сможет принимать большинство важных решений без помощи искусственного интеллекта.\nData Scientist делает прогнозы о том, как будут развиваться события в будущем. Он решает такие задачи, как распознавание мошеннических транзакций, финансовые риски для компаний, возможные пути развития болезни и т. д. Также дата-аналитик создаёт предсказательные модели, которые строят прогнозы и помогают принимать полезное для бизнеса решение на основе полученных данных.\nДля этого аналитику данных важно обладать прочными знаниями математики и программирования. Стандартный набор необходимых навыков Data Scientist включает в себя:\nумение анализировать и моделировать данные при помощи высокоуровневого языка программирования Python 3;\nзнание дискретной математики, теории вероятностей и статистики;\nобладание такими базовыми инструментами, как Pandas, Numpy, SciPy, Scikit-learn (где особенно важно знать алгоритм классификации Logistic regression), Jupyter Notebook;\nумение работать с любой из библиотек бустинга: XGBoost, lightGBM, CatBoost;\nвладение базами данных SQL или NoSQL (важно не только понимать теорию, но и знать, как составлять сложные запросы);\nобладание инструментами визуализации данных: Matplotlib, Plotly, Brunel и т. д.;\nумение разворачивать готовые решения в виде сервисов (Flask, Django и т. д.), упакованных в Docker.\nСтоит отметить, что компании часто отдают предпочтение дипломированным дата-аналитикам.\nПомимо риск-менеджмента, Data Scientist работает с нейросетями для анализа текстов, изображений, звуковых и видеорядов, моделирования временных рядов.\nМы используем классический и альтернативный скоринг, например, для оценки кредитоспособности клиентов, а также нейросеть для работы с изображениями.\n17\nОтвет эксперта\n2019-12-16T19:03:54+03:00\n\nРейтинг полезности ответа: \n17\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, чего хотят от специалистов по машинному обучению?\nВ зависимости от решаемых задач и нужд бизнеса требования могут отличаться, но вот общие моменты:\nот кандидатов обычно ждут хорошую математическую базу — линейная алгебра, статистика, теория вероятностей, алгоритмы машинного обучения и всё такое;\nнередко нужно уметь подготавливать данные для дальнейшей работы;\nнужно знать язык программирования, обычно это Python, иногда R. Там, где нужен высокопроизводительный код, ждут знание C++;\nтакже от специалиста хотят, чтобы он был немного бизнес-аналитиком, понимал, как работает бизнес и чего хочет заказчик;\nиногда хотят, чтобы человек ещё умел и развернуть готовое решение в виде сервиса;\nсамо собой, ценится умение учиться, быстро во всё вникать и быть в курсе всего нового.\n100500\nЛучший ответ\n2019-12-16T19:03:54+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nМашинное обучение\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nИзучаем нейронные сети: с чего начать\nВ данной статье собраны материалы — в основном русскоязычные — для базового изучения искусственных нейронных сетей. \nИзучаем нейронные сети за четыре шага\nПрограмма минимум: что должен знать начинающий C# программист",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/iconfinder-icon-20-cover-icon-1.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Vadim-Jun_Crayon_2-e1576314959635-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/Sergej-Shirkin-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/19720_4a9acbd1_yj4iZb9d_1576484121-e1576489559190-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/10417_c70528ac_sy0YbStW_1575547091-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/28288_b49099c7_iTEXpZ00_1575452355-e1576328546227-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/46024_186ada37_wNUebEOn_1575295276-e1576332933530-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/512_509d4838_1IVuMrfb_1555075759-e1555869824376-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/14690_82e44f94_hjLtQdkQ_1574855321-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/40446_c3879a36_EFdaPADX_1574760151-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/Rustam_Salimzibarov-e1555221491838-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/1iTn0ir0fBY-e1573477470375-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Aleksandr-Efimov-rukovoditel-napravlenija-analitiki-SAS-RossijaSNG_2-e1576491982837-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Shishkanova-Ksenija-e1576492101836-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/IMG_3622-e1576492744722-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/73a9f6e9-95b1-409b-8d1f-fa7a2c3d6701-e1575028711507-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/machine-learning-crisis/",
                "title": "Кризис машинного обучения в научных исследованиях: обладает ли научной ценностью эксперимент, результаты которого не удалось воспроизвести?",
                "created_date": "15 декабря 2019 в 10:46",
                "body": "Перевод статьи \n«The Machine Learning Crisis in Scientific Research»\nДисклеймер\n Статья выражает личное мнение автора, основанное на приведённых в ссылках материалах. Это спорная область и конструктивное обсуждение приветствуется.\n***\nВ настоящее время в научных кругах назревает понимание кризиса воспроизводимости. Могу поспорить, что основным его источником является применение в научных целях техник машинного обучения.\nДженевьера Аллен\n, профессор статистики и электротехники в Университете Райса\nМашинное обучение всё больше вытесняет традиционно применяемые в научных исследованиях методы статистического анализа. Каковы будут последствия такого замещения для научного сообщества и процесса познания? Некоторые считают, что присущий машинному обучению «подход чёрной коробки» привёл к кризису воспроизводимости научных исследований. В конце концов, может ли эксперимент быть признан научным, если другие исследователи не могут получить тот же результат?\nПрим. перев.\n Автор статьи использует слово «подход», однако стоит отметить, что «чёрная коробка» — скорее побочный эффект. Никто не пытается намеренно скрыть алгоритмы машинного обучения, они прозрачны и поддаются анализу. Проблема состоит в том, что исследователи, применяющие МО в своих исследованиях, далеко не всегда хорошо знакомы с линейной алгеброй — основой алгоритмов. Вектор (для регрессии) или массив (для нейросетей) весов открыт для изучения, проблема состоит только в том, чтобы найти нужные данные среди множества других. Поэтому переводчик склонен был бы назвать подход «чёрной коробки» «эффектом Уолдо».\nМашинное обучение (МО) нашло применение в исследованиях всех областей науки и во многом заменило традиционную статистику. И хотя для анализа данных зачастую проще использовать именно МО, присущий этой технологии «подход чёрной коробки» вызывает серьёзные проблемы при интерпретации результатов.\nТермин «кризис воспроизводимости» означает, что тревожно большое количество результатов научных экспериментов не нашли своего подтверждения при проведении тех же манипуляций другими группами учёных. Это может означать, что результаты, полученные в ходе изначальных работ, ошибочны. Согласно данным одного анализа, до 85 % всех проведённых в мире исследовательских работ в области биомедицины не привели к значимым результатам.\nАдепты статистики и машинного обучения в научных кругах ведут нескончаемый горячий спор относительно кризиса воспроизводимости.\nКонференция MIELOCONF\n24 января, Москва, 10 000–17 000 ₽\ntproger.ru\nСобытия и курсы на tproger.ru\nОдин из исследователей ИИ, Али Рахими, \nназвал\n технологии машинного обучения разновидностью алхимии. Полный текст заявления можно прочитать в \nсоответствующей статье\n его блога.\nМашинное обучение отлично вписывается в научный процесс, что делает практически неизбежным использование этой технологии в исследовательской работе. МО можно рассматривать в качестве инженерной задачи — как сборочный конвейер с моделированием, настройкой параметров, подготовкой данных и оптимизацией компонентов. Цель машинного обучения — поиск оптимальных ответов или прогнозов, что в свою очередь входит в одну из задач исследовательского процесса.\nТипы и алгоритмы МО и сами могут стать предметом исследования. В научных источниках можно найти множество статей и материалов на тему методов машинного обучения, как раньше можно было найти работы по статистическим методам.\nВ феврале 2019 Дженевьера Аллен сделала \nтревожное заявление\n для Американской ассоциации содействия развитию науки: учёные, полагающиеся на машинное обучение, обнаруживают определённую систематику в данных, даже если алгоритм просто зацикливается на информационном шуме, который в ходе повторного эксперимента, как правило, не повторяется.\nУказанная проблема характерна для множества научных дисциплин, поскольку машинное обучение применяется в различных областях исследования, таких как астрономия, геномика, энвайроментология, здравоохранение.\nВ качестве яркого примера она ссылается на исследования в области геномики, в которых обычно обрабатываются датасеты размером в сотни гигабайт и даже несколько терабайт. Аллен утверждает, что когда учёные используют плохо изученные алгоритмы машинного обучения для кластеризации профилей генома, это зачастую ведёт к получению правдоподобно выглядящих, но невоспроизводимых результатов.\nПри этом другая группа исследователей, используя те же методы анализа, может получить значительно отличающиеся результаты, таким образом оспаривая и дискредитируя первоначальный эксперимент. Это может происходить по нескольким причинам:\nнедостаточное понимание алгоритма МО;\nнедостаточное знакомство с исходными данными;\nневерная интерпретация результатов.\nНедостаточное понимание алгоритма МО\nНедостаточное понимание алгоритма — очень распространённая проблема в машинном обучении. Если вы не знаете, как алгоритм выводит результат, как вы можете быть уверены, что он не «жульничает», выводя несуществующие корреляции между переменными?\nЭто серьёзная проблема при работе с нейросетями ввиду множества параметров (зачастую для глубоких нейросетей количество параметров может составлять миллионы). Помимо этих параметров надо принимать в расчёт и гиперпараметры — такие как скорость обучения, метод инициализации, количество итераций, архитектура нейросети.\nДля решения проблемы мало осознать, что исследователь недостаточно хорошо понимает работу алгоритма. Как можно сравнить результаты, если в разных работах применялись отличающиеся по структуре нейронные сети? Многослойная нейронная сеть имеет очень сложную динамическую структуру. Поэтому даже добавление единственной переменной или смена одного гиперпараметра может значительно повлиять на результаты.\nНедостаточное знакомство с исходными данными\nПлохое понимание исходных данных также является серьёзной проблемой, но эта проблема существовала и во время работы с традиционными статистическими методами. Ошибки в сборе данных — такие как ошибки квантования, неточности считывания и использование замещающих переменных — самые распространённые затруднения.\nСубоптимальные данные всегда будут проблемой, но понимать, какой алгоритм применить к какому типу данных — невероятно важно, это значительно повлияет на результат. Это можно продемонстрировать на примере простой регрессии.\nПри использовании линейной регрессии с бОльшим количеством параметров, чем точек данных (очень частая ситуация в геномике, поскольку имеется очень большое количество генов и довольно мало точек данных), выбор оптимизации параметров серьёзно повлияет на то, какие параметры будут определены в качестве «важных».\nПри использовании регрессии \nLASSO\n это приведёт к приближению переменных, определённых в качестве незначительных, к нулю. Тем самым будет проведён отбор переменных с исключением избыточных.\nГребневая регрессия\n сжимает названные параметры до пренебрегаемо малых величин, но не исключает их из набора.\nПри использовании \nэластичной сети\n (комбинации LASSO и гребневой регрессии), мы снова получим совсем другие результаты.\nЕсли мы не будем использовать регрессию, алгоритм очевидно будет страдать от переобучения, поскольку у нас будет больше переменных, чем точек данных, и алгоритм просто заполнит все точки данных.\nКонечно, для линейной регрессии можно выполнить статистические тесты, которые помогут установить точность в виде доверительных интервалов, p-тесты и тому подобное. Однако такая роскошь не доступна для нейронных сетей, поэтому можем ли мы быть уверены в выводах? Лучшее, что мы можем сделать — точно определить архитектуру и гиперпараметры модели и предоставить открытый исходный код, чтобы другие исследователи могли проанализировать модель и использовать её самостоятельно.\nНеверная интерпретация результатов\nОшибочная оценка результатов может быть весьма распространена в научном мире. Одна из причин — видимая корреляция не всегда отражает реальную взаимосвязь. Есть несколько причин, почему переменные А и B могут коррелировать:\nA может изменяться при изменении B;\nB может изменяться при изменении A;\nA и B могут изменяться при изменении \nобщей базовой\n переменной, C;\nкорреляция A и B может быть ложной.\nПродемонстрировать корреляцию двух значений легко, гораздо сложнее определить её причину. Погуглив «spurious correlations» (ложная корреляция), вы найдёте весьма интересные и забавные примеры, имеющие статистическое значение:\nВсё это может выглядеть забавными совпадениями, но смысл в том, что алгоритм машинного обучения, обработав эти переменные единым набором, воспримет их как взаимозависимые, не подвергая эту зависимость сомнению. То есть алгоритм будет неточным или ошибочным, поскольку ПО выделит в датасете паттерны, которых не существует в реальном мире.\nЭто примеры ложных корреляций, которые в последние годы опасно распространились в связи с использованием наборов данных из тысяч переменных.\nЕсли у нас есть тысяча переменных и миллионы точек данных, определённые корреляции неизбежны. Алгоритмы могут сконцентрироваться на этом и предположить причинно-следственную связь, невольно реализуя технику \np-hacking\n, не слишком одобряемую в академических кругах.\nЧто такое p-hacking\nСуть p-hacking’а состоит в дотошном поиске в наборе данных статистически значимых корреляций и принятии их за научно обоснованные.\nЧем больше у вас данных, тем вероятнее найти ложные корреляции двух переменных.\nОбычно научный подход последовательно включает формулирование гипотезы, сбор данных и анализ собранных данных для подтверждения обоснованности гипотезы. В процессе же p-hacking’а сначала проводится эксперимент, и по его результатам формируются гипотезы, объясняющие полученные данные. Иногда это делают без злого умысла, но временами учёные прибегают к такому методу только для того, чтобы получить возможность опубликовать больше материалов исследований.\nФорсирование корреляций\nЕщё одна проблема алгоритмов машинного обучения заключается в том, что алгоритм должен делать предположения. Алгоритм не может «ничего не найти». Это означает, что алгоритм либо найдёт способ интерпретировать данные независимо от того, насколько они соотносятся между собой, либо не придёт к какому-либо определённому заключению (обычно это означает, что алгоритм был неверно настроен или данные плохо подготовлены).\nВ настоящий момент автор не знает алгоритма машинного обучения, который мог бы прийти к заключению, что данные не подходят для того, чтобы делать обоснованные выводы. Предполагается, что это работа учёного.\nЗачем использовать машинное обучение?\nХороший вопрос. Машинное обучение упрощают анализ данных и алгоритмы МО делают за пользователя громадную работу. В тех областях, где учёные имеют дело с действительно большими объёмами данных, традиционные методы статистического анализа оказываются неэффективными и применение МО — единственный разумный способ обработки информации. Однако следует учитывать, что увеличение продуктивности работы за счёт ускорения анализа данных может быть скомпрометировано недостаточным качеством полученных прогнозов.\nЧто можно сделать?\nКонечно, не всё так трагично. Та же проблема всегда присутствовала при использовании традиционных статистических методов анализа. Она лишь усугубилась с появлением больших наборов данных и алгоритмов, которые находят корреляции автоматически и не настолько прозрачны, как стандартные методы. И это усиление выявило недостатки научного процесса, которые ещё предстоит преодолеть.\nВ то же время при разработке систем машинного обучения нового поколения предстоит проделать серьёзную работу, чтобы можно было точно определить достоверность и воспроизводимость результатов анализа.\nКак говорится, плох тот рабочий, что винит в неудаче инструмент, и учёным следует уделять больше внимания применяемым алгоритмам МО, чтобы удостовериться в обоснованности выводов их исследований. Институт рецензирования предназначен для отсеивания необоснованных научных работ, но это также и задача каждого отдельно взятого исследователя. Учёные должны знать принципы работы применяемых ими методов, чтобы понимать ограничения этих инструментов. Если их познаний в этой области недостаточно — возможно, стоит заглянуть на кафедру статистики.\nРахими (тот учёный, что считает МО разновидностью алхимии) предлагает несколько подходов, которые позволят определить, как и когда лучше всего применять определённый алгоритм. Он утверждает, что при выборе алгоритма следует проводить исследования абляции — последовательно удаляя параметры, чтобы определить их влияние на выбранную модель МО. Он также предлагает делать анализ срезов — изучая производительность алгоритма, чтобы определить, как улучшения в определённых областях могут отразиться на чём-то ещё. Наконец, он предлагает прогонять алгоритм на разных наборах гиперпараметров, анализируя производительность системы для каждого из них. Таким образом можно повысить уверенность в результатах прогнозов, полученных с помощью МО.\nИз-за природы научного процесса, если вышеописанные проблемы будут решены, ложные взаимоотношения, выведенные в результате исследований с применением машинного обучения будут выявлены и дискредитированы. Истинные же корреляции пройдут проверку временем.\nЗаключение\nМашинное обучение в науке представляет проблему из-за того, что результаты недостаточно воспроизводимы. Однако учёные в курсе этой проблемы и работают над моделями МО, дающими более воспроизводимый и прозрачный результат. Настоящий прорыв произойдёт, когда эта задача будет решена для нейросети.\nДженевьера Аллен подчёркивает фундаментальную проблему искусственного интеллекта: учёные до сих пор не понимают механизма машинного обучения. Научное сообщество должно направить согласованные усилия на изучение принципов работы этих алгоритмов и на определение того, как лучше использовать основанные на обработке данных методы для получения надёжных, воспроизводимых и научно обоснованных выводов.\nДаже Рахими, считающий МО алхимией, всё же признает его потенциал. Он отмечает, что алхимия породила металлургию, фармацевтику, технологии окраски тканей, современные процессы получения стекла. Но алхимики также верили в возможность трансмутации металлов в золото и в то, что пиявки — отличный способ для лечения заболеваний.\nКак сказал физик Ричард Фейнман в своей \nречи\n перед выпускниками Калифорнийского технологического института в 1974 году:\nПервый принцип [науки] заключается в том, чтобы не одурачить самого себя. И как раз себя-то одурачить проще всего.\nМатериалы по теме (на английском)\nThe scientific method in the science of machine learning\n.\nMachine learning is disrupting science research: Here’s how\n.\nImproving machine learning reproducibility in genetic association studies with proportional instance cross validation (PICV)\n.\nAI researchers allege that machine learning is alchemy\n.\nCan we trust scientific discoveries made using machine learning?\nMachine learning, and how it helps researchers make scientific discoveries much faster\n.\nPeople cause replication problems, not machine learning\n.\nMachine learning for science proving problematic\n.\nHow artificial intelligence Is changing science\n.\nMachine learning for science\n.\nHow AI, machine learning are advancing academic research\n.\nA quick response to Genevera Allen about Machine learning ‘causing science crisis’\n.\nMachine learning takes heat for science’s reproducibility crisis\n.\nНе смешно? А здесь смешно: \n@ithumor\nМашинное обучение\nТакже рекомендуем:\nИзучаем нейронные сети: с чего начать\nВ данной статье собраны материалы — в основном русскоязычные — для базового изучения искусственных нейронных сетей. \nИзучаем нейронные сети за четыре шага\nШпаргалка по разновидностям нейронных сетей. Часть первая. Элементарные конфигурации\nТест на знание алгоритмов",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/ml-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/editor_image-12.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/editor_image-2-1.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/editor_image-3-1.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/editor_image-4-1.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/problems/three-surgeons-and-two-pairs-of-gloves/",
                "title": "Три хирурга, больной и две пары перчаток — сможете помочь никому не заразиться?",
                "created_date": "14 декабря 2019 в 12:55",
                "body": "Трём хирургам необходимо друг за другом прооперировать в полевых условиях больного, страдающего заразным заболеванием. Сами хирурги тоже больны, причём разными болезнями. В распоряжении хирургов есть только две пары стерильных перчаток. Подскажите план операции, после которой ни хирурги, ни больной не заразятся друг от друга.\nПомогать друг другу во время операций хирурги не должны. Оперировать одной рукой нельзя.\nОтвет\nПервый хирург может надеть сразу две пары перчаток. Затем второй хирург наденет ту пару, которая была внешней во время первой операции. А третий хирург будет делать операцию опять в двух парах перчаток, причём внешняя останется внешней, а пара перчаток, бывшая во время первой операции внутренней, останется внутренней, но будет вывернута наизнанку.\nЗадачи умеренной сложности\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nНахождение максимума из двух чисел без условных операторов и операторов сравнения\nЗадача о самолете на ленте транспортера: взлетит или не взлетит?\nЛогическая задача про электрика и 49 кабелей",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/gloves-icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/interview/sergey-tsyptsyn-interview/",
                "title": "Интервью с организатором CG EVENT и автором «Понимая Maya» Сергеем Цыпцыным",
                "created_date": "12 декабря 2019 в 14:54",
                "body": "Сергей Цыпцын — организатор главного в СНГ события в области компьютерной графики «CG EVENT». Он культовая личность в русскоязычном CG-сообществе, автор книги «Понимая Maya» — одного из главных учебников по CG на русском языке. Сергей Цыпцын собрал вокруг себя огромное количество учеников и уже много лет в промежутках между сёрферскими сезонами делится с профессионалами компьютерной графики своим опытом и необычным взглядом на вещи. Недавно по приглашению CG-команды компании Wargaming (это те самые ребята, которые делают компьютерную графику в \nрекламе World of Tanks\n и рисуют целые \nCG-линкоры\n для группы Sabaton) Сергей побывал в Минске, где рассказал о трендах в развитии визуального контента. Также он дал небольшое интервью, в котором рассказал о карьере в компьютерной графике, организации крупнейшего в России отраслевого ивента и самых значимых для CG фильмах.\nПро старт карьеры в CG в 90-е\nЯ на самом деле поздно пришёл в компьютерную графику, в 30 лет. Это был 1996 год. Сначала я работал в традиционном IT — писал базы данных, работал в технической поддержке компании Steepler. Там был и программистом, и всеми, кем угодно. Но у компании Steepler было специальное подразделение, оно называлось Steepler Graphics Group. Они продавали Silicon Graphics — это были какие-то космические станции, всё было какое-то инопланетное. Я как-то раз к ним зашёл и подумал: «Ничего себе, вот это жизнь, вот это круто!». Так случилось, что в 1996 году они позвали меня на работу. Я стал заниматься техническим маркетингом — показывал Power Animator, потом Maya и другие безумные софты людям. Делал так, чтобы они захотели их купить. Это были и продажи, и маркетинг, и технические демо, и всё остальное.\nПро интерес к компьютерной графике\nВ общем-то в графику меня тянуло и раньше, ещё когда я в университете работал, мне нравилось визуализировать разные данные. Например, я писал траектории поражающих элементов на OpenGL. Интерес к отрасли возник у меня на фоне интереса к визуализации данных. Мне году в 1991 попалась на глаза книжка «Когнитивная графика». Там было как раз о том, что есть циферки, и надо сделать так, чтобы по этим циферкам человек получал какие-то полезные знания. Для этого предлагалось нарисовать смешные графики — их я и рисовал. А потом, в 1996 году, когда я пришёл в CG, стало можно рисовать уже всякие глупости, не только графики.\nЧайник из Юты: история эталонной 3D-модели\ntproger.ru\nПро физиков и лириков\nЛюдей, который умеют и программировать, и рисовать, не очень много, и они на вес золота. По моему мнению, художника ещё можно как-то научить программировать — это набор вменяемых скиллов, рано или поздно он преодолеет свои страхи и будет делать осмысленные вещи. А вот научить программиста рисовать — это сложнее. Там уже, по-моему, действуют какие-то генетические ограничения. Нет, конечно, можно его научить худо-бедно что-то изображать, но вот научить его рисовать по-настоящему не получится.\nПро секрет успеха CG Event\nЯ делаю ивент интуитивно. Секрет такой: заниматься тем, что тебе интересно.\nМы собираемся уже 13 лет — будет 29-й ивент. Да, это карма: мне когда-то сказали, что моё предназначение — собирать людей. Этим я, в общем-то, и занимаюсь. Я стал преподавать в 1999 году и понял, что моё предназначение — не пиксели красить, по темпераменту не подходит. А вот рассказывать об этом у меня получается хорошо, и людям нравится.\nВ целом CG Event — это плохой бизнес-проект, потому что он завязан на одного человека, на меня. Многочисленные консультанты говорят, что это уязвимый бизнес. Но как случилось — так случилось. Я долго преподавал, накопил большое количество учеников, потом написал книжку, она вышла в 2007 году, вокруг неё собралось определённое сообщество. Плюс я проводил с 1999 года семинары «Пользователи Maya», и они в итоге выросли в CG Event. Ну и до сих пор люди приходят на CG Event именно ко мне. Конечно, с точки зрения бизнеса это плохо, но мне приятно.\nЯ недавно оглянулся и понял, что конференция одна из самых старых, даже из IT-шных. А если рассматривать её как отраслевую конференцию, посвящённую именно CG, то это одно из крупнейших событий в мире. Так как это дело моей жизни, я продолжаю им заниматься. Это и хобби, и бизнес, и общение с друзьями — всё вместе, в одном флаконе.\nБыло много смешных попыток сделать какие-то альтернативы, но когда люди занимаются этим параллельно с какими-то проектами или для каких-то других целей, то, как правило, их хватает на раз или два.\nЯ делаю ивент интуитивно. Секрет такой: заниматься тем, что тебе интересно. Сейчас меня штырит от искусственного интеллекта, так у меня половина ивента про искусственный интеллект. На меня ворчат, пытаются как-то повлиять, но я всё равно буду этим заниматься, потому что это авторитарное и интуитивно построенное мероприятие. Если мне не будет интересно, то всё начнёт киснуть. Поэтому скажу так: строить сообщество важно и нужно, но конкретных советов я дать не могу.\nПро главное кино для развития CG\n«Парк Юрского периода», «Звёздные войны», второй «Терминатор». Из более современного — первые «Трансформеры» и «Особо опасен» Тимура Бекмамбетова.\nНе смешно? А здесь смешно: \n@ithumor\nКомпьютерная графика\nТакже рекомендуем:\nСоздание движка для 3D-рендеринга на Java\nСоздаем игровой движок с видом от первого лица за 265 строк кода на JavaScript\nБаг, который нельзя было исправить\nСистема из 8 миллионов частиц при 60 FPS",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/cg-icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/problems/family-on-a-bridge/",
                "title": "Семья на мосту — логическая задача про переправу",
                "created_date": "11 декабря 2019 в 18:16",
                "body": "Папа, мама, сын и бабушка ночью подошли к мосту, способному выдержать только двух человек одновременно. По мосту можно двигаться только с фонариком. Известно, что на переправу тратят:\nпапа — 1 минуту,\nмама — 2 минуты,\nсын — 5 минут,\nбабушка — 10 минут.\nФонарик у них один. Светить издали нельзя. Носить друг друга на руках тоже. Если по мосту идут двое, время перехода определяется более медлительным членом семьи.\nКак семье переправиться за 17 минут?\nОтвет\nПервыми переходят мама и папа (2 мин), папа возвращается (1 мин), переходят сын и бабушка (10 мин), мама возвращается (2 мин), переходят папа и мама (2 мин).\nЗадачи умеренной сложности\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nНахождение максимума из двух чисел без условных операторов и операторов сравнения\nЗадача о самолете на ленте транспортера: взлетит или не взлетит?\nЛогическая задача про электрика и 49 кабелей",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/bridge-icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/jfuture-2019-review/",
                "title": "Как мы на JFuture 2019 ходили: обзор большой JVM-конференции",
                "created_date": "10 декабря 2019 в 13:10",
                "body": "16 ноября в Минске прошла вторая по счёту конференция для всех адептов JVM-языков — \nJFuture 2019\n. Сотрудники редакции Tproger посетили её и приготовили обзор.\nМесто проведения и немного истории\nВ этом году JFuture прошла в VOKA Cinema by Silver Screen — одном из самых больших мультиплексов Минска. Такое неочевидное место выбрано не случайно: всё дело в самой концепции мероприятия.\nJFuture родилась из международной конференции Java Day, проводимой при поддержке Oracle во многих городах мира. Java Day проводилась на регулярной основе, но в один прекрасный момент организаторам наскучили серьёзные академические доклады о спецификациях, многопоточности и проблемах с памятью, и они захотели сделать что-то самобытное и живое. Так, на стыке JVM, науки и искусства родилась конференция JFuture. Впервые она прошла в 2018 году в одном из старейших театров Беларуси — Национальном Купаловском театре. И, конечно, логичным развитием места проведения стал теперь уже кинотеатр, причём самый технологичный из существующих в Минске.\nК тому же, где ещё вы сможете послушать лекции по Java с попкорном, в удобных креслах и на большом экране?\nОрганизация\nНа входе нас встретили дружелюбные волонтёры, которые рассказали о некоторых организационных моментах и ответили на вопросы. Уже потом мы выяснили, что за прошедшие сутки они спали всего пару часов.\nПроходы были узкими, но столпотворений не возникало благодаря грамотному расположению стендов с активностями и других важных точек. Более того, из-за камерности площадки в коридорах можно было запросто встретить кого-нибудь из спикеров и поговорить по душам, задать интересующие вопросы или просто вместе выпить кофе.\nДоклады\nС приветственным словом публику встретила главный организатор конференции Дарья Милько из SPACE_. Она поздравила участников с открытием и рассказала, как пройдёт мероприятие, а затем дала слово первому спикеру. Кстати, выступала Дарья, как и остальные спикеры, на английском.\nКонференция прошла в два потока, с полным списком докладов можно ознакомиться на странице \nJFuture\n. Мы расскажем только о тех выступлениях, которые смогли посетить.\nUncovering Project Amber\nОткрыла конференцию Мала Гупта, Developer Advocate из JetBrains, с докладом о \nпроекте Amber\n. Она начала своё выступление с введения в саму инициативу, её целях и методах улучшения Java. Затем спикер описала изменения, уже вошедшие в стандарт языка благодаря усилиям проекта: и вывод типов локальных переменных с помощью var, и switch-выражения, представленные в Java 13.\nMiddle/Senior Java разработчик\n«Юнитариус», Москва, от 140 000 до 230 000 ₽\ntproger.ru\nВакансии на tproger.ru\nПосле началось самое интересное — Мала рассказала о новых фичах и возможностях, которые только планируется внедрить в Java. Среди них:\nsealed типы и новое ключевое слово Record, позволяющее избавить разработчика от написания boilerplate-кода типа геттеров, сеттеров, методов \ntoString()\n и \nequals()\n;\nперечисления с внутренними переменными и даже generic-перечисления;\n«сопоставление с образцом» для упрощения языковых конструкций вида \nif (obj instanceof Obj) {...}\n;\nоднострочные методы с синтаксисом, заимствованным у лямбда-функций.\nВ заключении Мала сделала важный вывод: «Изменения постоянны — просто примите это». Ведь языки программирования, как и любые другие, постоянно видоизменяются и улучшаются под стать окружающему миру.\nПервый доклад задал тон всей конференции — все её участники настроились на изучение новых подходов, технологий и способов создавать более эффективные решения.\nEfficient web apps with Spring Boot 2\nСтефан Николл из Pivotal затронул очень болезненную для многих Java-разработчиков тему повышения производительности и скорости работы веб-приложений. Безусловно, оптимизировать можно очень долго: рефакторить код, находить узкие места в сетевой инфраструктуре и ускорять работу баз данных. Но так ли это нужно, если в большинстве случаев выигрыш в производительности не стоит всех затраченных на улучшение этой самой производительности средств? К такому выводу и пришёл спикер, представив публике быстрый и эффективный способ оптимизации с помощью \nProject Reactor\n. Это кроссплатформенный проект, предоставляющий API для работы с реактивными стримами.\nСтефан много кодил сам, попутно объясняя, что значит та или иная строчка кода, и показывал происходящие с приложением изменения в режиме реального времени с помощью софта для метрик Prometheus. В конце доклада ему удалось значительно уменьшить задержки в отдельных запросах и продемонстрировать полностью рабочий прототип приложения на Spring WebFlux. Конечно, не обошлось и без ограничений реактивного стека: например при использовании WebFlux все микросервисы и драйверы должны быть реактивными. Это значит, что вы не сможете пользоваться Spring Data JDBC или JPA.\nJVMs in Containers: Best Practices\nСледующий посещённый нами доклад дал качественную вводную о лучших практиках работы с проектами на JVM-платформе в контейнерах.\nНесмотря на хардкорную техническую составляющую большинства докладов, спикеры держались непринуждённо и старались стать ближе к аудитории. Вот Дэвид Делабассе из Oracle и начал выступление с дисклеймера: разработчик не преминул пожаловаться на клавиатуру новых MacBook — в ней то и дело залипали клавиши. Когда все отшутились и посетовали на проблемные лэптопы, спикер рассказал о разнице между контейнерами и виртуальными машинами:\nКогда с ликбезом было покончено, началась самая интересная часть выступления — живой кодинг. Дэвид начал со сборки контейнера с банальным «Hello, world», однако тут же возникла неожиданность — образ «весил» больше 300 Мбайт.\n\nКонечно, сделано это было не просто так. Спикер показал зрителям, как с помощью нехитрых манипуляций с рабочей версией JDK и флагами сборки Docker-файла получилось уменьшить размер более, чем в 15 раз — до 17 Мбайт!\nВ конце выступления спикер отметил, что для работы с контейнерами и JVM определённо больше подходят дистрибутивы Linux или MacOS. Кроме того, он остановился на преимуществах \nGraalVM\n, который упрощает и ускоряет сборку проектов.\nЗачем и как использовать контейнеры: разбираемся с Docker, Kubernetes и другими инструментами\ntproger.ru\nThe State Of Reactive Streams\nОлег Докука, евангелист реактивных стримов, провёл экскурсию в историю реактивного программирования: от зарождения концепции в 1970-х годах в работах сотрудников Microsoft до настоящего времени.\nДоклад был насыщен примерами кода и интересными визуализациями, с помощью которых можно было проследить за развитием различных подходов к обработке потоков данных.\nКроме насыщенной программы и харизматичного докладчика внимание цеплял ещё и рисованный гусь, который «жил» на просторах презентации:\nБлагодаря юмористическим вставкам и миниатюрам с его участием информация воспринималась намного проще.\nLive Coding Music 101\nЗаключительным стало выступление Петра Ягельского из TouK. Он показал, как с помощью вашего любимого языка программирования и MIDI-контроллера можно играть настоящую электронную музыку. И не просто показал, а сыграл несколько электронных композиций «на лету».\nПётр рассказал о самой концепции Live Coding Music и ударился в технические детали синтеза звуков с помощью цифровых сигналов и специализированного ПО. Кроме того, спикер подсказал ресурсы, на которых можно найти бесплатные музыкальные сэмплы.\nВыступление отчасти смазала общая возбуждённость аудитории — после финального доклада организаторы пообещали разыграть призы — и заметное волнение спикера. Однако это не помешало послушать электронную музыку и узнать о таком необычном направлении.\nДругие активности\nКонечно, что за конференция без стендов с партнёрами и клёвыми ништяками?\nНа площадке JFuture расположились минские и международные компании Kyriba, Playtika, ISsoft, EIS Group и JetBrains. Их представители были готовы пообщаться и позадавать интересные вопросы и задачки, за решение которых можно было получить приятные подарки. Например термокружки, фрисби, йо-йо и наборы значков. И, конечно, тонны стикеров для лэптопа (кажется, скоро придётся завести специальный альбом для них, потому что место на крышке стремительно заканчивается). А Kyriba даже разработала онлайн-квест с вопросами по разным сферам IT, алгоритмам и языкам программирования. За победу в нём можно было выиграть футболку и принять участие в розыгрыше.\nКроме технических задачек Playtika, Kyriba и ISSoft запустили розыгрыш ценных призов, который шёл в течение всего дня. Для участия нужно было либо просто оставить свои данные, либо, в случае с Kyriba, заработать определённое количество баллов в онлайн-квесте.\n\nПризы были действительно стоящими: PS4 Pro, SSD на 1 Тбайт и автономный робот.\nЗаключение\nОрганизаторам из SPACE_ удалось выйти на уровень топовых международных конференций и привезти в Минск действительно интересных и выдающихся спикеров. Кроме всего прочего, плюсом конференции стала её камерность, за счёт чего все участники могли свободно пообщаться и поговорить о наболевшем со специалистами в непринуждённой обстановке.\nКонференции и митапы — это всегда отличная возможность быть в курсе того, чем живёт IT-сообщество, узнать о новых техниках и практиках, а также завести новых знакомых и партнёров. Тем более когда в ваш город приезжают именитые разработчики и евангелисты технологий со всего мира.\nКстати, участие в IT-мероприятиях — это плюс не только для вас, но и для вашего начальства. Ведь специалист, который развивается и живёт, постоянно обучаясь, всегда на хорошем счету. Следите за нашими анонсами в \nразделе событий\n и приобщайтесь к международному сообществу программистов!\nНе смешно? А здесь смешно: \n@ithumor\nJava\n, \nВеб-разработка\n, \nРеактивное программирование\nТакже рекомендуем:\nБесплатные материалы для программистов\nКак работает CSS Flexbox: наглядное введение в систему компоновки элементов на веб-странице\nПростыми словами о «фронтенде» и «бэкенде»: что это такое и как они взаимодействуют\nПодборка шпаргалок для программистов",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/IMG_20191209_210818_099-02-880x308.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1677px\" viewBox=\"0 0 1677 1118\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/76688974_468414394025060_3413123189151105024_o.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1677px\" viewBox=\"0 0 1677 1118\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/76702425_468414757358357_1566618720267141120_o.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"960px\" viewBox=\"0 0 960 720\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/76695232_463551941177972_3306728370963742720_n.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"960px\" viewBox=\"0 0 960 720\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/74318416_463633437836489_3929858237905502208_n.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 960\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/02DB66F8-0AAF-46F5-8837-F3B456C8ADA1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 960\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/B42BAE64-55DF-4A2A-BFF9-CCEEE6B7C509.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"960px\" viewBox=\"0 0 960 720\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/74209224_463838104482689_2264577165297188864_n.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1677px\" viewBox=\"0 0 1677 1118\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/74643706_468414577358375_8801586053451350016_o.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/impressive-pop-science-books/",
                "title": "Какие научно-популярные книги стоит почитать?",
                "created_date": "9 декабря 2019 в 13:08",
                "body": "Читать техническую литературу, безусловно, нужно, но иногда хочется немного отдохнуть. Научпоп позволяет одновременно расслабиться и получить полезную информацию, а потому становится всё популярнее. Какие научно-популярные книги стоит прочитать? Спросили у экспертов.\nИнна Анисимова\n, \nгенеральный директор PR Partner\nВо-первых, это книга научного журналиста Аси Казанцевой «Мозг материален». Всем полезно узнать своего главного друга и врага. Изучение информации о мозге даёт удовлетворение и более глубокое понимание себя. Ася упаковывает серьёзные научные факты среди тестов, упоминаний о популярной культуре — не оторваться.\nВо-вторых, «Краткая история человечества», автор — Юваль Харари. Многие «подсели» на эту книгу благодаря сочетанию естественнонаучного и исторического подходов. Она даёт то, что упускает наше образование — целостный подход, систематизацию и прогноз для человечества.\n10\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n10\nПовысить\nПонизить\nАндрей Черабаев\n, \nразработчик в Mediasoft\nХороших и интересных научно-популярных книг на самом деле тьма, просто мы мало о них слышим. Лично я могу выделить несколько из них, разной степени научности и популярности. Начну, пожалуй, с тех книг, которые будут ближе инженерам и программистам.\nТим Ву,  «Главный рубильник. Расцвет и гибель информационных империй от радио до интернета»\nМы знаем, что телеграф вытеснил в своё время почту, радио в области распространения информации победило газеты и телеграф, телевидение стало дико популярным, а интернет смог оторвать людей от телевизора. Но какие интриги, стычки лоббистов и проплаченные законодательные запреты стояли за всем этим — это отдельная история, которую Тим Ву рассказывает в формате шпионско-детективного романа. Корпоративные войны масштабов классики киберпанка. Благодаря этой книге я наконец-то смог понять, почему качество и скорость интернет-связи в Штатах худшее в мире (среди стран, где вообще есть доступный интернет).\nАлчность, подкупы, игра на чувствах избирателей и потребителей, махинации и жульничество, поглощения и слияния компаний, единственная цель которых задавить конкурентов, — в общем, рекомендую.\nСтанислав Лем, «Сумма технологии»\nВеликий польский фантаст завоевал моё подростковое сердце своими книгами о приключениях Ийона Тихого. А потом разнёс мне мозг своим футурологическим трактатом о том, куда в ближайшие сто лет может зайти развитие технологий.\nВ 1963 году Станислав Лем опубликовал огромный труд, где постарался разобраться в вопросах возможности предсказания будущего и возможных путях развития технологической цивилизации.\nМне больше всего запомнились главы об Интеллектронике и Фантомологии. Здесь стоит сделать ремарку — из-за того, что эта книга писалась в шестидесятых годах, большую часть терминов для описания грядущих технологий пришлось выдумывать. А поскольку автор поляк — придется смириться, что не все термины похожи на современные.\nЧасть предсказанного в «Сумме технологии» так и остается чем-то из области научной фантастики — а что-то давным-давно есть в нашей жизни. Сбывшиеся идеи о телекоммуникация и технологиях — что может быть лучше?\nДальше расскажу о научпопе, который мне запомнился.\nАся Казанцева,\n«Кто бы мог подумать! \nКак мозг заставляет нас делать глупости»\nВам никогда не объясняли работу наркотиков на примере ослика и морковки? Добро пожаловать! Дипломированный биолог объясняет процессы в мозге, работу инстинктов и биохимию зависимости так, что даже человек с тройкой по биологии (например я) поймёт это с ходу. Одно только объяснение того, почему человек во время влюбленности превращается в малиновый сироп, гораздо интереснее, чем рассказ про пестики и тычинки.\nХорошая подача материала, красочные примеры, и чувство юмора, которое пришлось мне по вкусу. В общем, «Легкий способ бросить курить» ни разу не лёгкий, и Ася Казанцева объясняет почему.\nАлександр Панчин, «Сумма биотехнологии. Руководство по борьбе с мифами о генетической модификации»\n«ГМО создано инопланетным искусственным интеллектом, чтобы нас уничтожить — и другие мифы и легенды современного общества». Это если совсем коротко описать эту книгу. Прекрасный труд от биоинженера Александра Панчина о том, как на самом деле работает генетика.\nКрайне полезна тем, кто понимает, что истерия вокруг ГМО зашла слишком далеко, но не может понять, почему именно и как с этим бороться. Книгу в руки и набирать аргументы против утверждений типа «только ГМО-продукты содержат гены» (77 % опрошенных считают именно так).\nЧто такое генная инженерия, как работает ДНК — доступным, но не примитивным языком (про тройку по биологии помним?). Манера повествования похожа на предыдущую книгу, так что за пару-тройку вечеров вы наконец-то сможете разобраться: почему ваш сын всё-таки не от соседа, почему натуральное — не всегда лучшее, кто такие химеры и как составить договор о ненападении с ГМО-помидорами в вашем холодильнике. \n16\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nЮрий Великий\n, \nбэкенд-разработчик X5 Retail Group\nНачну с наиболее нашумевших книг: \nД\nаниэль Канеман, «Думай медленно, решай быстро»\n. Лауреат Нобелевской премии Даниэль Канеман объясняет, как наш мозг воспринимает информацию и почему мы так часто ошибаемся при оценке каких-либо фактов. Человек подвержен когнитивным иллюзиям: плохо воспринимает большие числа, испытывает трудности с оценкой вероятностей, преувеличивает роль прошлого опыта и недооценивает роль случая. Многие люди понимают, что их шансы выиграть в лотерею ничтожно малы, но всё равно покупают лотерейные билеты. Многие боятся летать на самолёте, хотя знают, что процент автомобильных аварий намного выше. Сам Канеман считает, что его книга будет полезна «у офисного кулера, где болтают и обмениваются новостями», но это, конечно, самоирония. На самом деле книга содержит много важной информации для правильной оценки рисков и даёт понимание, как работать со своей интуицией (спойлер — в некоторых ситуациях она способна творить чудеса).\nМаксим Дорофеев, «Джедайские техники»\n. В книге рассказывается об ошибках, из-за которых мы работаем неэффективно: бесконечно откладываем сложные задачи, не можем довести дело до конца, тратим умственные ресурсы впустую или перенапрягаемся. В качестве решения в книге даются проверенные практики по организации рабочего процесса: как формулировать задачи, составлять списки дел и проектов, хранить информацию на внешних носителях, чередовать работу и отдых. Мне книга помогла научиться сортировке задач с точки зрения их срочности. Автор книги долго работал в IT, он хорошо знаком с процессами разработки и объёмами работы в этой сфере, поэтому книга будет однозначно полезна программистам.\nБарбара Оакли, «Думай как математик. Как решать любые задачи быстрее и эффективнее»\n.Книга охватывает широкий круг вопросов, связанных с обучением. Все люди разные: кто-то более усидчивый, кто-то более рассеянный, и для каждого типа нужен свой метод обучения и работы. В книге популярно объясняется так называемый метод помидора: заводить таймер на определённый отрезок времени и работать до звонка, ни на что не отвлекаясь. Я использую этот метод при чтении книг по программированию. Как это работает: задача осилить книгу на 600 страниц, полную терминологии и сложных взаимосвязей, кажется неподъёмной, но вы говорите себе — я почитаю её ровно 45 минут и отложу в сторону. Это уже не выглядит таким страшным, и вы спокойно берётесь за работу. Оакли рекомендует начинать с интервалов по 20–40 минут в зависимости от сложности задачи и постепенно увеличивать их. Я в данный момент использую интервалы по 90–120 минут.\nЮваль Ной Харари, «Sapiens. Краткая история человечества»\n.Необычный взгляд на историю Человека Разумного, начиная от когнитивной революции, случившейся 70 тысяч лет назад, до наших дней. Многие вопросы, к которым мы привыкли относиться однозначно, в книге раскрываются с неожиданной стороны. Например принято считать, что переход от кочевого образа жизни к осёдлому и развитие земледелия — это большой шаг вперёд для нашей цивилизации. Но Харари замечает, что из-за осёдлости человек поставил себя в зависимость от погодных условий и одного вида пищи («не человек приручил пшеницу, а пшеница — человека»). У этой книги есть продолжение — «\nHomo Deus: Краткая история будущего\n», в которой Харари пытается ответить на вопрос, что будет с человечеством, которое уже удовлетворило базовые потребности в пище и безопасности и теперь ищет бессмертия и счастья. Обе книги интересны нестандартностью подхода к привычным вещам и учат искать скрытые причинно-следственные связи. \n8\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nАнтонина Андрюшина\n, \nбизнес-аналитик Orange Business Services Россия и СНГ\nСтивен Хокинг, «Краткая история времени. От большого взрыва до черных дыр»\n. Когда читаешь книгу, написанную одним из величайших людей на планете, испытываешь невероятные эмоции. Вообще «Краткая история времени» отлично подойдёт тем, кто всю жизнь боялся физики, и условно делил науки на «лёгкие» и «сложные». Но один из талантов Хокинга — умение доступно объяснять даже такие сложные вещи, как эффект Доплера. Честно признаюсь, мне всё равно приходилось делать закладки в тех местах, где Хокинг объясняет теории или какие-то физические принципы, чтобы потом возвращаться к ним и перечитывать — просто невозможно держать всю эту информацию в голове. Но всё равно это самое понятное и интересное изложение темы, из всех, что я встречала. А сразу после прочтения хочется подписаться на аккаунты NASA, QWERTY, «Роскосмоса» и пересмотреть «Интерстеллар» с «Гравитацией».\nДжаред Даймонд, «Ружья, микробы и сталь: история человеческих сообществ»\n. Эта книга — отличное средство против ошибочного предположения, что европейские народы в интеллектуальном смысле якобы превосходят другие расы: иначе почему, когда в Европе уже изобрели порох и стали строить корабли, на островах продолжали ловить рыбу сетью? Почему сегодня в Африке столько проблем? Даймонд отлично объясняет почему. Автор понятно и аргументировано рассказывает, как Европа заняла лидерские позиции в развитии мира. Спойлер: причины, конечно, заключаются не в расовых различиях, а, в первую очередь, в географических и климатических факторах. Интересно, что Даймонд рассматривает не только развитие промышленности, сельского хозяйства и технологий, но и культуры, языка, письменности и государственности.\nДжонатан Смит, «Псевдонаука и паранормальные явления. Критический взгляд»\n. Книгу рекомендую к прочтению всем, кто хочет развить в себе критический взгляд на мир и сохранить ясность ума. Сегодня многие люди, даже имея высшее образование и работая в научной или технологической сфере, всё равно подвержены влиянию окружения, увлекающегося астрологией, гаданием, аяуаской и т. д. Джонатан Смит последовательно подводит читателя к мысли, что в реальности ещё ни разу не было проведено ни одного научного эксперимента, который доказал бы существование паранормальных явлений любого вида. Лично мне особенно понравилось, как в книге доказывается полная несостоятельность астрологии, очень популярной сегодня области. Если коротко, то книга Джонатана Смита — это книга о здравом смысле, которую не помешало бы прочитать каждому взрослому человеку.\nРичард Шеперд, «Неестественные причины. Записки судмедэксперта: громкие убийства, ужасающие теракты и запутанные дела»\n. Автор не просто излагает медицинские факты или перечисляет самые сложные кейсы в своей практике, но проводит читателя через историю своей жизни. В итоге, читая книгу, видишь автора не только как судмедэксперта, но как мужа, отца и просто живого человека. Шеперд не боится поднимать этические дилеммы. Например задаётся вопросом, стоит ли озвучивать объективные факты, если они помогут снять обвинения с явно виновного человека? Отмечу, что автор описывает профессию в целом, но не слишком погружается в технические детали: как определяют причину смерти, чем патологоанатом отличается от судмедэксперта и почему сегодня вскрытие проводят почти всегда. Если интересны такие вопросы, рекомендую прочитать книгу Алексея Решетуна «Вскрытие покажет. Записки увлечённого судмедэксперта». \n22\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n22\nПовысить\nПонизить\nАлексей Королюк\n, \nгенеральный директор хостинг-провайдера REG.RU\nВ наш век непрерывного развития технологий, 10 лет — довольно большой срок не только для прогрессирующих наук, но и для всего общества в целом. Просто сравните жизнь сейчас и в 2009 году — тогда нас можно было удивить новыми iPhone, а теперь они кажутся совершенно обыденными. Современная жизнь — это непрерывное обучение: даже если вы не читаете десяток умных книг в год, вы всё равно постоянно поглощаете новую информацию из множества источников: соцсетей, СМИ, блогов и других ресурсов. С каждой порцией знаний личность трансформируется и адаптируется к новому окружению. Что касается научно-популярных книг, то в них мы получаем ключевое удовольствие от актуальности данных, которые нам преподносят. Читая их, мы осознаём, что всё это происходит прямо сейчас, и эти знания меняют если не нашу жизнь, то по крайней мере наш взгляд на окружающий мир. Среди произведений, авторов и серий научно-популярных книг я бы выделил:\nВсе без исключения книги Юваля Ноя Харари: «Sapiens. Краткая история человечества», «Homo Deus. Краткая история будущего», «21 урок для XXI века»: о развитии и о будущем человечества. Мысли и идеи Харари, возможно, не заставят вас резко поменять взгляды на мир, но точно натолкнут на множество обсуждений, предположений и дискуссий.\nСерия «The Big Idea»\n: о наиболее актуальных современных течениях и их влиянии на нашу жизнь. Среди них каждый может найти что-то интересное и полезное для себя, раскрыть новые аспекты современности. Книги рассказывают об искусственном интеллекте, медицине, капитализме и гендерных течениях.\n«Шифропанки. Свобода и будущее Интернета», Д. Ассанж, Э. Мюллер-Магун, Д. Аппельбаум, Ж. Циммерман: о борьбе за свободу обмена информацией в Сети. Будет полезно всем, кто интересуется приватностью данных и слышал о проекте WikiLeaks.\n«История Бога. 4000 лет исканий в иудаизме, христианстве и исламе», К. Армстронг: о развитии и влиянии друг на друга единобожных религий. Непредвзятый взгляд на историю, написанный доступным и интересным языком.\n«НейроМаркетинг. Как влиять на подсознание потребителя», Р. Дули: о применении нейронауки к маркетингу и продажам. Можно почерпнуть практические советы для самых разных областей: от деловых коммуникаций до брендинга. Это «маст рид» для владельцев бизнеса.\n11\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nЛеонид Казарцев\n, \nруководитель центра разработки ПО компании «Рексофт» в Воронеже\nПервая книга — «Краткая история времени», написанная человеком-легендой, английским физиком-теоретиком, космологом, исследователем проблемы «чёрных дыр» — Стивеном Хокингом. Автор был прикован к инвалидному креслу, но это не сломило его, а, напротив, воодушевило стать не просто учёным, а популяризатором принципов мироздания. В книге рассматриваются вопросы появления Вселенной, природа пространства и времени, теория «чёрных дыр» и суперструн. Вы не найдете здесь формул, кроме известной всем со школьных времен E=mc^2. Однако при всей лёгкости изложения и простоте языка каждый тезис приходится обдумывать из-за того, что автор поднимает действительно глобальные проблемы на уровне, а может ли человек помыслить «Божественный Замысел». Ведь вселенная бесконечна и сложна, и трудно осознать даже небольшую часть происходящих в ней процессов. Я прочитал книгу с упоением. Она о нас и о мире вокруг как материи. Книга 237 недель оставалась в списке бестселлеров лондонской The Sunday Times. Каждый 750-й житель нашей планеты приобрёл её.\nВторая книга — «Мы это наш мозг. От матки до Альцгеймера». Автор — всемирно известный голландский врач и нейробиолог, профессор Университета Амстердама Дик Свааб. В своей книге он дал научное объяснение, как развивается наш мозг от ранних внутриутробных этапов до последних минут жизни. В том числе автор затрагивает вопросы формирования в человеке его сексуальной ориентации. Например в книге самым популярным языком рассматривается теория о том, как человек может родиться транссексуалом. По его предположению пол человека определяется в первые несколько недель развития плода, причём на это влияет гормональное состояние матери. Также в книге поднимаются вопросы формирования болезней, происхождение состояния эйфории, устройства человеческой памяти и ещё много всего интересного. Свааб рассматривает мозг в самом широком контексте: историческом, культурном, библейском, медицинском, психологическом, социологическом, антропологическом. По факту, это действительно впечатляет, когда ты понимаешь, как работает твой мозг изнутри. Ведь для большинства из нас — это тайна за семью печатями. \n16\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nАлександр Груздев\n, \nJava Team Lead в DINS\nПоследнее время я уделял книгам на пересечении математики/экономики и психологии. Наиболее запомнились мне 2 книги. Обе они чем-то похожи, но стиль изложения совершенно разный.\nДаниэль Канеман, «Думай медленно, решай быстро» \nКнига про то, как часто мы принимаем решения нерационально, следуя общественным заблуждениям и стереотипам. С каждой прочитанной главой я доставал из памяти и анализировал всё больше ситуаций, когда не стоило отвечать моментально, а стоило взять паузу и воспользоваться так называемой Системой 2, под которой автор подразумевает более медленную и рациональную часть мышления человека.\nС первого взгляда может показаться, что такая литература больше про психологию и не стоит внимания среднестатистического айтишника. Но я бы поспорил, так как каждый день мы принимаем огромное количество решений и необходимо трезво оценивать свои способности. Часто, действуя только по интуиции, мы делаем большие ошибки, например в эстимациях, в выбранных технологиях или даже в выборе людей в команду. Поэтому полезно понимать, откуда в нашем подсознании берутся образы хорошего программиста или тестировщика, и какова вероятность того, что, следуя таким стереотипам, мы получим совсем не то, что желаем. Не сказал бы, что книга читается очень легко, так как достаточно много моментов, что заставляют мозг включаться на полную. Поэтому я уже несколько раз перечитывал эту книгу и каждый раз находил что-то новое.\nЕсли же эта книга вам не «зайдёт», могу посоветовать другую книгу, но уже не так сильно затрагивающую научные изыскания и статистические данные.\nМаксим Дорофеев, «Джедайские техники» \nОна больше об организации рабочего процесса и в некоторой степени о прокрастинации. Включает в себя краткие выводы, сделанные на основе множества других прочитанных книг, например той, что я советовал выше. Автор доходчивым языком объясняет наше поведение и советует, как избежать нерациональных поступков. \n11\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n11\n\n \nПовысить\nПонизить\nАлла Груздкова\n, \nруководитель команды Delivery excellence Технологического центра Accenture в Твери\nСамое замечательное за последнее десятилетие — это мода на чтение. Классные книги издаются, а книжное блогерство стало новым мейнстримом. В такой ситуации сложно дать уникальную рекомендацию. Всё зависит от вкуса и интересов. Я стараюсь читать книги разных направлений — бизнес-литература, художественная, научно-популярная. Во всех жанрах нахожу вдохновляющие идеи. Если ограничимся только научно-популярными книгами, выделю те, что мне запомнились.\nКлаус Шваб, «Четвертая промышленная революция»\nАвтор книги, основатель и президент Всемирного экономического форума, кратко рассказывает об истории промышленных революций, даёт обзор современной ситуации в экономике и бизнесе, рассуждает о том, какие изменения и открытия нас ждут в ближайшем будущем. К слову, часть прогнозов становятся реальностью на глазах. А сколько классных возможностей впереди — новые материалы, медицинские открытия, «умные» города и дома, сотрудничество людей и машин.\nТим Браун, «Дизайн-мышление в бизнесе»\nЭто скорее бизнес-книга, которую полезно прочитать тем, кто не знаком с идеей дизайн-мышления. Принципы и процессы дизайна применимы в любой сфере бизнеса. Видеть и понимать потребность, исследовать, экспериментировать, создавать модели и прототипы, рассказывать истории. Кстати, концепция дизайн-мышления отлично сочетается с Agile-методами работы.\nМитио Каку, «Будущее разума»\nКнига американского физика о головном мозге, разуме и сознании. По сути, состоит из двух частей. В первой описывается устройство мозга, процессы и особенности мышления. Во второй части начинается самое захватывающее — полет фантазии автора о возможностях мозга и их развитии. Телекинез, телепатия, брейн-нет — скучно не будет.\n16\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nЕлена Соловьева\n, \nДиректор по внешнему маркетингу в Tandem Group\nНаибольшее впечатление на меня произвела книга Фила Бардена «Взлом маркетинга». Книга основана на множестве научных исследований, социальных и поведенческих экспериментах, что не оставляет сомнений в достоверности приведённых данных. Она посвящена всем специалистам маркетинга, которым интересно погрузиться в научно обоснованные поведенческие аспекты поведения потребителя. В книге вы найдёте не только колоссальное количество примеров, исследований и научных данных по когнитивным особенностям аудитории, но и «перевод» на маркетинговый язык всех полученных выводов. Другими словами, вы не только получите огромный объём научных знаний, но и прикладные инструменты по тому, как эффективно разговаривать с потребителем и как выстраивать позиционирование товара и бренда. В этой книге «плотность» полезной и ценной информации выше, чем в десятках других прочитанных мною книг. Рекомендую!\n7\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n7\nПовысить\nПонизить\nАлександр Голышко\n, \nсистемный аналитик управления системной архитектуры компании «Техносерв»\nНаибольшее впечатление за последние 10 лет произвели эти книги:\nХокинг C., «Краткая история времени: от большого взрыва до черных дыр».\nНикола Тесла, «Откровения Николы Теслы».\nМенский М. Б., «Человек и Квантовый мир».\nСюгру Т., «Река жизни» (это про Эдгара Кейси).\nЛьюис К. С., «Просто христианство».\nУилкок Д., «Кили и физика вибрации».\nНесмотря на значительные успехи в познании мира, мы о нём знаем не так много. После прочтения упомянутых книг становятся наиболее доступны и понятны законы окружающего мира. Ведь его познание находится в непрерывной динамике. С другой стороны, в концепции физического мироустройства приходится вводить много постулатов и аксиом (например если немного изменить физические константы, то нашего мира могло и не быть). Мы не знаем, что происходит в точке сингулярности в момент Большого Взрыва или в чёрной дыре. Не имеем представления о том, что находится за границей событий в условиях ускоренного расширения Вселенной, свет из-за которой до нас попросту не доходит. Нам не удалось создать квантовую теорию относительности или единую теорию поля, хотя есть понимание, что общая теория относительности и квантовая механика, которые используются нами, к сожалению, несовместимы и, значит, не могут быть одновременно правильными. Серьёзные рассуждения о флуктуациях вакуума, в результате которых из ниоткуда появляются микрочастицы, считающиеся переносчиками взаимодействий, напоминают споры средневековых теологов на нематериальные темы. Или предполагают наличие энергетической среды (не вакуума), которая ответственна за всё происходящее. Совсем недавно появилось мнение о наличии тёмной материи и энергии, которые входят в состав Вселенной и наполняют её на 95 %. Главное открытие для человечества в XXI веке заключается в том, что мы живём не в центре Вселенной и состоим не из того вещества, из которого сделана эта Вселенная. В любой момент в наших представлениях она может оказаться совершенно другой в деталях. На сегодняшний день человечество не понимает устройство мира и цель своего существования. Мы не умеем пользоваться доступными инструментами, а видим в окружающей экосистеме собственность и, параллельно, при помощи различных технологий, создаём всё, что изначально создано природой. Все эти размышления крайне интересны и отнюдь не закончены. Предполагаю, что всё впереди. Поэтому, скорее всего, я тоже напишу об этом книгу.\n8\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nСофья Свердлова\n, \nPR-менеджер агентства ArtPlayGroup\nСерия книг «Сенсация в медицине», в которую входят на данный момент следующие: «Тук-тук, сердце! Как подружиться с самым неутомимым органом и что будет, если этого не сделать», «Viva la vagina. Хватит замалчивать скрытые возможности органа, который не принято называть», «Что скрывает кожа. 2 квадратных метра, которые диктуют, как нам жить», «280 дней до вашего рождения. Репортаж о том, что вы забыли, находясь в эпицентре событий» и «Очаровательный кишечник. Как самый могущественный орган управляет нами». Вряд ли скажу что-то новое, но всё-таки: медицинский научпоп открывает тебе огромный мир внутри тебя и это невероятно. В нашей стране есть культура «нездоровья»: люди мало знают о своём организме, идут в больницу только когда «топор в спине мешает спать», не следят за количеством потребляемой воды, плохо питаются и искренне верят в гомеопатию. И это увлекательное чтение — отличный способ закрыть порочный круг невежества. Все книги написаны с юмором, примерами и личными историями разными авторами, чудесно переведены и подчеркивают несовпадения в том или ином вопросе в разных странах (например когда в оригинале говорится о препаратах, продающихся только в Норвегии, в русской версии идёт большая сноска о том, как они называются в России). Больше всего я жду, когда начну забывать интересные термины и придётся перечитать эти книжки ещё раз.\n2\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n2\nПовысить\nПонизить\nКонстантин Шакуров\n, \nIT-продуктолог SimbirSoft\nВ IT, как и в других сферах, помимо хардскиллов, важно уделять внимание формированию софтскиллов, в том числе коммуникативных навыков и многих других. Для того, чтобы стать по-настоящему умным, читать недостаточно, как отмечают сами авторы книг, например, IT-психолог Андрей Курпатов. Один из главных аспектов умственного роста – это социальная жизнь, решение проблем и вопросов в обществе и коллективе. Именно это сильнее всего помогает развиваться.\nВ нашей сфере много насущных проблем, в частности, это выгорание, многозадачность, необходимость в энциклопедической эрудированности во всех областях IT. Поэтому среди наиболее важных навыков можно выделить такие:\nСоблюдать баланс – в работе, отдыхе. Не увлекаться работой сверх меры, как маньяк.\nВыходить из тепличных условий, которые часто встречаются в IT. Выйти из комфорта – значит выучить новое, взять на себя новые обязанности и т.д.\nНаходить смысл во всем, что ты делаешь.\nОсознавать себя: понимать, анализировать, почему испытываешь определенные эмоции, почему поступаешь так, а не иначе.\nВ формировании этих навыков могут помочь некоторые книги, например, из недавних:\nФаулер Сьюзен, «Почему они не работают? Новый взгляд на мотивацию сотрудников».\nАндрей Курпатов, «Чертоги Разума» и другие книги.\nАся Казанцева, «Кто бы мог подумать», «Мозг материален» и др\nМарк Гоулстон, «Как разговаривать с мудаками».\nМихаил Лабковский, «Хочу и буду».\nЛиза Крон, «С первой фразы: Как увлечь читателя, используя когнитивную психологию».\nНасим Талеб, «Черный лебедь», «Одураченные случайностью» и др.\nДэн Браун, «Происхождение».\nВилеайнур Рамачандран, «Мозг рассказывает», «Рождение разума».\nФрэнсис Эшкрофт, «Искра жизни».\nСэм Кин, «Дуэль нейрохирургов».\nИз классики:\nСтивен Кови, «Семь навыков высокоэффективных людей».\nЭрик Берн, «Люди, которые играют в игры».\nПо названиям некоторых книг может быть сложно понять, как они помогут решить вышеописанную задачу. Однако, они помогают открыть неожиданные вещи, сформировать желаемые навыки и добиться эффективного социального взаимодействия.\nМы с коллегами выбрали еще несколько книг, так или иначе полезных для нашей сферы деятельности. У каждого этот список свой, но мы остановились на следующих трех книгах:\nЯн Перельман, «Занимательная астрономия» и другие работы. Несмотря на то, что книги вышли уже давно, пожалуй, остаются одними из самых влиятельных в плане популяризации науки. Они знакомят с красотой и логикой устройства Вселенной, а описанные подходы применимы в различных отраслях.\nКэл Ньюпорт, «В работу с головой». Книга направлена на развитие ключевых в IT навыков сфокусированной работы. Несмотря на определенные противоречия с современной офисной культурой, она может помочь бороться с информационными перегрузками, достигать значимых интеллектуальных результатов, создавать действительно новое.\nНик Лейн, «Энергия, секс, самоубийство. Митохондрии и смысл жизни». Эта работа, с одной стороны, дает заглянуть в область, достаточно далекую от IT, с другой стороны, может быть интересна с точки зрения красоты логического построения.\n9\nОтвет эксперта\n2019-12-09T13:08:48+03:00\n\nРейтинг полезности ответа: \n9\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\n\n\n\nИтак, что из научпопа стоит почитать?\nЭксперты упомянули следующие книги:\nАся Казанцева, «Мозг материален».\nАся Казанцева, «Кто бы мог подумать! Как мозг заставляет нас делать глупости».\nАлександр Панчин, «Сумма биотехнологии. Руководство по борьбе с мифами о генетической модификации».\nАндрей Курпатов, «Чертоги Разума».\nБарбара Оакли, «Думай как математик. Как решать любые задачи быстрее и эффективнее».\nВилеайнур Рамачандран, «Мозг рассказывает».\nВилеайнур Рамачандран, «Рождение разума».\nДаниэль Канеман, «Думай медленно, решай быстро».\nДжаред Даймонд, «Ружья, микробы и сталь: история человеческих сообществ».\nДжонатан Смит, «Псевдонаука и паранормальные явления. Критический взгляд».\nД. Ассанж, Э. Мюллер-Магун, Д. Аппельбаум, Ж. Циммерман, «Шифропанки. Свобода и будущее Интернета».\nДик Свааб, «Мы это наш мозг. От матки до Альцгеймера».\nДэн Браун, «Происхождение».\nК. Армстронг, «История Бога. 4000 лет исканий в иудаизме, христианстве и исламе».\nКлаус Шваб, «Четвертая промышленная революция».\nКэл Ньюпорт, «В работу с головой».\nЛьюис К. С., «Просто христианство».\nЛиза Крон, «С первой фразы: Как увлечь читателя, используя когнитивную психологию».\nМаксим Дорофеев, «Джедайские техники».\nМитио Каку, «Будущее разума».\nМарк Гоулстон, «Как разговаривать с мудаками».\nМихаил Лабковский, «Хочу и буду».\nМенский М. Б., «Человек и Квантовый мир».\nНикола Тесла, «Откровения Николы Теслы».\nНик Лейн, «Энергия, секс, самоубийство. Митохондрии и смысл жизни».\nНасим Талеб, «Черный лебедь», «Одураченные случайностью» и др.\nРичард Шеперд, «Неестественные причины. Записки судмедэксперта: громкие убийства, ужасающие теракты и запутанные дела».\nР. Дули, «НейроМаркетинг. Как влиять на подсознание потребителя».\nСерия книг «The Big Idea».\nСерия книг «Сенсация в медицине.\nСюгру Т., «Река жизни» (это про Эдгара Кейси).\nСтанислав Лем, «Сумма технологии».\nСтивен Хокинг, «Краткая история времени. От большого взрыва до черных дыр».\nСэм Кин, «Дуэль нейрохирургов».\nСтивен Кови, «Семь навыков высокоэффективных людей».\nТим Ву, «Главный рубильник. Расцвет и гибель информационных империй от радио до интернета».\nТим Браун, «Дизайн-мышление в бизнесе».\nУилкок Д., «Кили и физика вибрации».\nФил Барден, «Взлом маркетинга».\nФрэнсис Эшкрофт, «Искра жизни».\nФаулер Сьюзен, «Почему они не работают? Новый взгляд на мотивацию сотрудников».\nЭрик Берн, «Люди, которые играют в игры».\nЮваль Ной Харари, «Sapiens. Краткая история человечества».\nЮваль Ной Харари, «Homo Deus: Краткая история будущего».\nЮваль Ной Харари, «21 урок для XXI века».\nЯн Перельман, «Занимательная астрономия».\nА что интересного вы читали в последнее время? Делитесь в комментариях. \n100500\nЛучший ответ\n2019-12-09T13:08:48+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/iconfinder-icon-17-cover-icon-1.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/05/8266_8ffc7336_YPcwaxAf_1557326601-e1558974450399-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/10/cherabaev-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/45000_b160ab4c_RbAPWlm9_1575637565-e1575726807951-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/28288_6b8ae384_Ka9O5b84_1575038930-e1575727235611-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/10417_d08ca39d_Ybr7b1IH_1575549733-e1575727841322-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/89124_2d4ce5de_XqwVQULl_1575620972-e1575728057336-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Alexander-Gruzdev-e1575730921893-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Alla-Gruzdkova-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/89042_094e4109_vetbjwqX_1570008885-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_red-150x150.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/92145_1b9cc7ab_9KbDhPvQ_1573819941-1-e1575742103311-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/w5ftf5b4y45b5hw6h4tfgb7m5jhw56-e1576148710276-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/what-is-bootcamp/",
                "title": "«Нужно пробовать себя в разных командах»: зачем Яндекс запустил Буткемп",
                "created_date": "7 декабря 2019 в 10:50",
                "body": "Сергей Бережной, руководитель отдела разработки поисковых интерфейсов «Яндекса»\nКаждую неделю на работу в «Яндекс» выходят от 50 до 100 новых сотрудников. Большинство заранее знают, в какой команде будут работать. Полтора года назад отдел поисковых интерфейсов «Яндекса» решил провести эксперимент. Новым разработчикам дали возможность поочерёдно попробовать себя в разных командах, чтобы потом они выбрали ту, которая больше всего подходит. Эксперимент оказался удачным, и сейчас такую систему — она получила название \nБуткемп\n — используют и в других подразделениях. О том, как устроен Буткемп и какие преимущества он даёт, «Типичному программисту» рассказал руководитель отдела разработки поисковых интерфейсов «Яндекса» Сергей Бережной.\n— Как появился Буткемп?\n«Яндекс» — очень большая компания. Поэтому вакансии фронтендеров и бэкендеров в поисковом портале есть всегда, причём обычно сразу в нескольких командах. Например, искать себе разработчиков могут одновременно Поиск, Картинки, Директ, группа разработки внутренних компонентов и группа инфраструктуры.\nВыбрать команду можно было и раньше, но реализовано это было совершенно иначе. Допустим, у нас есть хороший кандидат, который успешно прошёл все технические секции собеседования. После этого мы устраивали ему встречи с командами, которым нужны разработчики. На таких встречах ребята знакомились, рассказывали о себе и решали, подходят они друг другу или нет.\nТакая схема не лишена недостатков. Во-первых, команд, которые ищут разработчиков, очень много. Организовать встречи со всеми невозможно, поэтому приходилось выбирать несколько самых подходящих. Во-вторых, стандартная продолжительность встречи — один час. Этого мало даже для того, чтобы составить поверхностное впечатление о команде, не говоря уже о погружении в процессы.\nВ какой-то момент мы осознали, что пора менять подход. Кандидат должен иметь возможность поработать в разных командах, посмотреть на них изнутри, сравнить и сделать осознанный выбор. Мы знали, что некоторые зарубежные IT-компании, например Facebook, разрешают разработчикам менять команды на старте, и полтора года назад решили внедрить у себя нечто подобное. Так появился Буткемп.\nСейчас через Буткемп проходят все фронтендеры и часть бэкендеров, которых мы нанимаем в поисковый портал. Буткемп длится восемь недель. За это время ребята поочерёдно меняют три, а иногда и четыре команды: в первой проводят три недели, а в остальных — по две. И это не просто знакомство — в ходе Буткемпа человек действительно становится частью команды и работает вместе с ней.\n— В чём разница между Буткемпом, стажировкой и испытательным сроком?\nСтажировка рассчитана на начинающих специалистов. Как правило, это ребята-студенты. Их надо не только знакомить с процессами и технологиями, но и просто учить. Буткемп же предназначен для тех, у кого уже есть опыт. Это люди, которые приходят на позиции от младшего до старшего разработчика. Буткемп — не стажировка, а полноценная оплачиваемая работа. Мы заключаем с буткемперами трудовой договор, и они с первого дня становятся штатными сотрудниками «Яндекса».\nБуткемп — разновидность испытательного срока, а точнее, новая форма его прохождения. Но в отличие от традиционного испытательного срока, человек взаимодействует не с одной командой, а с несколькими. Суть от этого не меняется: за время Буткемпа разработчик понимает, подходит ли ему «Яндекс», а «Яндекс» — подходит ли ему разработчик. Но возможностей стало гораздо больше. Если у тебя не сложились отношения с одной командой, ты пробуешь себя в другой и так далее.\n— Чем отличаются друг от друга разные команды в «Яндексе»?\nОчень многим. «Яндекс» разный: отличаются не только задачи и проекты, но и инструменты. Например, в одной команде фронтендеры могут использовать БЭМ в связке с jQuery, в другой — БЭМ в связке ReactJS. Бэкендеры пишут на разных языках и применяют разные базы данных. Где-то занимаются промышленным программированием для большого проекта, а где-то делают маленький внутренний стартап. Одни команды вынуждены действовать стремительно, а другим необходимо всё долго и тщательно тестировать.\nЕсть команды, где все участники сидят в одной комнате, а есть такие, которые распределены по разным городам. Даже графики у всех разные: кто-то приходит с утра пораньше, чтобы провести вечер дома, а кто-то, наоборот, работает с обеда и засиживается допоздна. Таких особенностей десятки, и о них невозможно рассказать на встрече. Единственный способ узнать о них — на время влиться в команду и посмотреть, насколько тебе в ней будет комфортно.\n— Достаточно ли двух недель, чтобы понять, подходит ли тебе команда?\nВполне достаточно. Да, за такой срок ты вряд ли вникнешь во все детали проекта, над которым работает команда. Но этого от тебя никто и не требует. Мы ставим перед буткемперами две цели. Первая — за время Буткемпа познакомиться с «Яндексом» в целом: освоить основные технологии и инструменты, общие библиотеки, правила разработки. Вторая — составить впечатление о команде, в которую ты попал. Это прежде всего знакомство с людьми и внутренними процессами. Ты можешь посмотреть кодовую базу проектов, понять, как строится работа, в каком темпе живёт команда и какие процессы в ней приняты.\nМы приложили много сил, чтобы буткемперы были полноправными участниками команд, а не сторонними наблюдателями. Во-первых, команды готовят для них отдельный пул задач — настоящих «боевых», но таких, которые реально сделать за неделю-две. Во-вторых, буткемперов погружают в рутину: они ходят на встречи, участвуют в планировании спринтов, общаются со смежниками — всё как в жизни.\n— Не слишком ли сильный стресс — сменить три команды за восемь недель?\nВыход на новую работу всегда в какой-то степени сопряжён со стрессом, с этим ничего не поделаешь. Но со своей стороны мы делаем всё, чтобы новым сотрудникам было проще адаптироваться. Кроме коллег, у буткемпера есть минимум два человека, к которым можно обратиться за помощью. Это, во-первых, техлид команды: он вводит в курс дела, ставит задачи, проводит ревью кода и разъясняет то, что непонятно. Во-вторых, это ментор, или личный наставник, — его закрепляют за тобой на весь срок Буткемпа, и он готов помочь в любой ситуации.\n— Если разработчику понравилась первая же команда, можно ли прервать Буткемп и остаться в ней?\nНет, мы всегда просим человека пройти Буткемп до конца — как минимум для того, чтобы он сравнил впечатления и убедился, что не ошибся с выбором. Если по окончании выяснится, что первые ребята действительно самые подходящие, ты просто продолжишь работу с ними. Но при этом у тебя будет опыт взаимодействия с другими командами, а он полезен в любом случае.\nБуткемп позволяет расширить кругозор и узнать, что похожие вещи можно делать по-разному. У нас бывало, что разработчики после Буткемпа приходили в команду и говорили: ой, а у соседей для этого используется другое решение; кажется, что оно проще и эффективнее. Команда пробовала и убеждалась — да, так лучше.\nЗа время Буткемпа ты узнаёшь новое не только про разные команды в «Яндексе», но и про себя самого. Например, человек на старте говорит, что ему интересно делать интерфейсы, а во время Буткемпа попадает в команду инфраструктуры. Он говорит себе — ну ладно, попробую. А потом выясняется, что это именно то, чем он мечтал заниматься всю жизнь. Такие истории происходят сплошь и рядом.\n— Что делать, если понимаешь, что команда тебе не очень подходит?\nПробовать себя в следующей. Буткемп — это двусторонняя история. Команда должна понравиться разработчику, а разработчик — команде. Всё сложится, только если соблюдены оба эти условия. Бывает, что человек хочет остаться в команде, но она не готова его взять. И наоборот: команде всё нравится, но буткемпер в итоге выбирает другую. Такое происходит постоянно, и это совершенно нормально.\nЧтобы сделать весь процесс максимально прозрачным, мы внедрили систему сбора обратной связи. Когда буткемпер и команда заканчивают совместную работу, они рассказывают о впечатлениях: что понравилось, а что можно улучшить. Потом назначается встреча с куратором — всего за время Буткемпа таких встреч бывает минимум три. Если что-то пошло не так, тебе подскажут, на что стоит обратить внимание, и ты можешь учесть этот фидбек при взаимодействии со следующей командой. Это работает и в обратную сторону. Если, например, буткемпер указывает, что в команде что-то устроено непонятно, это исправят.\n— Стоит ли тратить время на Буткемп вместо того, чтобы сразу подключать разработчика к большому проекту?\nЯ убеждён, что человек будет эффективнее всего работать в том месте, которое ему нравится. Собственно, в этом и есть главная цель Буткемпа: мы помогаем разработчику найти команду, в которой ему будет комфортно. А кроме того, с запуском Буткемпа мы смогли в целом упорядочить процесс найма в Поиск.\nВ поисковом портале «Яндекса» множество команд. Поэтому у портала вакансии есть всегда, а вот у отдельной команды они могут появляться, например, пару раз в год. Раньше наём был ответственностью команды. У тебя открылась вакансия — ты объединяешься с другими командами, которые ищут разработчиков, и вы вместе вспоминаете, как разместить объявление, как провести собеседование, как организовать испытательный срок и так далее.\nСейчас наём происходит на уровне всего портала. Это один большой и общий для всех процесс, который пришёл на смену множеству маленьких. Например, собеседования в Буткемп проводят люди из разных команд, даже из тех, у которых сейчас нет открытых вакансий. Умение проводить собеседования — это особый навык, и мы сделали так, чтобы люди поддерживали его в рабочем состоянии.\n— Почему Буткемп используется только в поисковом портале, а не во всём «Яндексе»?\nБуткемп появился как эксперимент, который оказался удачным и начал постепенно распространяться на разные подразделения компании. На старте, полтора года назад, с помощью Буткемпа нанимали только фронтендеров в отдел разработки поисковых интерфейсов. Сейчас через Буткемп проходят как фронтендеры, так и бэкендеры, и он используется во всём поисковом портале. Это самое большое подразделение «Яндекса»: в него входит не только Поиск, но и множество других сервисов, от Картинок до Директа. Важно понимать, что внедрение Буткемпа требует перестройки многих внутренних процессов, поэтому разом распространить его на весь огромный «Яндекс» нельзя. В поисковом портале Буткемп полностью оправдал себя, и я не исключаю, что однажды на него перейдёт вся компания.\nНе смешно? А здесь смешно: \n@ithumor\nЯндекс\nТакже рекомендуем:\nТрансляция конференции «Яндекса» YaC 2018\nИскусственный интеллект и персональные сервисы в России: что делает Яндекс в 2019\nКак работает беспилотный транспорт\n«Умная» колонка, наушники с технологией открытого звука и мультиподписка на сервисы: итоги конференции YaC 2018",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/iconfinder-icon-17-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Berezhnoj-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.49.24-1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.49.01-1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.48.48-1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.48.59-1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.49.22-1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.48.52-1.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 853\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/photo_2019-11-29-13.49.23-1.jpeg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/sysadmin-survival-guide/",
                "title": "Гайд для сисадмина: как выжить среди гуманитариев",
                "created_date": "6 декабря 2019 в 16:31",
                "body": "Порой пользователи удивляют системного администратора своими запросами, особенно если их решение не входит в обязанности сисадмина. «А вы можете склеить презентацию в честь дня рождения директора?», «А проверьте у нас кондиционер, он почему-то не работает!», «Сегодня по всему офису нужно установить колонки» — эти и другие странные просьбы часто слышат сисадмины в офисах. А ведь большинство из подобных эпизодов несложно предотвратить. Своим опытом поделились специалисты компании первой российской сети IP-телефонии — «русского Скайпа» — SIPNET, единственной в России виртуальной АТС, использующей уникальную технологию CommuniGate Pro.\nОборона на дальних подступах\nC некоторыми запросами пользователей превентивно работать вряд ли получится. Как правило, список начинается с «неработающего» пароля, который вводят на русской раскладке, а заканчивается скопированным вместо файла ярлыком.\nПодобные просьбы уже стали сисадминской классикой, и вряд ли их избежал хотя бы один системный администратор. Но есть и вторая категория — запросы, которые вызваны не столько невнимательностью пользователя, сколько:\nнепониманием сути работы системного администратора;\nотсутствием компьютерной грамотности, том числе предусмотренной должностными обязанностями;\nнесовершенством IT-инфраструктуры компании.\nТакие риски нивелируются различными организационными и финансовыми методами. Надо только не стесняться брать на себя инициативу, это сильно облегчит вам жизнь, и не бояться прослыть излишне принципиальным. Перебарщивать и правда не стоит, но необходимо помнить о том, что принципиальность вы проявляете для того, чтобы эффективно выполнить свою работу. В том числе и в интересах тех коллег, которым ваша настойчивость на первый взгляд может не понравиться.\nПара общих рекомендаций, которые позволят если не предотвратить все нелепые запросы пользователей, то, по крайней мере, сократить их количество.\nНачните со своих обязанностей\nУ каждого сисадмина должен быть составлен максимально детализированный список чётко сформулированных обязанностей. Именно с ним у системного администратора появляется возможность отказать в ответ на какой-либо запрос, объяснив причину отказа тем, что просьба не соответствует его должностной инструкции.\nКонечно, всегда можно помочь коллеге с решением его проблемы. Но в случае, если количество запросов «не по адресу» начнёт серьёзно сказываться на ключевой деятельности, имеет смысл составить карту рабочего дня с распределением времязатрат и обсудить её с руководителем: «Столько-то часов я потратил на обработку запросов от коллег, поэтому на решение вот этих задач у меня не остаётся времени. Если в коллективе есть спрос, почему бы не нанять второго сисадмина?».\nПрактика показывает, что когда начальство слышит о дополнительных расходах, оно предпочтёт устранить причину, а не выделить средства. Из этого можно сделать общий вывод: общайтесь с начальством не из IT на более понятном ему языке — денег, времени и рисков.\nРегламентируйте работу других\nСоздавать пользовательские мануалы по ключевым операциям, новому оборудованию и программам и вводить обязательное ознакомление с инструкцией каждого из сотрудников. Важно фиксировать факт ознакомления (подпись в ведомости, галочка в гугл-таблице и т. п.)\nЧисло тех, кто внимательно изучит такие инструкции, скорее всего, будет минимальным. И зачем же это тогда нужно? Например, чтобы при вопросах «а как мне…?», «а где…?», «ой, а что это у меня?» сначала отправить пользователя к мануалу и при необходимости напомнить, что тот его уже читал (и письменно это подтвердил). А самому подключаться к решению вопроса стоит только в случае безуспешных попыток коллеги справиться с проблемой по инструкции. Подобное «делегирование» необходимо для оптимизации вашего рабочего времени: это позволит вам в первую очередь решать сложные задачи, которые не под силу вашим коллегам даже при наличии самых подробных регламентов.\nКак применять рекомендации на практике\nТеперь пройдёмся по пяти типичным запросам и их решениям с долгосрочным эффектом.\n«Помогите вставить картинку или сделать операции в Excel»\nСамый, наверное, распространённый случай. Связан с тем, что для большинства людей сисадмин — человек, который занимается всем, что связано с компьютерами. И потом, если картинка не форматируется и не вставляется в презентацию, это ведь может быть и сбой программы? А кто программами занимается? Правильно — сисадмин.\nКакое-то количество раз помочь и правда можно. Если ситуация будет повторяться — обращаемся к должностной инструкции. А ещё обращаемся к начальнику отдела, сотрудники которого часто просят о подобной помощи: «Думаю, нужно направить сотрудников на курсы обучения тому-то и тому-то». Похоже на кляузу? Нет, это ваш вклад в повышение уровня подготовки сотрудников и компании, а также грамотное распределение вашей нагрузки.\n«Компьютер постоянно тормозит»\nИ он правда тормозит. Что неудивительно: пользователь самостоятельно установил на него программы, которые, как уверяет, нужны ему для работы. Возможно, что они действительно нужны. Но вирусы, которые пришли вместе с ними, точно лишние.\nОт подобных вещей необходимо застраховаться на самом раннем этапе работы в компании, в идеале сразу после вступления в должность. А именно: ограничить хаотичные установки ПО системными политиками и/или правами учётной записи.\n«Невозможно общаться с клиентами по телефону»\nВ компанию крайне обеспокоенный, со срочным вопросом позвонил один из ключевых клиентов. Секретарь перевела звонок на аккаунт-менеджера, который ведёт эту компанию. Но по какой-то причине звонок перевёлся на другого сотрудника. Быстро разобраться, кто и какой вопрос хочет обсудить, тоже не получилось: соединение постоянно прерывалось помехами (как выяснилось позднее, клиент был за границей в командировке). Конечно, в результате звонок перевели на нужного менеджера, вопрос с клиентом обсудили. И казалось бы, с одной стороны ничего страшного в глобальном смысле не случилось. Но с другой, впечатление от коммуникации точно подпортилось — половина разговора состояла из переспрашиваний собеседников, слышно ли им друг друга, да и экстренная ситуация разрешалась куда позже, чем того изначально ожидал клиент.\nНе допустить повторения подобных случаев довольно легко — главное использовать системы с высоким уровнем клиентского сервиса, которые будут обеспечивать в первую очередь несокрушимую связь вне зависимости от местонахождения собеседников, HD звук голоса, станут помощниками менеджеров компании. Так, например, инструмент «предсказатель клиента» позволит мгновенно определить, что конкретному звонящему надо уделить наибольшее внимание.\n«Не могу найти файл!»\nПользователь не может найти на рабочем столе своего ПК документ, хотя вроде бы туда его сохранял. Искал сам, помогали коллеги, позвали сисадмина, а файла всё нет. Только при воссоздании всей картины происшествия выяснилось, что пользователь был не в своей, а в чужой учётной записи и, следовательно, сохранил файл на рабочий стол коллеги. Рецепт несложный: самому ограничить доступ пользователей к чужим учётным записям и файлам.\n«У меня всё исчезло!»\nОтчёт по проекту уже почти написан, но потом пользователь что-то нажал, компьютер выключился, а после включения все файлы оказались удалены. Конечно, избежать негативных последствий случайных кликов можно при помощи резервного копирования. Но для того, чтобы этот инструмент был действительно эффективным, и результат соответствовал всеобщим ожиданиям, работа системы автоматического резервного копирования должна быть настроена исходя из потребностей каждой конкретной компании. Обсудите и согласуйте с начальством периодичность, с которой будет осуществляться копирование, а также его глубину. Впоследствии это не только сохранит необходимые данные, но и убережёт системного администратора от претензий к формату копирования.\nПамятка сисадмину\nПовторим наиболее важные моменты, которые помогут системному администратору взаимодействовать с коллегами-гуманитариями без ущерба для своей эффективности и нервов:\nне пренебрегайте регламентацией рабочих процессов, лежащих в зоне вашей ответственности;\nвводите удобные вам системные политики;\nиспользуйте актуальное и соответствующее задачам компании ПО и железо;\nделайте бэкапы.\nА ещё используйте эти советы и работайте в удовольствие.\nСистемное администрирование\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/sysadmin_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/nginx-books-and-sites/",
                "title": "Что почитать по NGINX — подборка книг на русском и английском + дополнительные материалы",
                "created_date": "5 декабря 2019 в 15:13",
                "body": "Выдержки из руководства \n«Nginx Admin's Handbook»\nХотя NGINX считается простым сервером без лишних функций, работать с ним исключительно интуитивно получается не всегда, иногда нужна дополнительная информация. В этой подборке вы найдёте самые актуальные книги по NGINX на русском и английском языках. А если этого окажется недостаточно — полезные ресурсы из сети Интернет.\nПодборка книг по NGINX\nНа русском\n«NGINX. Книга рецептов», Дерек Де Йонге\nКупить\n \nРазобрались с теорией и хотите больше практики? Тогда вам пригодится эта книга. Здесь вы сможете получить огромное количество практических примеров и рекомендаций по настройке и использованию серверов. Сервер NGINX обычно выбирают за эффективный механизм распределения нагрузки — в этой книге вы найдёте приёмы, которые позволят сделать этот механизм ещё эффективнее. Что ещё? A/B-тестирование, управление трафиком, интеграция с облачными платформами AWS, Azure и Google, отладка. Однако прежде чем браться за чтение, желательно ознакомиться с основными принципами работы системы.\n«Администрирование сервера NGINX», Димитрий Айвалиотис\nКупить\n \nПодойдёт как для новичков, так и для опытных администраторов. Автор рассказывает о настройке и управлении сервером, детально рассматривая каждый пункт настроек.\nНа английском\n«NGINX Essentials», Valery Kholodkov\nКупить\n \n\nАвтор успел поработать в таких компаниях, как Яндекс, Booking.com и AVG, а сейчас владеет собственной консалтинговой фирмой. NGINX Essentials — 150 страниц полезной информации, без рассказов о том, что такое интернет и где находится Anykey. Чтобы продемонстрировать принципы, по которым действует система, автор использует реальный проект. Единственное, на что можно посетовать — недостаточно глубокое погружение в тонкости настроек сервера.\n\n«NGINX HTTP Server», Martin Fjordvald, Clement Nedelcu\nКупить\n \n\nМонументальный труд, выдержавший четыре издания. В книге показано, как оптимизировать сетевую нагрузку, наладить взаимодействие между NGINX и Apache (или совсем отказаться от последнего) и в полной мере использовать возможности системы в веб-приложениях. Но если вы раньше не работали с NGINX, возможно, вам придётся обращаться к другим источникам.\n\n«NGNIX High Performance», Rahul Sharma\nКупить\n \n\nЕщё одна книга не для новичков. Содержит пошаговые рекомендации по миграции с Apache и настройке максимальной производительности сервера NGINX. Помимо советов по настройке вы узнаете, как измерить производительность системы. Подача материала лаконичная, с практическими примерами.\n\n«ModSecurity 3.0 and NGINX: Quick Start Guide», Faisal Memon, Owen Garrett, Michael Pleshakov\nСкачать\n \n\nИздание посвящено исключительно интеграции NGINX с фаерволлом ModSecurity 3.0. Вы узнаете, как установить и настроить наборы правил OWASP Core Rule Set и TrustWave SpiderLabs Commercial Rule Set. Возможно, благодаря узкой специализации авторам удалось максимально подробно осветить все аспекты настройки системы.\n\n«Cisco ACE to NGINX: Migration Guide», Faisal Memon\nСкачать\n \n\nКнига поможет безболезненно перейти с Cisco ACE на сервер NGINX. Примеры настроек с детальным разбором прилагаются. Есть разделы, посвящённые установке Linux и поднятию x86 сервера.\n\nДополнительные ресурсы\nНе нашли ответа на свой вопрос в книгах? Хотите попробовать новую систему, но не готовы настраивать собственный сервер? Не знаете, что предпочесть, NGINX или Apache? Вот подборка сайтов, которые вам помогут.\nПрим. пер.\n Полезных сайтов по NGINX десятки, если не сотни. Мы отобрали 6 ресурсов, с которых стоит начать изучение системы, а уж насколько глубокой окажется кроличья нора, будет зависеть только от вашего любопытства.\nNGINX Project\n — сайт проекта. Отсюда стоит начать.\nNGINX Documentation\n — полная документация по системе.\nNGINX Pitfalls and Common Mistakes\n — учиться лучше на чужих ошибках, и здесь собраны самые распространённые.\nNGINX Forum\n — не нашли ответа на свой вопрос? Спросите на форуме!\nNGINX vs. Apache (Pro/Con Review, Uses, & Hosting for Each)\n — хорошая подробная статья, посвящённая сравнению NGINX и Apache.\nNGINX Rate Limit, Burst and nodelay sandbox\n — песочница, в которой можно поиграть с настройками и оценить возможности сервера NGINX.\nНе смешно? А здесь смешно: \n@ithumor\nВеб-разработка\n, \nДля продолжающих\n, \nСистемное администрирование\nТакже рекомендуем:\nКак работает CSS Flexbox: наглядное введение в систему компоновки элементов на веб-странице\nБот для Telegram на Python: от первой строчки кода до запуска на Heroku\nПростыми словами о «фронтенде» и «бэкенде»: что это такое и как они взаимодействуют\nPython GUI: создаём простое приложение с PyQt и Qt Designer",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/server-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/coockbook-205x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/mastering-196x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Essentials-227x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/nginx-HTTP-Server-227x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Nginx-High-Performance-227x280.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/ModSecurity-3.0-and-NGINX-196x280.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Cisco-ACE-to-NGINX-Migration-Guide-190x280.png"
                ]
            },
            {
                "url": "https://tproger.ru/quiz/which-neural-net-does-not-exist/",
                "title": "Какие из этих нейросетей мы выдумали? Тест-угадайка от Tproger и ABBYY",
                "created_date": "4 декабря 2019 в 15:12",
                "body": "С помощью нейросетей можно и генерировать сплющенных котов, и автоматизировать работу в организациях с многомиллиардным оборотом. Этот тест мы сделали вместе с командой \nABBYY\n, которая как раз занимается разработкой сложных инструментов для интеллектуальной обработки информации на основе нейросеток.\nВ каждом вопросе вы увидите описание нейросети. Какие-то из них существуют, а другие мы выдумали. Сможете угадать, какие именно?\n\n\n\n\n\n\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Скоро загрузится, клянусь своей IDE!';\r\n        }, 5 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Ещё совсем немножко, прям милипусенько...';\r\n        }, 10 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Викторина загружается дольше, чем обычно: попробуйте потанцевать с бубном — отключить AdBlock и перезагрузить страницу :(';\r\n        }, 20 * 1000);\r\n    \n\n\n\nНачать тест\n\n\n\n\r\n        var quiz_data_stringify = \"\";\r\n        var quiz_data = JSON.parse(window.atob(quiz_data_stringify));\r\n        var quiz_template = decodeURIComponent(escape(window.atob('PCVxdWl6LnF1ZXN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHF1ZXN0aW9uLCBpLCBhcnIpIHslPgoKPGRpdiBjbGFzcz0icXVpel9pdGVtIiBpZD0icXVpel9pdGVtXzwlPXF1ZXN0aW9uLmlkJT4iIGRhdGEtbnVtPSI8JT1pJT4iIGRhdGEtaWQ9IjwlPXF1ZXN0aW9uLmlkJT4iPgoKICAgIDxkaXYgY2xhc3M9InF1ZXN0aW9uIj4KICAgICAgICA8JT1xdWVzdGlvbi50ZXh0JT4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImFuc3dlcnMiPgogICAgICAgIDwlcXVlc3Rpb24uYW5zd2Vycy5mb3JFYWNoKGZ1bmN0aW9uKGFuc3dlciwgbnVtLCBhcnIpIHslPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhbnN3ZXIiIGRhdGEtbnVtPSI8JT1udW0lPiIgZGF0YS1pZD0iPCU9YW5zd2VyLm9wdGlvbnMuaWQlPiI+CgogICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9Imljb24iIGNsYXNzPSJxdWl6X2ljb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InF1aXpfY29udHJvbCBhbnN3ZXJfPCU9cXVlc3Rpb24udHlwZSU+Ij5PPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnRlbGxvLWljb24iIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48L3NwYW4+CiAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFuc3dlcl90ZXh0IiBkYXRhLXJvbGU9ImFuc3dlcl90ZXh0Ij4KICAgICAgICAgICAgICAgIDwlPSBhbnN3ZXIub3B0aW9ucy50ZXh0ICU+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3IiPjwlPSBhbnN3ZXIub3B0aW9ucy5kZXNjciAlPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9InBlcmNlbnQiIGNsYXNzPSJwZXJjZW50Ij48c3BhbiBjbGFzcz0iaWNvbi1jaGFydC1iYXIiPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICA8JT1hbnN3ZXIucGVyY2VudCAlPiU8L3NwYW4+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8JX0pOyU+CgogICAgPC9kaXY+CgogICAgPGJ1dHRvbiBjbGFzcz0icXVpel9idXR0b24iIGRhdGEtcm9sZT0ibmV4dCIgZGF0YS1jdXJyZW50PSI8JT1pJT4iIGRhdGEtbmV4dD0iPCU9KGkrMSklPiI+0JTQsNC70YzRiNC1PC9idXR0b24+Cgo8L2Rpdj4KPCV9KTslPgoKCjwvZGl2Pgo=')));\r\n        var quiz_result_template = decodeURIComponent(escape(window.atob('')));\r\n        if (quiz_data.code_mode) {\r\n            var head = document.head || document.getElementsByTagName('head')[0];\r\n            var script = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.defer = true;\r\n            script.src = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.js?x84192';\r\n            head.appendChild(script);\r\n            link = document.createElement('link');\r\n            link.rel = 'stylesheet';\r\n            link.type = 'text/css';\r\n            link.href = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.css?x84192';\r\n            head.appendChild(link);\r\n        }\r\n    \n\n\n\n\nНейронные сети\n, \nПартнёрский материал\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/test-3-1-880x308.jpg",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/10-soft-skills-for-it-specialist/",
                "title": "10 soft skills, которые нужно прокачать ИТ-специалисту",
                "created_date": "4 декабря 2019 в 14:00",
                "body": "Леонид Юденков, Senior Business Analyst в EPAM\nЯ работаю в IT 7 лет. За это время мне довелось поучаствовать в большом количестве проектов в разной роли: бизнес-аналитик, project manager, product owner. Всё это время я наблюдал за карьерными траекториями коллег и задавался вопросом — почему одни добиваются своих целей и стремительно растут, а другие останавливаются на полпути? Неужели дело только в профессиональных навыках?\nВ современном мире в понятие «профессионализм» заложено больше, чем 20 лет назад. Если вы хотите построить успешную карьеру в IT, помимо hard skills (математика, программирование, знание актуальных фреймворков и технологий) вам также необходимо развивать и другой набор навыков — soft. О том, как прокачивать soft skills и правильно сочетать «твёрдое» и «мягкое» и поговорим.\nВернёмся немного назад…\nСтереотипный портрет программиста когда-то выглядел так: молчаливый социофоб, в очках с толстым стеклом, футболке или растянутом свитере и штанах, натянутых до пупка. Сегодня мы понимаем, что этот образ далёк от действительности.\nКстати, стоит отметить парня на заднем плане превратившейся в мем фотографии (того, что без очков) — он участвовал в запуске Space X под руководством Илона Маска.\nИзменился мир IT, изменились и подходы к управлению проектами. В традиционных подходах можно прочертить чёткую линию между людьми, которые управляют проектом, взаимодействует с бизнесом, и разработчиками, инженерами, которые просто выполняют поставленную задачу.\nЭта модель иногда используется и сейчас, но она не всегда успешна и не всегда применима. Причина: очень часто итоговый результат отличается от того, что на самом деле было нужно клиенту или пользователям, либо проект выполняется несвоевременно, либо на него тратится больше денег, чем ожидалось. В поисках решения этих проблем мир IT пришёл к Agile (гибким) подходам к разработке ПО. В этой парадигме границы между ролями стали более размытыми, а общения и взаимодействия с бизнесом и внутри проектной команды стало больше.\nIT-специалист в Agile\nУ Agile-подхода есть свой \nманифест\n (звучит круто, не правда ли?), в нём обозначены 4 ценности и 12 принципов, которыми должны руководствоваться команды, чтобы быть по-настоящему гибкими. Давайте посмотрим, сколько из них относится к hard, а сколько к soft skills.\nДумаю, вы бы справились и без подсказок. Как видите, более половины принципов Agile так или иначе требуют развитых soft skills. У нас в EPAM есть матрица компетенций, которая содержит набор необходимых требований для специалистов каждого уровня, каждой специальности. В этой матрице тоже есть два уже знакомых вам раздела: hard и soft skills. Я взял на себя смелость выбрать 10 самых важных soft skills, которые ценятся у нас в компании и на моей практике часто помогали коллегам добиваться крутых результатов. Уверен, что они же, возможно, в другой формулировке или другой последовательности будут востребованы и в любой другой компании на рынке IT.\nПредлагаю пройти по порядку и разобрать — где в реальной проектной работе может пригодиться каждый навык и как можно прокачать его, даже если вы пока не работаете на боевом IT-проекте.\nКак стать программистом, которого хотят нанять — отвечают эксперты\ntproger.ru\nПонимание ценности для клиента\nЗачем это нужно\nВо-первых, можно повысить уровень доверия между разработчиком и заказчиком. Если разработчик действительно понимает, зачем он делает то, что делает, он сможет выбрать правильный подход и решение, вовремя подскажет, что задачу можно выполнить иначе (либо не делать вообще).\nВо-вторых, можно избежать переделывания. Если разработанный продукт в итоге не решает проблему заказчика или не интересен пользователям, придётся его переделывать (клиент потратит больше денег и засомневается в нашей экспертизе).\nКонференция Lead/Manage IT\n7 февраля, Минск, 160–220 br\ntproger.ru\nСобытия и курсы на tproger.ru\nВ современном мире IT разработчику нужно понимать бизнес заказчика. Если мы разрабатываем решение для компании, которая производит удобрения, всей команде придётся хотя бы на минимальном уровне «погрузиться» (извиняюсь за каламбур) в процесс изобретения, производства или продажи этих самых удобрений. Только так можно сделать по-настоящему хороший продукт.\nКак прокачать\nВсегда думать о проблеме, а потом уже о задаче. Часто разработчик начинает выполнять задачу, не задумываясь о том, какую проблему решает. Возможно, задача не решает никакой проблемы или решает не ту. Разобраться с этим поможет метод «Пять почему»: прежде чем приступить к задаче, нужно задать пять вопросов «почему».\nРазберём на примере\nЗадача: «Добавить большую зелёную кнопку на главной странице сайта».\nСами или вместе с коллегами попытайтесь ответить на вопрос — почему?\n— Потому что клиент попросил.\nНо почему клиент попросил нас сделать это?\n— Потому что без этой кнопки страница кажется ему пустой.\nНо почему страница кажется пустой?\n— Потому что на ней мало других элементов для взаимодействия с пользователем.\nПочему же на ней мало других элементов?\n— Потому что при разработке мы использовали стандартный шаблон.\nПочему мы использовали стандартный шаблон?\n— Потому что торопились запустить сайт как можно скорее, но теперь у нас есть время, и, возможно, стоит обсудить с клиентом и дизайнерами новый шаблон страницы.\nКак вы, наверное, поняли, к пятому «почему» можно докопаться до сути проблемы и, возможно, найденное решение сильно удивит вас и заказчика.\nЧтобы лучше понимать ценность для клиента, нужно уметь смотреть на вещи его глазами. Рекомендую почитать книгу «Производственная система Toyota» (Тайити Оно), чтобы понять, как это устроено. Книга рассказывает о том, как японцы перевернули мировое представление о производстве автомобилей, подняв свою автомобильную промышленность на высочайший уровень после Второй мировой войны.\nНавыки коммуникации\nЗачем это нужно\nВзаимодействие с командой позволяет легче справляться со сложностями. Если вы не общаетесь с другими людьми, рано или поздно вы останетесь один на один со сложными, а может и вовсе невыполнимыми задачи. Поверьте, каким бы профессионалом вы себя ни ощущали, всегда найдётся задача, которую вы не в состоянии решить в одиночку.\nНавыки коммуникации нужны для обмена опытом и знаниями. Если тем, что умеете вы, будут владеть и другие члены команды, будет круто. Это работает и в обратную сторону — если в вашей команде есть человек, обладающий какими-то уникальными навыками, он может поделиться этим с вами. Это бесконечный цикл, в котором выигрывает каждый: команда, проект и, конечно же, вы.\nКак прокачать\nБудьте открытыми и идите навстречу общению, выходите к людям. Помогайте другим и не бойтесь просить о помощи — это способствует общению.\nНу и банальный совет — общайтесь! Только так можно прокачать этот навык, никакие курсы и книги тут не помогут.\nЭмоциональный интеллект\nЗачем это нужно\nПервая сторона эмоционального интеллекта — это понимание чувств и эмоций других людей. Вокруг нас много людей, они все разные: спокойные, агрессивные, угрюмые, весёлые, тихие. Будет гораздо проще общаться, если вы понимаете их чувства и мотивацию, умеете с ними взаимодействовать. Вам нужно понимать, что они из себя представляют, чего хотят и боятся.\nВторая сторона эмоционального интеллекта — это умение управлять своими эмоциями. Часто мы совершаем спонтанные действия под влиянием эмоций, например от злости или нетерпения. Если мы понимаем свои эмоции и контролируем их, то можем чаще принимать осознанные и взвешенные решения.\nКак прокачать\nВо-первых, для понимания других людей нужно учиться навыку активного слушания. Так уж мы устроены — больше любим рассказывать, нежели слушать других. Действительно, порой бывает очень сложно слушать, что нам говорят, задавать вопросы, быть вовлечённым в диалог. Навык активного слушания поможет в общении и с командой, и с заказчиком.\nВо-вторых, нужно учиться анализировать своё и чужое поведение объективно. Здесь главное слово — «объективно». Попробуйте сфокусироваться и понаблюдать за тем, как люди ведут себя, за их мимикой, интонацией. Обращайте внимание на слова и формулировки. Подумайте, почему они так говорят. Анализируйте также своё поведение — если вы где-то вспылили или промолчали, когда не стоило молчать, подумайте, почему вы так сделали. Возможно, просто переварив эту информацию, в следующий раз вы поступите иначе или найдёте подход к коллеге со сложным характером.\nDon’t be toxic — не позволяйте себе токсичного поведения. Не критикуйте и не жалуйтесь, особенно публично, потому что подобные действия деструктивны — они не несут пользы вам и окружающим, не создают ценности, а только ухудшают настроение и микроклимат в коллективе. Я бы рекомендовал почитать книгу от издательства Harvard Business Review «Эмоциональный интеллект».\nКомандная работа\nЗачем это нужно\nКак бы хороши вы ни были, есть задачи и проекты, с которыми вы не можете справиться в одиночку, не потратив на это кучу времени. Есть проекты, на которых задействовано от 100 до 1000 человек и даже больше. И вовсе не потому, что нужно создать много рабочих мест, а потому, что проект действительно масштабный, и с меньшим количеством участников его не реализовать. Каждый человек обладает уникальным набором навыков, и только собрав вместе таких людей, можно получить крутой результат.\nКак прокачать\nРешайте совместно с кем угодно, какие угодно задачи — будь то студенческий проект, домашние дела или что-то связанное с хобби — главное, делать это не одному. Например, если вы любите кататься на велосипеде — организуйте велопробег с друзьями или однокурсниками.\nОдин из способов почувствовать командную работу, поддержку, взаимовыручку — это заниматься командным видом спорта, пусть даже виртуальным (теперь будет отличное оправдание перед родителями за ночи, проведённые онлайн).\nЕсть такое понятие, как Scrum, которое пришло в IT из регби, под Scrum’ом как раз подразумевается командное взаимодействие на проекте. Рекомендую прочитать книгу отца-основателя метода управления проектами Scrum — Джеффа Сазерленда, которая так и называется «Scrum. Революционный метод управления проектами». Книга рассказывает о том, как работает Scrum в IT, как он был придуман, зачем и как компании перешли от традиционных методов управления к гибким.\nТайм-менеджмент\nЗачем это нужно\nК сожалению, вопреки общему заблуждению, мы не можем управлять временем. Его у нас ровно 24 часа каждый день. Тайм-менеджмент — это не про время, а про задачи и приоритеты. О том, как управлять делами, чтобы сохранять продуктивность в периоды высокой нагрузки и соблюдать баланс между работой и жизнью.\nКак прокачать\nЕсть много курсов, книг и статей на эту тему, но не все они одинаково полезны и не каждому подойдёт один и тот же метод. Я расскажу о тех методах управления задачами, которые оказались эффективными для меня.\nДержать все задачи в одном месте. Сегодня мы получаем информацию отовсюду — почта, мессенджер, звонки, что-то устно, что-то записано в блокноте или на стикерах. Это затрудняет работу, поэтому важно держать всё в одном месте — будь то блокнот или мобильное приложение. Я лично пользуюсь сервисом \nNirvana\n — он простой, в нём есть всё, что мне нужно и ничего лишнего.\nРазбивать большие задачи на мелкие, вплоть до таких, как «сходить», «написать», «позвонить». Человеческий мозг боится больших задач, потому что не понимает, с чего начинать, и мы начинаем прокрастинировать (если вы не знакомы с этим словом, обязательно посмотрите \nэто\n видео). Мы откладываем задачу снова и снова, до тех пор, пока не придёт дедлайн.\nПланировать, что за чем делать, когда разбиваете большую задачу на маленькие.\nНу и последнее — делайте!\nЕсть несколько книг, которые я счёл для себя полезными. Название первой книги в оригинале звучит как «Getting Things Done, GTD» Дэвида Аллена, на русский её часто переводят неправильно — «Как привести дела в порядок». На самом деле GTD имеет другое значение — как доводить дела до завершения. Вторая книга, которую могу вам порекомендовать, — «Джедайские техники» Максима Дорофеева, в ней много юмора и полезных техник.\nПереговорные навыки\nЗачем это нужно\nВо-первых, это нужно, чтобы «продавать» свои идеи и навыки. Вы можете изобрести или создать что-то очень крутое, но если не преподнести эту идею правильно, то на неё могут просто не обратить внимание, выбрать что-то значительно хуже или взять в работу идею другого человека, который был убедителен или просто громче всех кричал.\nВо-вторых, важно уметь убеждать собеседников. Переговорные навыки необходимы даже на собеседовании. Каждое собеседование — это переговоры: у вас есть своя позиция и условия, у работодателя — свои, каждая сторона защищает свои потребности и пытается найти компромисс.\nКак прокачать\nПервое — готовьтесь к переговорам. Они пройдут хорошо, если не будут для вас неожиданностью. Найдите информацию о собеседнике, подумайте, чего хотите достичь — поставьте цель.\nПрактикуйте переговоры в повседневной жизни. Например, у вас сняли деньги с карты, но вы этого не делали. Вы общаетесь с банком, банковский служащий оперирует какими-то стандартными ответами, процедурами и не очень хочет брать на себя работу по выяснению того, что же случилось с вашими честно заработанными средствами. Если вы будете готовы к переговорам и поставите цель вернуть деньги и/или получить компенсацию, вы сможете решить вопрос в вашу пользу.\nИз литературы могу посоветовать книгу Дмитрия Коткина «Жёсткие переговоры», также у него в Санкт-Петербурге есть школа переговорщиков ШИП.\nГибкость и креативность\nЗачем это нужно\nЛюбому разработчику нужно быть готовым к изменениям и уметь принимать решения в нестабильной ситуации. Именно гибкость ума и креативность, нестандартное мышление — это главные принципы Agile-подхода.\nВыпуск iPod или iPhone был возможен, в первую очередь, благодаря креативному подходу, ведь с технологической точки зрения это не было прорывной инновацией.\nКак прокачать\nЛовите себя на мысли, когда вы начинаете думать стандартно, по шаблону, руководствоваться стереотипами, старайтесь избегать этого. Часто мы сталкиваемся с фразой «здесь так заведено». Остановитесь и подумайте, почему здесь так заведено и что будет, если вы сделаете иначе, может быть, получится что-то новое и интересное.\nБеритесь смело за новые задачи — мы все делаем хорошо то, что делаем постоянно, и неохотно берёмся за что-то незнакомое, чего ещё ни разу не делали. Причина одна — мы боимся неудачи. Но неудачи — это часть обучения и развития. Fail fast, fail often!\nЗанимайтесь творчеством — игра на музыкальных инструментах или рисование развивают гибкость мышления.\nРекомендую обратить внимание на книгу «Управление продуктом в Scrum. Agile-методы для вашего бизнеса» Романа Пихлера. Она не про креативность, но затрагивает многие моменты «гибкости» ума при работе над IT-продуктом.\nПроактивность\nЗачем это нужно\nПроактивность — это полезный навык для управления своей жизнью и карьерой, чтобы не плыть по течению, а самостоятельно задавать нужный путь и траекторию. Если вы хотите выделяться из массы, быть лучшим, нужно быть проактивным — значит, делать больше, чем от вас ожидают.\nКак прокачать\nВо-первых, забудьте фразу «это не моя работа». Есть вещи, которые напрямую не относятся к вашим обязанностям, но иногда возникают ситуации, когда ваша помощь необходима — в Agile люди помогают друг другу, берут на себя смежные функции. Такой подход помогает команде быстрее и эффективнее выполнять задачи, а вам — расти. Можно ждать, когда вам дадут задачу, а можно самому задавать ритм, стремиться к автономности, инициировать задачи и таким образом делать то, что вам интересно.\nКогда я только начинал свою карьеру, мне дали очень хороший совет: прежде чем идти к более старшим товарищам с вопросом — гугли. В команде очень ценится подход, когда человек подходит не с «голым» вопросом, а уже владеет какой-то информацией, вариантами решения и спрашивает не «как это сделать», а «как правильнее».\nЕсть очень известная книга-бестселлер «7 навыков высокоэффективных людей» Стивена Кови, в ней есть много полезных техник, которые помогут развить в себе проактивную личность.\nНавыки презентации\nЗачем это нужно\nВсё просто — чтобы демонстрировать результаты своей работы и делиться опытом с коллегами, а также обучать других.\nКак прокачать\nСмотрите, как это делают другие. Просматривайте хорошие публичные выступления, запоминайте то, что вам показалось классным и зацепило. Если есть возможность где-то выступить публично, даже просто сказать тост не празднике — делайте это, не стесняйтесь. Тяните руку на лекциях и конференциях, выходите к доске, в круг, из ряда. Не прячьтесь за спинами других людей!\nВместо литературы я бы посоветовал смотреть канал \nTED\n, где собраны лучшие публичные выступления самых сильных спикеров.\nМенторинг\nЗачем это нужно\nМенторинг необходим, чтобы обмениваться знаниями с коллегами и помогать адаптироваться новичкам. Помимо этого, обучение других укрепляет собственные знания. В EPAM очень развита программа менторинга, она позволяет растить внутри компании уникальных специалистов, повышать общую техническую экспертизу.\nКак прокачать\nЕсли вы умеете что-то, чего не умеют другие: рисовать, играть на пианино, решать задачи по математике — пробуйте себя в роли репетитора. Это тренирует терпение и другие необходимые навыки. Ещё один вариант — проведите мастер-класс, пусть даже по складыванию бумажных журавликов из А4.\nВывод\nВ процессе чтения статьи у вас могла закрасться опасная мысль: возможно, для успеха в карьере нам достаточно только soft skills? Ответ: конечно же нет. В первую очередь, любые IT-компании, и наша в том числе, ищут талантливых профессионалов, проверяют и оценивают ваши навыки специалиста (hard skills). Но только когда soft и hard skills гармонично сочетаются в одном человеке, он вырастает выдающимся профессионалом.\nSoft Wars: прокачиваем soft skills за 7 дней\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nSoft Skills\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/iconfinder-icon-3-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/IMG_01161-e1575375828971-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"960px\" viewBox=\"0 0 960 540\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/image2-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" viewBox=\"0 0 800 450\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/image3.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1194px\" viewBox=\"0 0 1194 583\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Picture11.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1465px\" viewBox=\"0 0 1465 693\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Picture31.jpg"
                ]
            }
        ]
    },
    {
        "page": 2,
        "url": "https://tproger.ru/page/2/",
        "posts": [
            {
                "url": "https://tproger.ru/translations/3-basic-distances-in-data-science/",
                "title": "Евклидова, L1 и Чебышёва — 3 основные метрики, которые пригодятся в Data Science",
                "created_date": "3 декабря 2019 в 16:05",
                "body": "Перевод статьи \n«3 distances that every data scientist should know»\nНе важно, начинаете вы осваивать Data Science или работаете в этой сфере не первый год, вам наверняка пригодятся эти метрики. Разбираемся, что они из себя представляют и чем отличаются друг от друга.\nЕвклидово расстояние (расстояние по прямой)\nЕвклидово расстояние самое интуитивное для понимания: именно Евклидову метрику мы представляем, когда кто-то просит нас измерить расстояние между точками.\nЕвклидово расстояние — это прямая линия между двумя точками с координатами X и Y. Например, одной из таких точек может быть город на карте с его координатами долготы и широты.\nЕвклидово расстояние характеризуется прямой линией. Допустим, вам нужно измерить расстояние по прямой между точками A и B на карте города, приведённой ниже.\nЕвклидово расстояние между двумя точками считается по теореме Пифагора\nДля расчёта Евклидового расстояния вам понадобятся лишь координаты этих двух точек. Дистанцию между ними можно будет рассчитать по формуле Пифагора.\nТеорема Пифагора гласит, что можно рассчитать длину «диагональной стороны» (гипотенузы) прямого треугольника, зная длины его горизонтальной и вертикальной стороны (катетов). Формула выглядит так: a² + b² = c².\nПример расчёта Евклидового расстояния\nПрим. ред.\n В четвёртой строке вычислений допущена ошибка: (-260)^2 = 67 600, а не 76 600. Тогда результат будет равен ~321.\nРасстояние L1 (расстояние городских кварталов)\nРасстояние L1 также известно как расстояние городских кварталов, манхэттенское расстояние, расстояние такси, метрика прямоугольного города — оно измеряет дистанцию не по кратчайшей прямой, а по блокам. Расстояние L1 измеряет дистанцию между городскими блоками: это расстояние всех прямых линий пути.\nНа следующем изображении показано расстояние L1 между двумя точками.\nРасстояние L1 между двумя точками по блокам\nКроме показанного пути существует несколько альтернативных способов. Например, от точки A можно подняться на два блока вверх, а потом на три блока вправо, либо же на три блока вправо и два блока вверх.\nНо расстояние L1 — это всё же просто дистанция, а поэтому траектория здесь не имеет значения. Единственное, что нужно понимать, это примерный путь: нужно пройти какое-то количество X блоков на восток и Y блоков на север. Сумма расстояний этих блоков и будет расстоянием L1 от точки A до точки B.\nПример расчёта расстояния L1 между двумя точками\nРасстояние Чебышёва (метрика шахматной доски)\nРасстояние Чебышёва известно ещё как расстояние шахматной доски. Чтобы понять принцип такой метрики, нужно представить короля на шахматной доске — он может ходить во всех направлениях: вперёд, назад, влево, вправо и по диагонали.\nРасстояние Чебышёва между двумя точками\nРазница расстояния L1 и расстояния Чебышёва в том, что при переходе на одну клетку по диагонали в первом случае засчитывается два хода (например вверх и влево), а во втором случае засчитывается всего один ход.\nЕщё эти оба расстояния отличаются от Евклидового расстояния тем, что у Евклидового движение по диагонали рассчитывается по теореме Пифагора.\nСравнение путей 3 метрик\nРасстояние Чебышёва можно представить как проход по шахматной доске.\nВот ещё один пример представления расстояния Чебышёва. Допустим, у вас есть дрон с двумя независимыми моторами: первый мотор тянет дрон вперёд, второй — в сторону. Оба мотора могут работать одновременно и равномерно на максимуме своей мощности.\nПоэтому дрон может передвинуться на одну клетку по диагонали так же быстро, как по горизонтали или вертикали.\nПосмотрите ещё раз на карту города по расстоянию Чебышёва. Первый шаг — оба мотора работают одновременно, второй шаг идентичен первому, а на третьем шаге мотор, тянущий дрон вперёд, отключается, и дрон смещается в сторону.\nТаким образом, расстояние Чебышёва определяется как самая большая дистанция на одной оси.\nПример расчёта расстояния Чебышёва между двумя точками\nПрим. ред.\n Полученный результат является условным и некорректно сравнивать его с другими результатами.\nНе смешно? А здесь смешно: \n@ithumor\nData Science\n, \nДля начинающих\nТакже рекомендуем:\nИспользование регулярных выражений в Python для новичков\nКак работает CSS Flexbox: наглядное введение в систему компоновки элементов на веб-странице\nБесплатные онлайн-игры, которые обучат вас программировать\nРегулярные выражения для новичков",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/distance-icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"762px\" viewBox=\"0 0 762 675\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/EuclidMap.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"459px\" viewBox=\"0 0 459 378\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/EuclidFormul.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"737px\" viewBox=\"0 0 737 674\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/L1DistMap.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"466px\" viewBox=\"0 0 466 363\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/L1Formul.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"735px\" viewBox=\"0 0 735 652\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/ChebyshevMap.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1150px\" viewBox=\"0 0 1150 423\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/3vars.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"493px\" viewBox=\"0 0 493 341\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/ChebyshevFormul.png"
                ]
            },
            {
                "url": "https://tproger.ru/experts/is-c-a-must-learn-for-all-programmers/",
                "title": "Должен ли «настоящий» программист знать язык Си — отвечают эксперты",
                "created_date": "2 декабря 2019 в 13:03",
                "body": "Ходит легенда, что знание Си сильно прокачивает навыки программиста, даёт ему глубокое понимание работы компьютерных систем и густую бороду. О том, так ли это и нужно ли всем программистам в обязательном порядке учить Си, мы спросили у экспертов.\nПетр Урваев\n, \nруководитель технологических решений SimbirSoft\nДа, сейчас запросов на разработку современных продуктов на языке С относительно немного. Как показывает наш портфель проектов, выше спрос на С++. Однако, в программисте мы видим, прежде всего, инженера, способного разобраться со сложными вопросами, которые, возможно, до него ещё никто не решал. Поэтому знание основ С — это плюс для общеинженерного развития специалиста.\n29\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n29\nПовысить\nПонизить\nАлексей Анастасьев\n, \nтехнический директор ГК «CиДиСи» (CDC)\nВ современной индустрии преобладает разработка с использованием объектно-ориентированного программирования (ООП), язык Си — процедурный и сейчас стал «нишевым». Он используется в областях, где существуют жесткие требования к производительности, или аппаратные ресурсы платформы сильно ограничены. Примером может стать ядро Linux или программирование микроконтроллеров.\nВ мобильной разработке язык Си может использоваться при написании игр или для создания native методов Java классов, реализация которых использует вызовы JNI.\nЯзык Си считается языком низкого уровня. Начав изучение программирования с него, специалист будет лучше понимать базовые вещи в разработке. Кроме того, существует множество языков программирования, синтаксис которых берёт начало у языка Си, например C++, Java, C#. Знание «первоисточника» наверняка облегчит их изучение.\nТем не менее, базу (классические структуры данных, битовые операции) можно изучать на примерах ООП-языков, особой разницы нет. Кроме того, зачастую такой уровень погружения в детали, который даёт Си, на практике не нужен.\nПрограммист высокого уровня должен иметь широкий кругозор и не замыкаться в рамках одной парадигмы программирования или языка. Сегодня в России не так много специалистов, хорошо владеющих «низкими» языками программирования, а знание Си может стать важным конкурентным преимуществом. \n21\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n21\nПовысить\nПонизить\nРустам Нагаев\n, \nтехнический директор по разработке в «Инновационном центре Ай-Теко»\n«Настоящему» программисту стоит понимать концепции, которые лежат в основе языка Си — как работает управление памятью, указатели, структуры. Здесь можно провести аналогию: нужно ли знать водителю устройство автомобиля? Если человек хочет просто перемещаться из точки в точку, то ему вряд ли пригодятся такие знания в полной мере. А вот если он хочет стать хорошим водителем, то с некоторыми принципами работы автомобиля всё же придётся разобраться.\nОднако изучать базу можно и на примере других языков. Возможностей очень много, поэтому знать именно язык Си совсем не обязательно. \n35\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n35\nПовысить\nПонизить\nСергей Комаров\n, \nдиректор департамента информационных решений компании РДТЕХ\n\nИзучать какой-либо язык программирования, не имея планов по дальнейшему применению этих знаний на практике, к сожалению, бессмысленная затея. Знания, не подкреплённые практикой, как минимум будут неполными, ну а как максимум — «улетучатся» через полгода-год.\nЕсли есть интерес заглянуть поглубже и понять работу компьютерных систем, надо ориентироваться не столько на язык, сколько на разработку какого-либо системного программного обеспечения. Например написать собственный драйвер под какое-либо устройство (например подключаемое через USB). В процессе работы над подобной задачей потребуется изучить, каким образом происходит взаимодействие операционной системы и внешнего устройства, особенности системных API и протоколов и многое другое.\nНесколько реализованных проектов по разработке системного ПО разных классов — и у вас уже будет не только понимание базовых принципов функционирования операционных систем, но и ценный практический опыт. Естественно, реализация будет на языке C/С++! \n13\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n13\nПовысить\nПонизить\nВиталий Чижков\n, \nруководитель группы разработки проектов Тверского технологического центра Accenture\nДля изучения базовых структур данных и алгоритмов подойдет большинство языков программирования. Для какой-то конкретной области — наоборот, понадобится знание определённого языка. И маловероятно, что это будет именно Cи. Так что на этот вопрос нет однозначно правильного ответа. «Настоящий» программист — это любой человек, который пишет код и получает за это деньги. И большинство таких ребят начинали с совершенно разных языков. Всё остальное — это темы холиваров, не более.\nНо сам вопрос — острый, и фокус в нём вовсе не на Cи, а на том, какую технологию выбрать для изучения сейчас, чтобы принимать участие в реальных проектах в будущем. Конечно, верный ответ тут: «любую».\nВедь язык — это лишь инструмент для человека, который знает математику, алгоритмы и архитектуру систем. Но на этапе обучения хочется конкретики. Учить что-то сейчас — лучше, чем не учить ничего, но многообразие технологий пугает.\nЯ считаю, что Cи как первый язык — это неудачный выбор. Там нет ни одной интересной парадигмы. Все аргументы вроде «Cи — основа основ», «Cи самый быстрый», «Cи позволяет лучше понимать базовые вещи» не выглядят убедительными. Си важный язык для определённых экосистем, например микроконтроллеров, утилит и ядра ОС, драйверов, встраиваемых систем и т. п. Но это довольно узкие области. Человек, который учит Си конкретно для этих кейсов, обычно не руководствуется понятиями «трушности» технологии.\nДля обучения на первоначальном этапе я бы посоветовал рассматривать Java или C++, у них хорошая ООП-парадигма и много интересных новинок в стандартах. Кроме того, они более универсальные и востребованные. В C++ порог входа чуть выше. Также неплохим вариантом будет изучение JavaScript. По тем же причинам.\n30\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n30\nПовысить\nПонизить\nАлександр Зацепин\n, \nИсполнительный директор «Протекшен Технолоджи»\nДа, действительно, в ряде случаев изучение C/С++ улучшает понимание того, как работает компьютер и способствует значительному улучшению качества кода, написанного даже на других языках. Особенно это полезно программисту, для которого единственным известным языком является какой-нибудь достаточно высокоуровневый язык (Python, JavaScript, PHP). С другой стороны, возможно, вы уже знакомы с основами работы компьютера и не собираетесь программировать на C/C++. Тогда терять время на изучение этих языков не стоит. Можно легко проверить себя, ответив на вопросы ниже. Если вы чётко представляете ответы на них, то, скорее всего, C/C++ вам нужно изучать, только если вы собираетесь писать программы именно на этих языках:\nКак сложные объекты передаются в функции в известном мне языке программирования? Сколько времени и памяти тратится при такой передаче?\nКак рассчитать требуемый объём стека для рекурсивной функции, если известна максимальная глубина рекурсии?\nЧто такое выделение и освобождение памяти? Где в моей программе память выделяется, а где освобождается? Как спрогнозировать, сколько памяти будет потреблять моя программа?\nЧто такое полиморфизм в объектно-ориентированном программировании?\nЧто такое шаблоны (паттерны) проектирования программ? Известны ли вам какие-нибудь из них?\n14\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n14\nПовысить\nПонизить\nПавел Новиков\n, \nтимлид Android-разработки в компании «МойОфис»\nЯзык Си действительно один из самых старых и популярных инструментов для разработки ПО. Его используют там, где необходима высокая производительность и низкоуровневая работа с железом: системное программирование, работа с микроконтроллерами, разработка операционных систем. Очевидно, что программисты, работающие над ПО такого рода, должны хорошо знать свой основной инструмент.\nОбязательно ли знать Си современному веб- или мобильному разработчику? Я думаю, что нет. В большинстве случаев в ежедневной разработке знание Си ему не потребуется. С другой стороны, будет ли вредно понимание основ и концепций этого языка? Точно нет. Я уверен, что интересы «настоящего» программиста (в моем субъективном понимании) должны выходить за пределы ежедневной рутины.\nПоэтому, я считаю, что трата времени на изучение основ этого языка — это долгосрочная инвестиция в своё профессиональное образование. Конечно, с оговоркой на то, что при выборе глубины изучения нужно руководствоваться здравым смыслом.\n35\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n35\nПовысить\nПонизить\nПавел Андрющенко\n, \nруководитель направления по разработке на Java в компании MediaSoft\nНе должен.\nНо попробовать стоит! Любой язык программирования — это инструмент для решения определённого круга задач. Чем большим количеством инструментов ты владеешь, тем больше разнообразных проблем ты можешь решить, а, следовательно, тем более ценным специалистом ты являешься. А если ты в начале своего пути в профессии, то тут как в бурной молодости: нужно попробовать всё, чтобы решить, что твоё, а что — нет.\nИзучение Си действительно способствует пониманию многих фундаментальных вещей. Лично я в университете знакомство с алгоритмами и структурами данных начинал именно на Си, потому что программирование на таком низкоуровневом языке помогает разобраться во всех нюансах, которые инкапсулированы в современных языках высокого уровня, и лучше понимать, как работают приложения.\nНо в большинстве современных задач эти нюансы знать совершенно не обязательно: практически для каждого языка есть большое количество надёжных фреймворков, ставших отраслевыми стандартами, которые освобождают разработчика от низкоуровневых операций, и на первый план выходит знание подходов к разработке и архитектурных паттернов.\nСи — это язык, который сейчас имеет свою большую нишу: он используется в операционных системах и системах реального времени, область применения которых очень широка — от IoT до управления самолетами. Если такой «хард и металл» — это то, чем вы хотите заниматься, учить Си нужно, но в других сферах деятельности гораздо эффективнее разрабатывать на других языках, и там знание Си, скорее всего, никак не поможет.\n28\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n28\nПовысить\nПонизить\nИван Овчинников\n, \nдекан профессии «Программист С++» образовательного портала GeekBrains\nОднозначно можно сказать только то, что грести всех под одну гребёнку неверно. И разделение на «настоящих» и «ненастоящих» программистов — одна из попыток людей систематизировать то, что не только не поддаётся систематизации, но и не нуждается в ней. Абсолютно равнозначным в этой ситуации будет такой вопрос: «Должен ли “настоящий” программист С знать другие языки?». Да, С — это старый, завоевавший уважение язык, повлиявший на многие другие, но в 2019-м году нет явной необходимости его учить, чтобы уметь программировать, закрывать задачи бизнеса или понимать внутренние процессы в приложениях. Знание С и умение, например, работать с указателями, помогает в работе, это факт. Очень сильно помогает быстро выучить какой-нибудь С-подобный язык, это тоже правда. Организует и приучает к строгости, возможно. Но так, чтобы «должен, иначе не настоящий программист» — вряд ли.\nВ своей практике (кроме периода, когда я профессионально разрабатывал на С/С++) я несколько раз сталкивался с ситуациями, когда проще написать на С/С++, чем на каком-то другом языке, но я абсолютно уверен, что это скорее исключения, чем что-то происходящее с людьми часто. Информационные технологии развиваются гораздо динамичнее, чем это может себе позволить любой язык программирования, тем более такой архаичный, как С, поэтому и появляются новые языки, выполняющие поставленные перед ними задачи лучше других. Да, разработчики этих новых языков зачастую используют С «под капотом», но программисту знать об этом нужно в исчезающе малом количестве случаев.\nЯ убеждён, что разговор о «настоящих» и «ненастоящих» программистах заводят две категории людей: сами программисты С, потому что очень сильно гордятся своим знанием сложного и старого языка, стоявшего у истоков, и люди, ничего не понимающие в программировании, но по какой-то причине вынужденные взаимодействовать с программистами. Для них так проще отличить хорошего программиста от плохого, не вдаваясь в детали. Знаешь С — хороший, не знаешь С — плохой. Не поймите меня неправильно, первым действительно есть чем гордиться, а вторым действительно не нужно вникать в детали. Но всегда нужно двигаться вперёд, и если это движение не связано с конкретным языком программирования, что ж, значит так нужно миру, бизнесу и технологиям, а если вам позарез нужно проверить квалификацию программиста, лучше спросите его об алгоритмах и паттернах.\n30\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n30\nПовысить\nПонизить\nДмитрий Рогов\n, \nдиректор по технологическому развитию ИТ-компании «АйДи – Технологии управления»\nОтвет на этот вопрос будет зависеть, прежде всего, от области разработки: например веб-разработчику знание языка С в его профессиональной карьере пригодится навряд ли.\nПри этом разработчики по мере роста своего профессионализма в области разработки ПО неизбежно приходят к необходимости изучения С, поскольку на этом языке написан огромный массив кода, лежащий в основе множества современных ИТ-продуктов и систем. И даже в тех случаях, когда речь не идёт о непосредственном использовании С, идеи этого языка так или иначе применялись в других языках, его влияние переоценить невозможно.\nС другой стороны, С несёт в себе врожденную сложность — требует от программистов глубокого понимания архитектуры компьютеров, адресной арифметики и ряд других моментов, что очень полезно для общего развития специалиста.\nМожно говорить, что если разработчик не испытывает проблем с пониманием адресной арифметики, то он может мыслить системно и делает это серьёзном уровне, а значит, в теории сможет решать более комплексные практические задачи.\nВ целом же общемировой тренд разработки направлен на упрощение труда программиста таким образом, чтобы получать от специалиста наименьшего уровня квалификации наивысший возможный продаваемый результат. На этот тренд работает и автоматизация ряда задач разработки с помощью высокоинтеллектуальных инструментов. С в этом свете выглядит как наследие первых поколений разработчиков, среди которых было множество серьёзных математиков.\nСейчас кадров с таким бэкграундом в подготовке становится всё меньше, поэтому заявление «если не знаешь С — то ты не программист» теряет актуальность. Прикладные задачи можно спокойно решать и без системного понимания сферы ИТ и места в ней поставленной задачи.\n19\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n19\nПовысить\nПонизить\nПавел Степанов\n, \nSoftware Development Manager в DINS\nНаверное, стоит начать с того, что такое «настоящий программист». Ещё не так давно программисты практически не разделялись по своей специализации — ну, разве что по языкам. Тем не менее, наиболее сложным видом программирования считалось системное программирование, которое и сегодня почти невозможно без знания С (а также ассемблера и микроархитектуры железа, что, несомненно, тоже должно было входить в арсенал «настоящего программиста»).\nС другой стороны, сейчас существуют совершенно несвязанные друг с другом области работы программистов; специалист в области BigData должен иметь другую квалификацию, нежели специалист в области внедрения ERP. Соответствующим образом разделяются и требования к «настоящему программисту», например «настоящий программист» в области искусственного интеллекта не может не знать математику. Поэтому если вы не знаете С — не переживайте, вы всё ещё вполне можете себя найти, скажем, в качестве frontend разработчика.\n8\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nИван Загайнов\n, \nруководитель группы Computer Vision ABBYY\nПрограммисту может потребоваться знание языка C в зависимости от специфики его задач. Например, если программист пишет драйверы для операционной системы, скорее всего ему нужно знать C и Assembler. Если он разрабатывает веб-интерфейсы и программирует сайты, ему точно не пригодится этот язык.\nЕсли же говорить о программистах-разработчиках-исследователях, которые пишут не просто реализацию какого-то известного подхода, то скорее уместно говорить о Python и С++. Первый хорошо подходит для прототипирования, а последний часто используется в продакшн-коде крупных компаний. У нас это основные языки программирования, в целом всё зависит от того, в какой отдел и на какую позицию приходит работать человек. Сейчас язык C встречается мало где, но есть ниши, где требуется знание именно этого языка. Однако лично я не считаю C обязательным языком для каждого программиста.\n16\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nАнтон Чан\n, \nIT-директор финтех-компании Cashwagon\nЕсть очень много высокоуровневых языков: для Ruby on Rails, например, достаточно 3–4 месяца, чтобы его освоить хотя бы на базовом уровне. Си — более академический язык, и даёт фундамент для понимания, как работают другие языки. Люди с опытом в Си имеют больше фундаментальных знаний, а также представление о том, как устроены языки программирования, и какие операции и логика будут/могут влиять на память, CPU и другие компоненты приложения и железа. Это связано с тем, что данный язык требует большого внимания к этим деталям и позволяет через код влиять на них. Тратить или не тратить время на изучение — решает каждый сам в зависимости от своих целей. Если говорить о разработке промышленных решений, то знание языка Си пригодится. Если речь идёт о разработке сайтов, панелей админок и небольших стартапов — то знаний других языков будет достаточно.\n33\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\nПавел Кейно\n, \nпрограммист, веб-технолог, руководитель магистерской программы IT-центра Московского авиационного института\nЕсли человек хочет стать хорошим строителем, он должен знать, как устроен дом: понимать, как делается кирпичная кладка, какие материалы нужно использовать, чтобы дом выдержал все катаклизмы природы, а также то, как сделать дом удобным и безопасным для будущих новосёлов. По этой же причине хороший программист должен понимать, как устроены базовые алгоритмы, а также какие и в каком количестве программа потребляет системные ресурсы. Для этого наилучшим образом подходит язык Си, где взаимодействие с машиной происходит на достаточно низком уровне, но который, в отличие от языка Ассемблера, обладает всё теми же конструкциями, что и большинство языков более высокого уровня.\nКто-то становится журналистом, кто-то писателем, а кто-то учёным. Понятно, что все эти профессии объединяет одно — способность чётко и правильно выражать свои мысли: журналисту — в публицистическом стиле, писателю — в художественном, учёному — в научном. Точно так же и изучение Си способствует вырабатыванию собственного стиля, который может быть применён в дальнейших языках, специализирующихся на своих задачах. Знания Си одинаково полезны будут и системному программисту, и прикладному, и веб-технологу. Стоит только вспомнить, какие языки используют похожий синтаксис: C++, C#, Java, JavaScript, PHP, Perl, AWK. И многие другие.\nЕщё один аргумент в пользу того, чтобы начать изучение программирования именно с Си, заключается в том, что этот язык не прощает ошибок. Здесь не получится небрежно обойтись с памятью, уповая на сборщика мусора или на то, что интерпретатор пропустит мимо выход за пределы массива. Здесь нет ни интерпретатора, ни сборщика мусора. Поэтому такие ошибки будут сразу видны, и в сотый раз получив сообщение от операционной системы Segmentation fault, ученик начнёт задумываться, что, в конечном счёте, приведёт к формированию правильного стиля кода и поможет ему в дальнейшем в освоении новых языков.\n\nКонечно, освоивший Си с лёгкостью перейдёт на более высокоуровневые инструменты, но навык хорошего стиля, при достаточном уровне проработки на Си, у такого ученика останется навсегда. А если ученик особо пытливый, он захочет разобраться, как именно исполняется его программа на вычислительной машине и откроет скомпилированный файл в дизассемблере. Благодаря тому, что Си не оброс большим количеством наслоений и абстракций, не составит большого труда сопоставить полученный код с тем, что было изначально. А это первый шаг к изучению языка ассемблера. Сделав такой шаг, ученик встаёт уже на путь системного программиста, программиста микроконтроллеров или исследователя программ. Удивительный мир низкого уровня особенно понравится перфекционистам, которые захотят досконально изучить принципы функционирования вычислительной машины и полностью контролировать её.\nНедаром язык Си называет в шутку «кроссплатформенным ассемблером». И хотя словосочетание само по себе является оксюмороном, доля правды в этой шутке всё же есть. Например, интерфейс системных вызовов в UNIX-подобных операционных системах осуществлён именно с использованием библиотек Си. На этом языке также разрабатываются операционные системы, драйверы, программное обеспечение для микроконтроллеров, на этом языке пишутся компиляторы и трансляторы. Компилятор gcc, используемый для компиляции программ на Си — одна из главных программ, входящая в базовую комплектацию любого дистрибутива Linux, поскольку сборка остальных пакетов и модулей происходит путём компиляции исходников именно на этом языке. Стоит также отметить, что большинство технологий и средств разработки более высокого уровня изначально были написаны на Си: интерпретируемые языки вроде Python, Perl и PHP, виртуальная машина Java и многое другое.\n\nВремя выполнения того или иного алгоритма и потребление им памяти максимально «честно» можно вычислить именно на языке Си, ведь никаких дополнительных накладных расходов при выполнении программы не происходит. Вот почему это особенно полезно для проверки себя на правильность реализации тех или иных алгоритмов. В учебной программе бакалавриата МАИ уже пять лет успешно изучается курс Си, вытеснив собой язык Pascal. И хотя Pascal даёт возможность понять работу основных алгоритмов, в нём многие ошибки контролируются на уровне синтаксиса. Вот почему важно делать много ошибок на самом начальном этапе, разбирать их, контролировать и не допускать в будущем. Также важно понимать не только ход работы алгоритма, но и представлять, сколько такой алгоритм потребляет системных ресурсов. Классический синтаксис важно изучить, чтобы не возникло проблем с изучением других технологий в будущем. Вот главные причины, почему стоит начать изучение программирования с этого замечательного языка.\n48\nОтвет эксперта\n2019-12-02T13:03:29+03:00\n\nРейтинг полезности ответа: \n48\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, должен ли тру-программист знать Си?\nВ общем и целом, эксперты сошлись на мнении, что не должен.\nСи может дать более глубокое понимание того, как работают другие языки, как код влияет на железо и так далее. Однако, нужно ли вам это глубокое понимание в обязательном порядке? Сейчас существует много языков и много направлений в разработке, где Си либо не нужен, либо нужен редко. Да, есть определённый круг задач, где знание Си необходимо. Но мы ведь говорим не про отдельные кейсы, а про всех программистов в целом?\nС другой стороны, программирование на таком низкоуровневом языке помогает разобраться во всех нюансах, которые инкапсулированы в современных языках высокого уровня, поэтому Си можно изучать для саморазвития и повышения своего профессионального уровня.\nНо всё-таки, в первую очередь учите те языки, которые нужны для решения ваших задач, а остальные оставьте для общего развития.\n100500\nЛучший ответ\n2019-12-02T13:03:29+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nЯзык Си\nТакже рекомендуем:\nКниги по языку Си для начинающих и не только\nЗачем и как эффективно учить язык программирования Си: исчерпывающая подборка ресурсов для освоения\nНайдите ошибки в следующем коде\nДан код: unsigned int i; for (i = 100; i >= 0; --i) printf(\"%d\\n\", i); В коде есть две ошибки. \nМакросы в Си: как, когда и зачем?",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/beard-man-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/1iTn0ir0fBY-e1573477470375-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/89807_005337f4_33zzkncH_1571408431-e1571500370142-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/76249_372fb7da_J2J7TBot_1574783931-e1574947874590-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/12/rdtex_Komarov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/02/IMG_5890-e1549020792239-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/71902_78a888dc_72WpTdm3_1564567268-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/28150_989ccf98_cKSsbmUq_1569836630-e1571401708250-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/45000_7ee76c8f_17iERkEQ_1574426902-e1574949351255-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/73473_08c2cdc8_vtRzaKb2_1569423641-1-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/08/D.Rogov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Pavel-Stepanov-e1574509112705-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/07/Ivan-e1562489986498-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/73a9f6e9-95b1-409b-8d1f-fa7a2c3d6701-e1575028711507-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/12/Pavel-Kejno-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/video/diy-arduino-fairy-lights/?autoplay=1",
                "title": "Готовимся к Новому году: простая гирлянда на Arduino",
                "created_date": "30 ноября 2019 в 13:04",
                "body": "Адаптированный перевод статьи \n«Let’s Make Arduino LED Holiday Lighting»\nК Новому Году везде начинают продавать гирлянды, но мы не ищем лёгких путей и предлагаем вам сделать гирлянду самостоятельно. Это просто, интересно и недорого, а заодно позволит вам потренироваться в работе с Arduino. Итак, начнём.\nПримечание\n Для создания подобной гирлянды вам потребуются минимальные знания в Arduino. Однако если вы в себе не уверены — ничего страшного:\nArduino: выбор платы, подключение и первая программа\ntproger.ru\nЧто понадобится\nArduino Uno;\nадресная светодиодная лента на WS2811;\nисточник питания для ленты.\nСветодиодная лента\nСветодиодная лента — это группа из светодиодов, размещённых на гибком и клейком основании. Лента может быть длиной от 30 см до 5 м.\nСуществует два типа лент: с синхронизированными светодиодами и адресными. Для гирлянды понадобится второй тип. В этой ленте к каждому светодиоду подключён специальный чип. Эти чипы соединены последовательно. Всего лишь по одному проводу, подключенному к первому чипу, можно управлять цветом отдельно каждого светодиода в ленте.\nТрадиционная адресная светодиодная лента\nУ таких адресных светодиодных лент множество форм-факторов. Есть \nтрадиционные формы\n лент или же \nматрицы\n. Есть ленты с отдельными светодиодами, которые лучше всего подойдут на роль гирлянды. Вот некоторые их них:\nраздельные адресные светодиоды\n;\nсветодиоды в виде бочонков\n;\nполусферические светодиоды (\nвариант 1\n, \nвариант 2\n);\nсветодиоды в виде ёлочных шишек\n;\nсветодиоды в раздельных сферах\n;\nсветодиоды наподобие гирлянды\n.\nДля примера будет использоваться последний тип адресной ленты:\nКонтроллер\nВ гирлянде контроллером ленты будет Arduino Uno. Но для этих целей подойдёт всё, что под руку попадётся: различные платы Arduino, МК серии ESP, STM, AVR, PIC, микрокомпьютеры Raspberry Pi. Единственное, о чём ещё следует помнить, это о логическом уровне контроллера. Некоторые из них работают на 3-вольтовой логике, и нужно будет использовать конвертер уровней.\nТока, выдаваемого с Arduino Uno, не хватит на запитывание ленты. Поэтому нужно использовать внешний источник питания на 5В (обратите внимание, некоторые ленты могут запитываться от 12В). Потребляемый ток напрямую зависит от длины ленты, поэтому нужно внимательно подбирать источник питания в зависимости от ваших целей. Минусовые контакты источника питания и контроллера нужно объединить. Плюс от источника питания нужно подключить напрямую к плюсовому контакту ленты. Сигнальный же контакт ленты нужно подключить к любому порту Uno.\nСхема подключения ленты к контроллера и источнику питания\nДля управления лентой понадобится специальная библиотека. В \nэтой статье\n детально описывается установка библиотеки Adafruit NeoPixel.\nПосле скачивания \nzip-файла\n, нужно установить его в Arduino IDE. Переходите в \nСкетч\n→\nПодключить библиотеку\n→\nДобавить .ZIP библиотеку\n и выберите нужный файл.\nЗажигаем!\nВначале стоит проверить схему на работоспособность. Для этих целей подойдёт следующий код:\n#include \r\n \r\n#define PIN 6 // Номер пина, к которому подключен сигнальный провод ленты\r\n#define LED_NUM 50  // Количество светодиодов в ленте\r\n \r\nAdafruit_NeoPixel ledtape = Adafruit_NeoPixel(LED_NUM, PIN, NEO_GRB + NEO_KHZ800);  // Если у ленты контроллер WS2812, то третий параметр должен быть NEO_KHZ800, а если WS2811 — NEO_KHZ400\r\n \r\nvoid setup() {\r\n  ledtape.begin();\r\n  ledtape.show(); // Выключит все светодиоды\r\n}\r\n \r\nvoid loop() {\r\n uint16_t i, j;\r\n \r\n for(j=0; j <256; j++) {\r\n   for(i=0; i < ledtape.numPixels(); i++) {\r\n     ledtape.setPixelColor(i, rotateColor((((i) * 256 / ledtape.numPixels()) + j) & 255));\r\n   }\r\n   ledtape.show();\r\n   delay(20);\r\n }\r\n}\r\n \r\n// Функция прохода по цветам\r\nuint32_t rotateColor(byte WheelPos) {\r\n  if(WheelPos < 85) {\r\n   return ledtape.Color(WheelPos * 3, 255 - WheelPos * 3, 0);\r\n  } else if(WheelPos < 170) {\r\n   WheelPos -= 85;\r\n   return ledtape.Color(255 - WheelPos * 3, 0, WheelPos * 3);\r\n  } else {\r\n   WheelPos -= 170;\r\n   return ledtape.Color(0, WheelPos * 3, 255 - WheelPos * 3);\r\n  }\r\n}\r\n\nЕсли все компоненты исправны и схема собрана корректно, то вы увидите примерно такую картину:\n\nЕсли же немного изменить код, то можно заставить светодиоды загораться один за другим:\n#include \r\n \r\n#define PIN 6 // Номер пина, к которому подключен сигнальный провод ленты\r\n#define LED_NUM 50 // Количество светодиодов в ленте\r\n \r\nAdafruit_NeoPixel ledtape = Adafruit_NeoPixel(LED_NUM, PIN, NEO_GRB + NEO_KHZ800);  // Если у ленты контроллер WS2812, то третий параметр должен быть NEO_KHZ800, а если WS2811 — NEO_KHZ400\r\n \r\nvoid setup() {\r\n  ledtape.begin();\r\n  ledtape.show(); // Выключит все светодиоды\r\n}\r\n \r\nvoid loop() {\r\n  uint16_t i, j;\r\n \r\n// Тут изменяется цвет светодиодов\r\n for(i=0; i < ledtape.numPixels(); i++) {\r\n   ledtape.setPixelColor(i, Wheel((((i) * 256 / ledtape.numPixels()) + j) & 255));\r\n   ledtape.show();\r\n   ledtape.setPixelColor(i, ledtape.Color(0,0,0));\r\n   delay(20);\r\n   ledtape.show();\r\n }\r\n}\r\n \r\n// Функция прохода по цветам\r\nuint32_t rotateColor(byte WheelPos) {\r\n  if(WheelPos < 85) {\r\n   return ledtape.Color(WheelPos * 3, 255 - WheelPos * 3, 0);\r\n  } else if(WheelPos < 170) {\r\n   WheelPos -= 85;\r\n   return ledtape.Color(255 - WheelPos * 3, 0, WheelPos * 3);\r\n  } else {\r\n   WheelPos -= 170;\r\n   return ledtape.Color(0, WheelPos * 3, 255 - WheelPos * 3);\r\n  }\r\n}\r\n\nТакая гирлянда подойдёт как для наружного применения, так и для традиционного размещения на ёлке.\nНе смешно? А здесь смешно: \n@ithumor\nArduino\n, \nDIY\n, \nHardware\n, \nДля начинающих\n, \nНовый Год\nТакже рекомендуем:\nИспользование регулярных выражений в Python для новичков\nКак работает CSS Flexbox: наглядное введение в систему компоновки элементов на веб-странице\nБесплатные онлайн-игры, которые обучат вас программировать\nРегулярные выражения для новичков",
                "images": [
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 394\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/image003.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 394\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/image009.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 322\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/image013.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 394\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/image001.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-to-prepare-your-github-profile/",
                "title": "Инструкция по оформлению профиля на GitHub",
                "created_date": "28 ноября 2019 в 12:40",
                "body": "Правильно оформленный профиль на GitHub очень важен для поиска работы: для интервьюера это единственная возможность увидеть ваш код и оценить вас в деле. Мы попросили Георгия Бабаяна, основателя и CEO школы программирования Elbrus Bootcamp, рассказать, как оформить профиль, чтобы показать себя с лучшей стороны.\nГеоргий Бабаян, CEO Elbrus Coding Bootcamp\nGitHub — это лицо программиста. Портфолио демонстрирует как ваши технические навыки, так и soft skills: умение заботиться о пользователе, писать документацию и другие полезные в командной работе навыки. В инструкции я собрал 10 правил и 7 ловушек GitHub, которые нужно знать каждому программисту, который хочет найти хорошую работу.\n10 правил оформления профиля на GitHub\nХорошая фотография\nЗаметная и хорошо читаемая фотография помогает расположить к вам посетителя профиля. Выбирайте снимок с лицом крупным планом и нейтральным фоном.\nИмя и фамилия\nОбязательно напишите свои имя и фамилию, а не только никнейм, чтобы профиль легко было сопоставить с резюме.\nАдрес электронной почты\nУбедитесь, что email для связи с вами доступен всем. Для этого зайдите в настройки профиля: там есть специальная кнопка «сделать публичным». Избегайте адресов в духе sexybaby@mail.ru — используйте ящик в доменной зоне.com с понятным неймингом. Не делайте публичным email, который привязан к вашему аккаунту GitHub: это повышает вероятность взлома аккаунта и демонстрирует слабое владение правилами безопасности в интернете.\nБиография\nМногие игнорируют этот раздел, а зря. Напишите немного о том, какими технологиями вы занимаетесь и что вам интересно. Тогда тот, кто просматривает ваш код, будет понимать, на что смотреть.\nСсылка на соцсеть\nДобавьте ссылку на профессиональную соцсеть, которую вы ведёте наиболее активно и подробно.\nРепозитории\nПрикрепляйте только те репозитории, которые вы хотите показать будущему работодателю. Удалите «детские» проекты! Никому не интересно смотреть на «Hello, world!».\n\nЕсли репозитория ещё нет, сделайте проект сами: создайте чат-бот или простое приложение о погоде — что-то, что поможет увидеть вас в деле.\nЗабота о читателе\nИнтервьюеру тяжело: каждый день он смотрит десятки профилей, поэтому опишите каждый проект как можно понятнее. Хороший способ — поставить перед названиями проектов эмодзи, которые помогут сразу понять суть проекта: например, джойстик для игры или вилку с ножом для сервиса бронирования столиков.\nREADME\nОбязательно сделайте файл Readme внутри проекта. Опишите проект одним предложением, а затем расскажите в одном абзаце о том, какую цель ставили, что делает ваша разработка и так далее. Так вы покажете рекрутеру умение формулировать мысли и писать документацию и продемонстрируете, что работать с вами будет легко.\nКоманда\nЕсли вы делали проект вместе с командой, проявите уважение: добавьте ссылки на репозитории других авторов проекта.\nВизуализация\nИдеально, если у вас получится прикрепить к проекту гифку или видео, которое показывает, как всё работает.\n7 ловушек GitHub — ошибки в оформлении, которые часто делают программисты\nНеочевидная команда запуска\nНапишите код, который запускает ваше приложение. Некоторые программисты считают, что \nnpm init\n и \nnpm start\n — это очевидные команды, но не стоит забывать о том, что очевидное вам вовсе не обязательно будет понятно тому, кто читает ваш проект.\nМусор в коде\nУберите отовсюду консоль-логи, принты, выводы ошибок и глупые комментарии. Как-то раз я собеседовал на должность преподавателя приятного кандидата и уже собирался предложить ему работу. А затем обнаружил в его коде функцию, которая не делала ничего. Рядом с ней красовался комментарий: «Нужно удалить».\nОшибки в коде\nОбязательно прогоните код через линтер: он проверит код на ошибки, укажет на баги и найдёт подозрительные конструкции.\nКлючи и пароли в коде\nНе оставляйте в ваших репозиториях ключи и пароли — это дурной тон. Храните такие данные в переменных окружения или в .env-файле, добавив его в .gitignore.\nНепонятные коммиты\nНачинайте свой коммит с того, что вы что-то добавили, удалили или изменили. Затем напишите, что получилось в результате. Проверьте себя: читая хороший коммит, посторонний человек может понять, что было сделано и зачем. Например: изменили функцию, которая не позволяла отправить письмо.\nНизкая активность\nОчень важно постоянно держать зелёным ваш график активности («contributions»). Чтобы не создавалось впечатления, что вы не работаете, создайте специальную папку «Мои решённые алгоритмы». Добавляйте в неё всю релевантную активность: «алгоритм решения судоку», «алгоритм сортировки», чтобы было видно, что вы постоянно что-то делаете.\nПлохой стиль\nСоблюдайте стайлгайд своего языка — PEP8 для Python, Airbnb Style Guide для JavaScript, Airbnb Ruby Styleguide для Ruby и так далее. Так вы продемонстрируете заботу о комфорте коллег и уважение к принятым в сообществе нормам.\nНе смешно? А здесь смешно: \n@ithumor\nGitHub\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/github-profile-880x308.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/8330_b31df6eb_tFww0bDw_1554813416-e1555159775637-150x150.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1920px\" viewBox=\"0 0 1920 838\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Snimok-jekrana-2019-11-26-v-15.40.01.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1860px\" viewBox=\"0 0 1860 860\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Snimok-jekrana-2019-11-26-v-15.36.43.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1860px\" viewBox=\"0 0 1860 474\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Snimok-jekrana-2019-11-26-v-15.37.19.png"
                ]
            },
            {
                "url": "https://tproger.ru/problems/electrician-and-49-cables/",
                "title": "Логическая задача про электрика и 49 кабелей",
                "created_date": "27 ноября 2019 в 18:01",
                "body": "По дну реки (поперёк) проложен кабель. В нём 49 изолированных проводов. Все провода имеют изоляцию одного цвета и их нельзя отличить друг от друга. Электрик должен перенумеровать одинаковыми числами соответствующие концы проводов. Для этого у него есть источник тока, пробник-индикатор, который позволяет определить, находится ли данный провод под напряжением, и лодка.\nЗа какое минимальное количество переправ электрик сможет выполнить задачу?\nОтвет\n2 переправы.\nКак?\nНа основном берегу подаём напряжение на любой провод. Это будет провод № 1. Все оставшиеся 48 проводов соединяем попарно перемычками. Получаем 24 перемычки.\nПереправляемся на другой берег. Находим провод № 1 (он под напряжением). С помощью перемычки подаём ток из 1-го провода на любой другой, ставим на него бирку 2. Так как он соединён на том берегу с другим проводом, находим по напряжению и его, ставим бирку № 3. Так, поочерёдно соединяя провода перемычками, можно пронумеровать все провода на втором берегу.\nТеперь возвращаемся на основной берег. Начинаем поочерёдно искать перемычку между 2-м и 3-м проводом. Если разорвать эту перемычку, ток во всех проводах, кроме № 1 и № 2, исчезнет. Пронумеровываем провод № 2 и сразу № 3, с которым была перемычка. Опять соединяем их между собой. Дальше аналогично находим № 4 и № 5, потом № 6 и № 7 и т. д.\nНе смешно? А здесь смешно: \n@ithumor\nЗадачи умеренной сложности\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nНахождение максимума из двух чисел без условных операторов и операторов сравнения\nЗадача о самолете на ленте транспортера: взлетит или не взлетит?\nЗадача о ленивом электрике",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/electrician_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/developer-economics-survey-q4-2019/",
                "title": "Проверка навыков и классные призы: пройдите опрос разработчиков Developer Economics Survey Q4 2019",
                "created_date": "27 ноября 2019 в 16:41",
                "body": "TL;DR:\n Задают вопросы, связанные с разработкой, например, «Какие IDE вы используете?», «Пользуетесь ли вы Stack Overflow?» и тому подобное. За прохождение можно выиграть классные штуки вроде Microsoft Surface Pro 6, Oculus Rift S или квадрокоптера. В конце попросят указать почту, чтобы вы смогли узнать о выигрыше и получить результаты опроса.\nПройти опрос можно \nпрямо сейчас\n.\nЧто за опрос?\nЭто \nежегодный опрос\n разработчиков, проводимый SlashData по всему миру. В рамках этого опроса исследуются предпочтения в отношении инструментов, платформ, навыков разработки, монетизации, обучения, развития карьеры и многое другое. Будут вопросы вроде «Какие ваши любимые инструменты и фреймворки?», «Вы действительно работаете над теми проектами, над которыми вам бы хотелось работать?», — в общём, всё, связанное с разработкой.\nКто может принять участие?\nВсе, кто связан с написанием кода и работой в сферах IoT, AR/VR, машинного обучения, веб-разработки, геймдева и так далее. Неважно, что для вас программирование — хобби или работа — опрос открыт для всех.\nЭто всё здорово, но зачем мне тратить на это время?\nРади призов, само собой! В этом году разработчики, прошедшие опрос до конца, могут выиграть Microsoft Surface Pro 6, Oculus Rift S, Raspberry Pi 4 Model B, ваучеры на курсы и софт и другие классные штуки для повышения продуктивности.\nЕсть и реферальная программа: после опроса вам дадут ссылку и будут выплачивать денежные призы за других разработчиков, прошедших опрос по вашему приглашению.\nКроме того, все, кто примет участие в опросе, узнают свой уровень относительно других разработчиков. Они первыми получат отчёт с подробными результатами опроса в начале года.\nА ещё SlashData в связи с проведением этого опроса пожертвует деньги в фонд Women in Big Data. Для вас опрос, разумеется, бесплатен — вы поможете, просто пройдя его.\nКлассно, но я не думаю, что смогу найти время\nВам не обязательно проходить весь опрос, хоть и желательно. Кроме того, организаторы заранее предусмотрели возможность сохранения прогресса, так что вы можете остановиться и продолжить в любой удобный момент — достаточно просто зарегистрироваться!\nПройти опрос\nНе тяните, опрос продлится только до 17 января!\nПартнёрский материал\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/de-19-2-cover-880x308.jpg",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/video/what-neural-network-is-and-how-it-works/?autoplay=1",
                "title": "Что такое нейронная сеть и как она работает — основы простым языком",
                "created_date": "26 ноября 2019 в 18:30",
                "body": "Оригинал видео на английском можно посмотреть \nздесь\nПримечание\n В видео есть опечатка: на \n14:45\n в векторе смещения последний индекс — \nn\n, а должен быть \nk\n.\nНаш мозг способен распознать котика и на фотографии, и в детском рисунке. Как он это делает? А что самое главное, как научить компьютер делать то же самое?\n\nВ этом видео рассказывается, из чего состоит нейросеть и как она работает на примере распознавания рукописных цифр.\nЕсли вам сложно понять математику в видео, можете воспользоваться шпаргалкой, которую оставил пользователь \nMads Horn\n в комментариях к оригинальному ролику на YouTube. Посмотреть её можно \nна GitHub’е\n.\nНейронные сети\nТакже рекомендуем:\nИзучаем нейронные сети: с чего начать\nВ данной статье собраны материалы — в основном русскоязычные — для базового изучения искусственных нейронных сетей. \nИзучаем нейронные сети за четыре шага\nШпаргалка по разновидностям нейронных сетей. Часть первая. Элементарные конфигурации\n9 новых технологий, которые вы можете освоить за лето и стать ценнее на рынке труда",
                "images": []
            },
            {
                "url": "https://tproger.ru/experts/estimate-programmers-competence-with-several-questions/",
                "title": "Как оценить профессионализм программиста за 5 вопросов — отвечают эксперты",
                "created_date": "25 ноября 2019 в 17:29",
                "body": "Когда часто проводишь собеседования, хочется иметь под рукой несколько ключевых вопросов, чтобы можно было сразу понять, что за программист перед тобой сидит. Узнаём у экспертов, есть ли такие вопросы и если да, то какие.\nАлексей Дарвин\n, \nруководитель отдела разработки продуктов больших данных X5 Retail Group\nНа мой взгляд, достаточно всего трёх вопросов.\nКаковы причины ухода с прежнего места работы?\nОтвет на этот вопрос напрямую касается мотивации и показывает, что важно для человека: деньги, профессиональный рост, психологический комфорт в коллективе. Это то, чего ему не хватало на предыдущей работе и чего он ждёт от новой. Я считаю этот вопрос одним из самых важных на собеседовании, потому что он позволяет понять, разделяет ли соискатель ценности вашей команды и, соответственно, будет ли он ей полезен.\nКакой ваш самый интересный реализованный проект?\nПо ответу на этот вопрос можно определить уровень разработчика: какие задачи он считает действительно сложными, какие решения называет удачными. Если это его личный проект, можно узнать, как программист совмещал роли аналитика, разработчика, тестировщика, как решал вопросы интеграции данных и нагрузки. Рассказ о командном проекте позволяет оценить навык совместной разработки и уровень развития soft skills.\nТакже этот вопрос позволяет оценить тип мышления человека и его подход к решению задач.  Разработчики со структурным мышлением и глубоким пониманием предмета при рассказе о проекте обычно рисуют схемы и диаграммы, показывая с их помощью архитектуру и взаимосвязи между сущностями. Те, кто обходится словами, обычно более поверхностны. Конечно, не у всех людей визуальный тип восприятия является ведущим, но, по моим наблюдениям, с опытом почти все программисты приходят к использованию схем.\nРасскажите про свои увлечения\nХороший показатель увлечённости именно программированием — чтение и просмотр профильных статей и подкастов. В том числе интересно, что человек читал или смотрел в последнее время. Это хороший показатель интереса к новым технологиям: даже если программист работает в компании с давно запущенными продуктами, где много legacy-кода, он должен интересоваться нововведениями в области технологий.\nКроме того, интересны и личные увлечения. Программисты обладают аналитическим складом ума, и рассказ об увлечениях показывает, готов ли человек разбираться в сложных процессах, погружаться в предметную область. Однажды я собеседовал на позицию бизнес-аналитика кандидата, который занимался дельтапланеризмом. На вопрос об увлечении он рассказал, что для набора высоты пилоты ищут границы между участками вспаханной и необработанной земли: у вспаханной земли заметно выше теплоотдача, и из-за разности температур там возникают восходящие потоки воздуха. Это пример глубокого понимания процессов, а следовательно и демонстрация того, что человек глубоко анализирует процессы и их связи. Бывает и наоборот: человек увлекается чем-то поверхностно и не понимает, что лежит в основе его увлечения, не понимает механику происходящих процессов, для кандидата в программисты это не очень хороший признак. \n18\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n18\nПовысить\nПонизить\nДмитрий Кержнер\n, \nзаместитель технического директора IT-компании MediaSoft\nЛюбое собеседование в нашей компании — это разговор не только о технологии. Мы стараемся прежде всего узнать и понять человека, который к нам пришел. Впишется ли он в нашу культуру? Будет ли нашей команде комфортно работать с ним в будущем? Не противоречат ли принципы человека принципам компании? От этого зависит, сможет ли человек работать с нами долго и насколько продуктивным будет это сотрудничество.\nПоэтому мы начинаем с самого простого, но важного: «Как вы пришли в разработку?». Этот вопрос помогает оценить кругозор соискателя в программировании и понять уровень его вовлечённости. По ответу становится ясно, заинтересован ли человек расти в этой профессии или для него это только «дань моде» и средство заработка.\nСледующим вопросом, скорее всего, будет «ваша самая интересная/сложная решённая задача». Позволяет понять, что кандидат считает сложным и как подходит к решению таких задач.\nДальше можно переключиться на темы, связанные с фундаментальными знаниями: паттерны программирования, основы объектно-ориентированного программирования, ключевые принципы разработки (SOLID, DRY, OR, KISS и другие).\nОставшиеся вопросы связаны с направлением разработки (frontend, backend, mobile application) и характерной для него специфической областью знаний. Они позволяют выяснить много важных вещей: например понимание принципов взаимодействия пользовательского интерфейса с бэкендом, REST, API, работы с памятью устройств (в случае мобильного приложения) и многое другое. После обсуждения этих моментов уже можно переходить к типовым вопросам конкретной технологии. \n34\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n34\nПовысить\nПонизить\nАлексей Кудрин\n, \nруководитель отдела заказной разработки компании «1С-ИжТиСи»\nНаши программисты занимаются как созданием собственных решений, так и разработкой на заказ, а также сервисами сопровождения, обновления нетиповых конфигураций 1С. Работа построена в небольших командах по 3–4 человека, каждая со своей специализацией: например кто-то глубже знает определённую конфигурацию 1С, кто-то лучше разбирается в обновлениях, свёртках информационных баз.\nОчень часто разработчики перемещаются между командами: усиливают команды в рамках конкретного проекта или становятся тимлидами на новых направлениях работы. Поэтому на собеседовании, вне зависимости от стека разработки, важно понять, что мотивирует специалиста, как он относится к внутренним перемещениям и гибкости организационной структуры, разным ролям: тимлида, архитектора или руководителя проекта. Мой список вопросов такой.\nПочему он захотел стать разработчиком?\nЭтот вопрос помогает «разбить лёд» в начале разговора, найти точки соприкосновения. Позволяет понять, как человек принимает решения, что побуждает его к изменениям, что для него важно в профессии.\nКакие личностные качества помогли ему стать разработчиком и какие из них наиболее значимы?\nЗдесь можно увидеть, как программист оценивает себя сам, что он считает своей сильной стороной, которую хочет использовать в работе, что он считает наиболее ценным. Иногда этот вопрос помогает увидеть потенциал наставничества: в компании много стажёров, и человек, хорошо осознающий процесс становления программиста, может быть им полезен.\nКем он видит себя (на какой должности) через 1 год, 2 года, 5 лет (не обязательно работая в нашей компании)\nДовольно спорный вопрос, который не очень любят соискатели. Тем не менее, он помогает увидеть карьерные амбиции и цели специалиста, понять, может ли компания удовлетворить его запросы, насколько мы подходим друг другу в целом.\nКакие 5 его любимых книг и почему именно они?\nПо ответу можно понять, чем интересуется специалист, каков его кругозор, как профессиональный, так и общечеловеческий.\nЧем он может быть полезен нашей компании? Что он сможет привнести нового в работу компании?\nЭтим вопросом я проверяю, насколько много человек узнал о компании, какие ожидания у него сформировались, оцениваю заинтересованность специалиста в сотрудничестве. Часто на этом этапе мы рассказываем истории про других сотрудников, которые помогут соискателю лучше понять, какую роль он сможет играть в компании со временем, как он может на это повлиять. \n1\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n1\nПовысить\nПонизить\nПетр Краснощеков\n, \nруководитель управления информационных технологий Galileosky\nНа мой взгляд, оценить профессионализм по 5 вопросам нельзя. Нужно видеть результат работы кандидата, в какие сроки и при каких ограничениях он достигнут. Поэтому мы часто предлагаем 2-недельную оплачиваемую стажировку в компании, чтобы посмотреть на кандидата в деле.\nЕсли же можно только 5 вопросов, то я всегда спрашиваю о проектах, в которых участвовал кандидат.\nДошли ли они до промышленной эксплуатации?\nКак был организован процесс разработки? Кто и как ставил задачи? Как тестировалось? Кто принимал решение о том, что задача выполнена?\nЧто не устраивало кандидата в процессе разработки? Предлагал ли он идеи по улучшению процесса?\nКак документировался код?\nПривык ли кандидат автоматизировать свою деятельность?\n28\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n28\nПовысить\nПонизить\nСергей Ширкин\n, \nдекан факультета Искусственного Интеллекта в онлайн-университете GeekUniversity\nЕсли вопросов мало, то хотелось бы узнать в первую очередь даже не столько об интеллектуальных качествах, сколько о понимании, в чём состоит работа программиста, поэтому первые четыре вопроса — больше для общей оценки кандидата, для того, чтобы понять его стиль работы и подойдет ли такой стиль для вакансии. Пятый вопрос — на тот случай, если программист планирует работать в сфере искусственного интеллекта.\nКакие структуры данных и алгоритмы вам приходилось применять в прошлых проектах и в чём польза их использования?\nРасскажите о плюсах и минусах вашего языка программирования. Почему вы выбрали именно этот язык?\nВажно ли, чтобы код, написанный вами, был понятен другим? Если да, то почему?\nОпишите процесс разработки и внедрения программного продукта на прошлых местах работы.\nНапишите или расскажите словами алгоритм градиентного бустинга над деревьями. Как вариант: метод обратного распространения ошибки в нейронных сетях.\n2\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n2\nПовысить\nПонизить\nДмитрий Рогов\n, \nдиректор по технологическому развитию ИТ-компании «АйДи – Технологии управления»\nПо своему опыту работы в этой сфере я могу сказать, что ответы на любые вопросы на собеседовании не позволяют точно выявить реальную эффективность и профессионализм разработчика. Эти характеристики проявляются в полной мере только в работе. Я сталкивался с ситуациями, когда соискатели идеально отвечали на сложные теоретические вопросы, но на практике не оправдывали ожиданий даже на среднем уровне.\nВопросами можно выявить только общий уровень профессиональной осведомленности и, возможно, способность реагировать на нестандартную формулировку задачи — не более того. Практика покажет потенциал кандидата гораздо лучше: следует дать ему среду разработки, поставить задачу и отследить процесс выполнения в режиме онлайн. Кстати, такой подход практикуется при найме во многие западные компании, теория там тоже есть, но она занимает незначительную часть процесса собеседования.\nФормат вербального собеседования в отношении программистов, если он реализуется в виде простого опросника, даёт валидность верификации профессионализма на уровне не более 30 %. Решение практических задач — минимум 80 %. \n49\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n49\nПовысить\nПонизить\nДмитрий Скрипкин\n, \nруководитель группы подбора персонала ИТ-компании «Рексофт»\nУ нас на собеседовании обязательно попросят рассказать о своих последних проектах. Вопрос может быть сформулирован, например, так: «Чем вы занимались на прошлой работе? Как выглядела команда? И какую роль вы в этой команде занимали?». Из ответа станет понятно, как кандидат идентифицирует себя в команде, как работает внутри неё, насколько он командный игрок.\nСледующим вопросом вас могут попросить рассказать о проекте, который разочаровал или наоборот воодушевил? И спросят: «Что бы вы изменили при работе над этим проектом?». Это даст HR понимание того, как человек анализирует свои ошибки, может ли что-то впоследствии изменить, или, возможно, из раза в раз допускает похожие промахи. Кроме того, косвенно из ответа станет понятно, готов ли собеседник к дальнейшему росту и какому более — профессиональному или карьерному.\nЕщё один важный вопрос: «Работали ли вы напрямую с заказчиком или взаимодействовали с ним на каких-то этапах проекта?». Здесь мы предварительно тестируем наличие особенно ценных сейчас коммуникативных навыков. Нам важна привычная для кандидата структура коммуникаций: были ли это еженедельные очные или телефонные митапы с заказчиком, или же человек больше привык к письменным отчётам. Затем, скорее всего, последует ряд вопросов: «Готовы ли вы защищать свой код на уровне заказчика? И что происходило в случае неудачной коммуникации?». Например, эскалация проблемы тимлиду или же отстранение от решения проблемы. Эта часть интервью посвящена коммуникации с заказчиком.\nЕщё хороший вопрос: «Как описали бы вас другие разработчики или ваш РП?». Ответ на этот вопрос расскажет нам о самооценке будущего сотрудника, о том, что он лично думает о своих результатах и работе в целом. Здесь я всячески рекомендую говорить правду. Ведь даже ответ: «У всех бывают косяки. Но мы в команде всегда работаем над этим», — даёт HR правильный посыл о личных качествах и верном настрое на диалог.\nТакже показательный вопрос: «Что в программировании для вас самое сложное?». Ответ на этот вопрос позволяет нам выявить слабые технические стороны кандидата. Честный рассказ о слабостях показывает, что человек адекватно оценивает свои возможности и готов в них развиваться. Например, ответ: «Сложностей нет, я просто с этим не работал», — однозначно говорит о том, что сложности в названной области явно есть.\nНесмотря на то, что меня просили назвать пять вопросов, я бы добавил к ним ещё один: «Как вы следите за последними тенденциями в разработке?». Или как вариант этого же вопроса: «Какие последние три книги или статьи вы прочитали?». Если хоть одна из статей или книг касалась разработки или профессиональной области, то для нас это знак, что кандидат действительно интересуется техническими темами за пределами сугубо рабочих задач.\nВ заключение хочу еще раз подчеркнуть, что в Ваших же интересах говорить правду. HR-специалисты в массе своей прокачены с точки знания психологических навыков, и их ежедневный практический опыт позволяет видеть, когда кандидат не до конца искренен. Да, и следует принимать во внимание то, что на следующем собеседовании с техническим специалистом все несовпадения быстро выйдут наружу. \n22\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n22\nПовысить\nПонизить\nЕкатерина Худобко\n, \nдиректор по персоналу в компании Navicon\nКак вы узнаёте что-то новое для себя? Расскажите об опыте работы с новыми для вас решениями\nЭтот вопрос позволяет понять, есть ли у человека стремление к новым знаниям и как он предпочитает их получать — проявляет ли самостоятельность или ждёт директивы сверху. Также ответ соискателя покажет, легко ли он берётся за что-то новое. Сфера программирования развивается постоянно, поэтому без постоянного обучения не обойтись.\nПозволяете ли себе отклоняться от ТЗ, экспериментировать с кодом? В каких случаях?\nПрограммист может отклоняться от ТЗ и экспериментировать с кодом по-разному. Некоторые пытаются оптимизировать его, продумывают архитектуру, тестируют получившийся код и обязательно сообщают о предполагаемых результатах. Такой подход вряд ли вызовет вопросы, особенно если результат экспериментов всех устраивает. Если же человек считает, что отклоняться от ТЗ можно без всякой цели, «ради интереса», это повод задуматься.\nЧто вы будете делать, если понимаете, что у проекта нет будущего?\nНе очень хорошо, если программист, который понял, что с проектом что-то не так, отмалчивается или просто сбегает. Благодаря этому вопросу мы можем понять, как соискатель будет действовать, если окажется в такой ситуации. На какой уровень он эскалирует информацию? Что предпримет? Будет ли исправлять ситуацию сам или доверит другим, предложит ли решение?\nГотовы ли вы исправлять ошибки других?\nТолько кажется, что программирование — прекрасная работа для интровертов: сиди себе с компьютером в уголке и всё. На самом деле, работа над проектом чаще всего ведётся в команде. Трудности случаются у всех. Этот вопрос позволит нам понять готовность человека «подхватить» проблему, возникшую у коллеги, и помочь с её решением.\nОпишите свою самую большую неудачу: в чём она состояла?\nЗрелый человек, рассказывая о такой ситуации, как правило, самостоятельно отвечает за свои промахи. Если же соискатель склонен во всем винить других людей, обстоятельства и погодные условия — это повод для HR-специалиста задуматься. \n21\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n21\nПовысить\nПонизить\nИрина Филякина\n, \nруководитель HR хостинг-провайдера и регистратора доменов REG.RU\nВ каждой компании свои особенности процесса разработки, и разные задачи у каждого программиста. В зависимости от них будут важны те или иные компетенции: умение действовать в команде, или, напротив, сосредоточиться на индивидуальных целях, работа с творческими или рутинными задачами, самостоятельность либо исполнительность и так далее. Главное, чтобы предпочтения будущего сотрудника совпали с тем, что он реально увидит в компании. Именно в такой ситуации человек будет действовать максимально эффективно.\nА вот те самые пять вопросов, которые бы мы задали:\nКак вы представляете себе идеальный рабочий процесс?\nКакое ваше определение идеального программиста?\nКакая команда будет для вас наиболее комфортной?\nКакие задачи для вас самые интересные?\nНу и конечно, самое важное в подборе любого кандидата — понять, соответствует ли наше предложение тому, что ищет кандидат. Поэтому любой рекрутер в нашей компании попросит ответить на вопрос, связанный с мотивацией:\nЧто для тебя самое важное в работе и на какие критерии в выборе работы мечты вы ориентируетесь?\n0\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nМария Абазьева\n, \nнезависимый эксперт SAP\nЕсли оставить в стороне технические вопросы для оценки профессионализма разработчика, то для меня были бы показательны ответы на следующие вопросы.\nКаким образом вы оказались в сфере ИТ?\nВопрос не для определения опыта работы в сфере, а для понимания, что двигало кандидатом при выборе именно индустрии ИТ: деньги, возможность удаленно работать и/или иметь более свободный рабочий график, престиж, перспективы роста в ближайшем будущем неограниченные, любовь к разработке и т. д.\nКак давно занимаетесь программированием?\nДа, из резюме видно, какой у него опыт, но этот вопрос позволяет рассказать кандидату, что программированием он занимается, например, со школы. Обычно школьные годы не относят к опыту работы, но на деле многие высококлассные специалисты приходят в ИТ именно со школьной скамьи.\nВ каких профессиональных сообществах участвует кандидат и/или есть у него публикации?\nЭто могут быть, например, онлайн сообщества. Если кандидат — активный член, то можно ознакомиться с его ответами. Публикации могут быть в специализированных журналах, общедоступных сайтах, форумах, возможно даже выступления на конференциях. Это позволит оценить уровень заинтересованности кандидата в профессиональной области.\nПроверка коммуникативных навыков\nЭто может быть деловая игра в группе, решение кейса индивидуально и т. д. Вообще такие тесты обычно проходят на позиции менеджеров, но для разработчика эти навыки теперь также важны. Не все и не всегда работают индивидуально над конкретной разработкой. Есть задачи, где, например, финансовый блок разрабатывает один программист, а логистический — другой. Таким образом, это уже команда из 3–4 человек (2 программиста, 1–2 постановщика), и все они как-то должны взаимодействовать и решать вопросы.\nУчаствовали ли вы в сторонних проектах помимо проектов на своей основной работе?\nЭто была роль разработчика или больше эксперта/архитектора? Нет ничего плохого, если кандидат участвует в сторонних проектах. Наоборот, это показатель его востребованности как профессионала и признанного знатока.\nВ заключении отмечу, что все эти вопросы следует задавать кандидату, если вы действительно готовы платить озвученную им сумму. Нет смысла тратить своё и чужое время, если ответы на перечисленные выше вопросы действительно подтвердят, что перед вами профессионал своего дела, но зарплату вы готовы платить гораздо ниже. Как правило, свои ожидания кандидат озвучивает задолго до этих вопросов. \n2\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n2\nПовысить\n\n \nПонизить\nЛилия Богаткина\n, \nHR-менеджер в ООО «СИАМ консалтинг»\nДля оценки профессионализма кандидата первоначально составляется перечень ключевых компетенций по конкретной должности.\nКлючевые вопросы для оценки профессионализма программиста:\nРасскажите о себе и своём опыте работы.\nКакие технологии вы применяете в работе? Оцените, какие технологии знаете лучше.\nОпишите самый интересный реализованный(-ую) вами проект/задачу, результатами которого(-ой) вы гордитесь.\nРасскажите о своём неудачном опыте. Что произошло и чему вы научились?\nОпишите ситуацию, в которой вам пришлось делать то, чего вы не умели. Как вы с ней справились?\nА также на собеседовании мы предлагаем кандидату выполнить тестовое задание по программированию (разработке).\nХотела бы отметить, что при принятии решения о приёме на работу на должность программиста или кандидата на любую другую должность, мы руководствуемся не только оценкой профессиональных качеств кандидата. При принятии решения о приёме на работу для нас очень важными критериями являются: оценка мотивации кандидата, работа в команде, оценка управленческих и личностных качеств.\n1\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n1\nПовысить\nПонизить\nАнна Суперфин\n, \nведущий менеджер по персоналу компании «Код безопасности»\nКакими проектами он гордится и почему?\nЕсли бы он сейчас решал задачу, которую решал 1–3–5 лет назад, что бы он в решении изменил?\nЧто ему нравится/не нравится в работе программиста?\nКакие приоритеты у кандидата при выборе работы (технологии, команда, график, уровень оплаты и т. д.)?\nРешение новых задач/изучение новых технологий — это плюс или минус для кандидата?\n8\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nАлексей Красиков\n, \nруководитель отдела разработки департамента эксплуатации в «Новые Облачные Технологии»\nКаковы принципы работы быстрой сортировки или красно-чёрного дерева?\nКак уверяет учёный и специалист в области информатики Никалус Вирт, «алгоритмы + структуры данных = программы». Возможно, в современном мире это уже не совсем так, однако кандидат просто обязан знать принципы работы с массивом или структурами данных.\nКак реализовать абстрактную фабрику или шаблонный метод?\nМир программирования невозможно представить без объектно-ориентированного подхода. Паттерны проектирования — те принципы, которые помогут не изобретать велосипед при решении задач и говорить с коллегами на одном языке.\nРасскажите про принципы транзакционности ACID и как они обеспечиваются в [любимой кандидатом] СУБД?\nНеизбежно возникает необходимость хранить данные. Программист должен уметь обратиться к БД, написать оптимальный запрос или разработать подходящую схему хранения данных. Как вариант — можно предложить кандидату улучшить сложный SQL-запрос.\nКаковы основные механизмы работы операционной системы?\nЛюбой код выполняется в конкретном окружении операционной системы. Разработчик должен понимать, какие бывают мьютексы и пайпы, какой IPC лучше и в каких случаях, TCP socket или UDP, а также знать ответы на многие другие вопросы, касающиеся взаимодействия программы с системой.\nНа десерт можно задать логическую задачу и проследить за ходом мысли кандидата. Это может быть задача про кроликов и вино или про горящую верёвку. Главное — угадать с вопросом, чтобы кандидат не знал на него ответ заранее. \n0\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nАлександр Ординарцев\n, \nдиректор проектного офиса РДТЕХ\nПеред любой проверкой профессионализма разработчика необходимо понимать, какими качествами он должен обладать для успешного выполнения работы, и уже исходя из этой информации формировать перечень вопросов.\nИдеальная цифровая модель разработчика выглядит следующим образом.\nПрофессия разработчика высокоинтеллектуальна, при этом разработчик должен обладать рядом положительных качеств, таких как абстрагирование, критичность, структурность мышления, гибкость мышления, склонность к планированию работы, умение работать в команде и т. д. Разработчик оперирует в своей работе фактами и держит их в голове, не упускает из виду ни одной мелочи, воспринимает вещи такими, какие они есть, выставляет приоритеты своим задачам, понимает, за что стоит браться, а что стоит отложить.\nПри формировании вопросов для оценки профессиональных качеств разработчика вышеперечисленные моменты должны быть учтены, и перечень вопросов должен быть сформирован индивидуально под каждого кандидата.\nДля первой пятёрки вопросов хотел бы выделить следующие:\nКакие продукты использовались для командной разработки и сборки кода?\nМаксимальное количество написанных вами строк кода в проекте?\nМогли бы вы дать ссылку на репозиторий с примерами кода и предоставить контактные данные тех, кто может дать рекомендации?\nИзвестны ли вам какие-либо дополнительные технологии, которые не указаны в описании вакансии?\nПриходилось ли вам работать с юнит-тестами?\n0\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nАлександр Изюмский\n, \nтехнический директор OMNICOMM\nНа собеседовании я должен проверить, насколько хорошо программист знает базовые технологии — как работает web, как работают базы данных.. Далее я хочу понять, имел ли специалист опыт с многосервисными системами, понимает ли, как масштабировать программы при наличии нагрузки. Также важно понять умение и желание программиста разбираться в чужом коде. Это очень важный навык, т. к. чаще всего сотрудник приходит в компанию, где проект уже существует давно и разрабатывался множеством программистов.\nВ конце я задаю вопрос на организаторские способности, с помощью него хочу понять, является ли человек командным игроком, есть ли у него потенциал стать лидером группы.\nСписок моих вопросов на собеседовании:\nОпишите различия в формате передачи данных между HTTP GET и HTTP POST.\nКак работают индексы в базе данных?\nЕсть веб-приложение с авторизацией и профилем пользователя. Все данные пользователя хранятся в таблице users в одной строке. Пользователи авторизовываются в приложении и меняют данные своего профиля. В таблице users несколько миллионов записей, в пике пользовательской активности приложение падает. Как определить причину падения? Как оптимизировать данное приложение?\nЕсть программа, написанная не вами, которая работает в продакшене. Программа представляет из себя сложную функцию большого размера (2–3 тысячи строк), где логика настолько запутана, что любые изменения могут привести к поломке или частичной поломке всего сервиса. Как бы вы организовали процесс трансформации такой программы к поддерживаемому виду? К какому виду вы планируете привести программу?\nУ вас в подчинении 2 программиста. Два проекта — проект А разрабатывался вами лично и находится на поддержке, над проектом Б прямо сейчас работают ваши программисты. Есть несколько простых задач на поддержку по проекту А, одна архитектурная задача по проекту Б, запрос на создание инструмента для техподдержки по проекту Б и текущие задачи по проекту Б, которыми ранее занимались ваши программисты. Как распределите задачи в вашей команде? Каков порядок задач? Аргументируйте.\n27\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n27\nПовысить\nПонизить\nМихаил Адигеев\n, \nруководитель отдела программных разработок и поддержки компании «ГЭНДАЛЬФ»\nКонечно, фактический набор вопросов сильно зависит от того, на какую именно позицию (джуниор, миддл, сеньор, тимлид) набирается сотрудник, в какую команду и на какие проекты (стек технологий и предметная область).\nОбобщённо, исходя из тех задач, под которые приходилось набирать людей, список может быть таким:\nКакими технологиями/языками/фреймворками вы владеете? Как и зачем осваивали?\nОпишите проекты (завершённые разработки), в которых вы принимали участие. Для чего они нужны? Кто ставил задачу? Почему выбраны такие технологии/фреймворки? Кто сейчас использует эти разработки?\nКакие профессиональные статьи/книги/курсы вы изучили за последние полгода-год?\nКакого рода задачи вам интереснее/ближе? Возможные варианты: разработка пользовательского интерфейса, разработка и реализация алгоритмов, «системное» программирование (в т. ч. интеграция с «железом»). Или это задачи из определённой (какой именно) предметной области?\nКакой характер работы над задачей вам комфортнее/ближе? В диапазоне от кодирования строго по чёткому ТЗ/проекту до самостоятельного исследования, подготовки и обоснования решения.\n14\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n14\nПовысить\nПонизить\nПавел Степанов\n, \nSoftware Development Manager в DINS\nПрежде всего, возникает вопрос: почему именно пять, а не шесть или четыре? Сама постановка вопроса достаточно надуманна и предполагает отсечь всех кандидатов, которые не готовы взахлёб рассказывать о себе и не понимают с первого раза всех аспектов того, что интересно интервьюеру. Тем не менее, я попробую, не претендуя на истину в последней инстанции.\nНаверное, первый вопрос был бы всё-таки технический — в конце концов, если кандидат не обладает достаточным техническим уровнем, нам и говорить не о чем. Для такого вопроса выбирается достаточно популярная и нетривиальная технология, например многопоточность. Для определения инженеров advanced уровня можно попросить рассказать, как она устроена внутри.\nСледующим вопросом я бы попросил рассказать про свой проект. В ответе на этот вопрос нужно чётко контролировать то, насколько кандидат понимает цели и задачи того, что делает, а не просто отрабатывает код по постановкам. В связке с этим вопросом идёт третий вопрос — рассказать про связанные проекты, которые он сам не делал. Хороший командный игрок обычно неплохо представляет и то, что делают люди вокруг него.\nЧетвёртый вопрос я бы задал о том, что человек хотел бы изменить на своём текущем месте работы. Ответ на этот вопрос может многое о нём сказать — что его привлекает и раздражает, что ему интересно — работать с людьми или с технологиями, как он видит своё будущее. Конечно, очень сложно сформулировать один вопрос так, чтобы кандидат догадался поговорить обо всём об этом, поэтому частенько его задают в форме «Каким бы кандидат хотел видеть своё идеальное место работы».\nОстался последний вопрос и его, наверное, стоит потратить на вопрос о том, почему же кандидат решил поменять работу, что он ищет и как видит развитие своей карьеры. Есть некоторый шанс, что человек хочет совсем не того, что мы готовы ему предложить. \n23\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n23\nПовысить\nПонизить\nЕкатерина Артюшина\n, \nHR-директор SimbirSoft \nПринимая специалиста на работу, важно комплексно оценивать его профессиональные и личные качества. Например, у нас в собеседовании, как правило, участвует руководитель направления. Он проверяет знания по технологическому стеку и оценивает опыт кандидата. Что касается личных качеств, в первую очередь нас интересует кругозор специалиста, его мотивация, инициативность, отношение к обучению и развитию.\nЭто очень важный разговор, поскольку каждый человек уникален, и невозможно по одному сценарию составить представление о каждом. И всё же в рамках поставленной задачи — когда у нас всего пять вопросов — можно исходить из следующего списка:\nКакие показатели вашей работы ключевые, на ваш взгляд?\nКогда вы не знаете, как решить ту или иную задачу, как вы поступаете?\nРасскажите о самой сложной и самой интересной задаче, которую вы реализовали.\nЕсли бы важный для вас человек посоветовал больше не работать программистом, то кем бы вы стали?\nРасскажите о том, что вы больше всего любите делать в свободное время, и убедите меня делать это вместе с вами.\nКонечно, все эти вопросы условны, как и сама ситуация. Главное для нас — понять, чем «горит» человек и к чему стремится. Мы уже много лет разрабатываем IT-решения для разных сфер бизнеса, одновременно у нас в работе более 70 проектов — как краткосрочных, так и постоянных. Для нас важно оценить желания и возможности каждого специалиста, чтобы поручить ему именно те задачи, которые он будет выполнять эффективно и с удовольствием. \n21\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n21\nПовысить\nПонизить\nИван Романько\n, \nдиректор по разработке в Selectel\nОпишите самую сложную или самую интересную задачу на вашей памяти и расскажите, как удалось её решить? Вопрос позволит понять с каким уровнем задач сталкивался кандидат или что ему было бы интересно делать. Также в процессе рассказа можно понять, насколько глубоко в этот процесс погружался сам разработчик. Может, он сделал только 1 % этой интересной задачи, а всё остальное доделали коллеги.\nОпишите в целом процесс разработки, который вы использовали на предыдущих проектах: как всё бежало, как осуществлялась сборка и доставка кода? Хотели бы его как-то поменять? Вопрос позволит понять, в каком флоу до этого работал человек. К чему он привык, знает ли актуальные технологии и способы разработки/доставки приложений.\nКак устроено ревью кода у вас в команде, есть ли что-то, что вы хотели бы изменить? Нам важно знать, как человек был вовлечён в процесс.\nВ каких командах вы привыкли работать: с полной взаимозаменяемостью или с разделением обязанностей? Нужна ли фокусировка на ограниченном наборе задач или есть желание фуллстека.\nКакое у вас хобби, чем занимаетесь в свободное время? Банальный вопрос, который позволит понять, как человек зайдёт в коллектив в плане общих интересов.\n33\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\nДенис Волненко\n, \nведущий тренер-эксперт в «Инновационный центр Ай-Теко»\nНа наш взгляд, вопросы для оценки профессионализма программиста должны выявлять не только квалификацию, но и логику, направление мыслей, перспективы. Конечно, в первую очередь стоит узнать, на какой области специализируется кандидат — это своеобразный «вопрос-маркер», который позволит отсеять нецелевых соискателей. Также необходимо узнать, что программист думает о будущем технологий, с которыми работает — это поможет определить взгляды на будущее самого специалиста.\nЕщё один важный вопрос должен уточнять, какая область наиболее интересна специалисту — backend, frontend или fullstack. Так вы сможете определить набор его навыков.\nВ целом список вопросов может выглядеть следующим образом:\nВ какой области и в каких языках программирования у вас наиболее сильная техническая экспертиза?\nЕсли бы вы вам предложили делать проект полностью с нуля, то какие бы технологии выбрали и почему?\nКакая версия языка программирования, на котором вы специализируетесь, вам нравится больше всего и почему?\nКак вы считаете, есть ли будущее у языка программирования, на котором вы специализируетесь?\nКем вы себя позиционируете: backend, frontend или fullstack?\n16\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nВладимир Бобров\n, \nпрограммист «Аэроклуб ИТ»\nЕсли бы мне надо оценить профессионализм соискателя, ограничив себя пятью вопросами, то я задал бы следующие:\nВ чём заключаются базовые принципы ООП? Объяснить, как их понимает соискатель, привести примеры.\nЧто такое SOLID? Объясните, что вы понимаете под каждым принципом, а также поделись плюсами и минусами.\nРабота с сетью. REST, socket, HTTP запросы, ответы.\nРасскажите о методах отладки программы и поиске багов. Расскажите о своём опыте. Как вести отладку? Какие есть инструменты?\nБыл ли опыт работы с базами данных? Назовите принципы работы и принципы построения запросов в БД, CRUD.\n2\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n2\nПовысить\nПонизить\nАндрей Овсянкин\n, \nведущий программист «Аэроклуб ИТ»\nДля меня ключевые пять вопросов при определении уровня профессионализма это:\nИзложите суть алгоритма quicksort, mergesort.\nЧто такое О-нотация сложности алгоритма, как ею пользоваться.\nРасскажите о проекте, которым вы гордитесь, кодом, которым вы могли бы похвастаться.\nВы предпочитаете работать в формате «долго, но красиво» или «быстрый костыль»? Ваше видение как возможно соблюсти баланс.\nПодобрать заранее несколько неудачных примеров, нарушающих «Принцип единой ответственности» и спросить, что соискатель думает о качестве кода.\n0\nОтвет эксперта\n2019-11-25T17:29:44+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, можно ли оценить профессионализм программиста несколькими вопросами и если да, то какими?\nНужно понимать, что никакие пять (три, десять) универсальных вопросов не позволят оценить профессионализм программиста. Более того, основываясь только на ответах на такие вопросы, можно совершить большую ошибку и отклонить хорошую кандидатуру. Поэтому не стоит забывать, что на программиста стоит посмотреть ещё и в деле.\nТак или иначе, эксперты предложили своё видение вопросов, которые можно задать для оценки профессионализма. Местами они довольно разные, но некоторые общие моменты можно выделить:\nдля того, чтобы нащупать почву для дальнейшего разговора, а также определить уровень вовлечённости программиста, спрашивают о том, как он попал в профессию;\nлюбят спрашивать про такие фундаментальные вещи как основы ООП, принципы разработки типа SOLID и т. д. Также могут спросить про алгоритмы и структуры данных или работу с сетями и БД;\nспрашивают про самую сложную/интересную задачу, чтобы понять, с каким уровнем задач сталкивался кандидат или что ему было бы интересно делать;\nмогут задавать разные вопросы, чтобы проверить коммуникативные навыки и убедиться, что кандидат вольётся в коллектив. Как правило, это вопросы про хобби/интересы;\nещё могут попросить описать процесс разработки на последнем проекте, чтобы понять, с чем вы уже имели дело;\nтакже могут спросить, какие последние книги вы прочитали или как вы узнаёте что-то новое в сфере разработки, чтобы определить, есть ли у кандидата тяга к знаниям.\n100500\nЛучший ответ\n2019-11-25T17:29:44+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nКарьера\n, \nСобеседование\n, \nСоветы\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\n28 cайтов, на которых можно порешать задачи по программированию\nПрограмма минимум: что должен знать начинающий C# программист\nДостаточно ли вы умны, чтобы работать в IT?",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder_083_-_Checklist_3238267-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/45000_cd1b7c7f_0PZea3tI_1574157598-e1574434515828-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/45000_1fc2310e_wZI42LbG_1574170221-e1574434989635-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/849_7bfaf61f_D4r8AOcW_1574162683-e1574435852847-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/32391_0fa164f5_ZNXQlatC_1574157025-e1574435956619-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/Sergej-Shirkin-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/08/D.Rogov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/89124_7982b40a_Xy5awUde_1573805876-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_green-150x150.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/10417_10870c61_ZEn0qUKO_1573136267-e1574444470259-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/71545_933bc690_n04QQiZ1_1574842523-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_red-150x150.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/90954_e06d061a_tXoZGSFo_1574687665-e1574691768978-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/928_9f7bcb90_x3OmshdH_1574607395-e1574691490899-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/ordinartsev_rdtex-e1574507871219-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/5758_190bd199_HDLwHBWI_1574666895-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2015/03/gendalf-e1453733813312-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Pavel-Stepanov-e1574509112705-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Ekaterina-Artjushina-SimbirSoft3-e1573823666394-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Ivan-Romanko_Selectel-e1574510589160-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/IMG_7833-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Bobrov.jpg-e1574513922600-150x150.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Ovsjankin-2-e1574513996965-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/cloud-possibilities/",
                "title": "Возможности облака для разработчика",
                "created_date": "23 ноября 2019 в 12:48",
                "body": "Сергей Зинкевич, продакт-менеджер КРОК Облачные сервисы\nЗачем разработчику облако?\nЗа последние пару лет практически все ключевые облачные провайдеры выпустили на рынок продукты для разработчиков разного профиля. Есть такой и в портфеле решений \nКРОК Облачные сервисы\n. Называется он «Песочница» и позволяет компаниям получать быстрый доступ к средам разработки, тестирования и пилотирования новых ИТ-решений. Сразу после получения доступа к среде в «Песочнице» можно начать работу. Кроме того, облачные сервисы имеют внешний доступ. А работа с ними извне не будет угрожать работоспособности других информационных систем клиента.\nТенденции, которые мы наблюдаем на рынке облачных сервисов, показывают рост интереса бизнеса к развертыванию тестовых сред в облаках. Кроме того, явно прослеживается и тенденция виртуализации якорных систем различных компаний, которая позволяет более гибко управлять ресурсами.\nПочему растёт спрос на cloud-native архитектуры и использование публичных облаков для тестирования и разработки новых продуктов и сервисов?\nОблако — это быстро\nРазвёртывание тестового стенда на выделенном оборудовании занимает в разы больше времени, чем в облаке. Подключение нужных ресурсов в облаке требует буквально нескольких минут, а справиться с этим может любой разработчик и тестировщик. Необходимо также учитывать, что в крупных компаниях в принципе не так просто быстро приобрести оборудование, а «бесхозного», как правило, не держат. И ИТ-директору нужно пройти огонь, воду и медные трубы, чтобы согласовать у финансового директора покупку дополнительного сервера. В свою очередь, контракт на облачные услуги можно заключить без лишней бюрократической волокиты. При этом рамочный договор на услуги с провайдером фактически означает, что ИТ-директор или CDTO (Chief Digital Transformation Officer) будет использовать облачную среду неограниченное количество раз в рамках действующего контракта, запуская любое количество процессов и проверяя различные гипотезы.\nОблако — это безопасно\nПостроить дата-центр такого же уровня надёжности и безопасности, как у крупных облачных провайдеров, сегодня могут позволить себе только очень серьёзные компании. Хотя даже они часто прибегают к облачным услугам, так как сталкиваются с проблемой поиска квалифицированного персонала или попросту не хотят заниматься администрированием оборудования. Строительство дата-центров уровня не ниже TIER III в классификации Uptime Institute, как у лидирующих поставщиков облачных услуг, требует значительных затрат и компетенций — отсюда и рост спроса на аутсорсинг (в том числе для задач тестирования и разработки). Надёжное вычислительное, телекоммуникационное и инженерное оборудование в комплексе с квалифицированной поддержкой позволяет добиться постоянной доступности облачных ресурсов. И в результате обеспечить непрерывность процессов разработки, запущенных на базе облака, гибкое масштабирование в любое время и защиту данных от потерь.\nОблако — это экономично\nЗакупки оборудования — это дополнительные капитальные затраты. И даже если речь идёт о привлечении внешних разработчиков, заказчикам нужно иметь в виду: покупка новых систем для стендов ставится на баланс поставщика и, вероятно, будет заложена в стоимость конечной услуги. Использовать многократно одни и те же вычислительные комплексы для тестирования продуктов разных клиентов, скорее всего, не получится, так как требования к инфраструктуре бывают уникальны. Следовательно, такое железо потребуется всего один-два раза, и остальное время будет простаивать. Аналогичная ситуация происходит, когда компания закупает для себя и своих штатных разработчиков оборудование под проект. По нашим грубым расчётам, такое оборудование утилизируется всего на 25–30%.\nОблако — это удобно\nКлючевое преимущество облака — это возможности для коллективной работы и мобильность. Фактически, имея доступ к консоли, все участники проектной команды могут работать из любой точки мира. При этом легко настроить права доступа сотрудников и отслеживать внесённые ими изменения в программном коде. В частности, это достигается с помощью инструментов Continuous Deployment, автоматизирующих множество рутинных операций от момента внесения изменений в код до развёртывания новой версии продукта в облаке. Кроме того, из облака проще предоставить внешний доступ заказчику. Это нужно, например, для того, чтобы быстро проверить решение и продемонстрировать его клиенту.\nОблако — это стабильно\nОтветственный и ресурсозатратный этап разработки — нагрузочное тестирование, максимально близкое к боевым условиям эксплуатации системы. Если этот процесс проводится на тех же мощностях, на которых живут критичные приложения, ресурсов может не хватить. На кону не только результативность тестирования, но и непрерывность бизнес-процессов. По этой причине многие наши клиенты проводят тесты в облаке, обеспечивая таким образом выход регулярных релизов без проседания производительности сайтов и клиентских сервисов. В частности, Туту.ру минимум дважды в неделю вносит изменения в архитектуру своего портала. Аналогичным образом облако использует Юнистрим, дорабатывая новые бизнес-системы, и Qlean, который в облаке улучшает своё мобильное приложение.\nНе смешно? А здесь смешно: \n@ithumor\nОблачные технологии\n, \nОрганизация разработки\nТакже рекомендуем:\nИнструкция: как настроить и запустить собственный VPN-сервер за 15 минут, даже если вы не разбираетесь в программировании\nЗачем вам нужен QA и как это позволит сэкономить деньги\nТри распространённые ошибки начинающего ведущего разрабочика\nИнструменты для организации эффективного процесса веб-разработки",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-2-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Sergej-Zinkevich_KROK-e1574421588166-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/protecting-data-at-workplace/",
                "title": "Какие рабочие данные нужно шифровать и как правильно это делать — подробное руководство",
                "created_date": "21 ноября 2019 в 17:04",
                "body": "Алексей Костюшко, ведущий разработчик в Kernel Team Acronis\nПеред службами ИТ и ИБ всё чаще ставят задачу повысить уровень защищённости данных на рабочих местах. И, естественно, в основном уровень приватности увеличивают с помощью криптографии. Но если перемудрить в этом вопросе и не продумать механизм хранения паролей, на практике шифрование может оказаться бесполезным, а то и наоборот — переплюнуть все внешние угрозы, надёжно спрятав файлы от самого пользователя.\nПо данным Acronis, количество атак программ вымогателей-шифровальщиков (Ransomware) в прошлом году выросло до 200 миллионов, а Cybersecurity Ventures предсказывает, что к 2021 году бизнес будет подвергаться атакам каждые каждые 11 секунд. Но само по себе повсеместное шифрование не даёт ожидаемых результатов. Просто зашифровав что-то, мы не гарантируем увеличения защищённости. Напротив, распространение программ вымогателей-шифровальщиков (Ransomware) говорит о том, что шифрование может обернуться очень неприятной стороной. Ведь в сущности, чем отличается атака шифровальщика от потерянного пароля криптосервиса?\nЧтобы от шифрования был толк, необходимо чётко понимать, какие ресурсы нужно защищать криптографически и как именно организовать работу со средствами шифрования.\nЧто шифровать? Как шифровать?\nЭто первый вопрос, который нужно задать себе при внедрении шифрования. На практике криптография легко применяется только на уровне готовых продуктов и решений. Например, при облачном резервном копировании мы шифруем данные на компьютере пользователя, а информацию передаём по зашифрованному каналу. Но для того чтобы гарантировать защиту данных в процессе работы с ними, необходимо настроить шифрование отдельных категорий информации.\nФайлы и папки — сквозное шифрование\nЗащиту файлов и папок можно обеспечить за счёт сквозного шифрования. Для этого существуют специальные утилиты, которые обеспечивают непрерывное шифрование выбранных объектов. Таких решений сегодня достаточно много. Например, можно воспользоваться популярной утилитой \nBoxcrypt\n, которая шифрует любые объекты, независимо от их местоположения. Зашифровать можно даже файлы, находящиеся на облачных дисках (Google Drive, OneDrive и т. д.). При таком подходе никто не сможет прочитать содержимое файлов, если на компьютере не запущено соответствующее приложение, а в нём — не введён секретный ключ. Соответственно от копирования или кражи файлов не будет никакого толку, потому что злоумышленник просто не сможет открыть их без вашего пароля.\nЗашифрованный диск\nДля тех, кто работает с большими массивами данных, которые необходимо защищать от посторонних глаз, подходит технология шифрования целого диска. Для этого можно использовать такие программы, как PGPDisk, либо настроить шифрование на уровне операционной системы. Например, если раздел отформатирован в EFS, операционная система Windows позволяет зашифровать содержимое диска даже без сторонних утилит.\nШифрование на уровне виртуальной машины\nДля тех случаев, когда возникает необходимость обеспечить максимальную защиту документов, лучше всего работать с ними через виртуальную машину с зашифрованным диском. Например, бухгалтерам, работающим с 1C или другой программой со служебной информацией, лучше всего подойдёт изолированная среда. С другой стороны, сотруднику нужен доступ к интернету, чтобы проверять почту, сверяться с текстами законов, общаться с коллегами и т. п.\nВ таком случае можно создать ВМ без доступа к интернету и получить полностью закрытое пространство для конфиденциальных данных. Плюс такого подхода заключается в том, что диск виртуальной машины выглядит извне как один зашифрованный файл, поэтому данные будут надёжно защищены от различного вредоносного ПО и посторонних глаз.\nЭлектронная почта и переписка\nУчитывая, что мы постоянно пересылаем друг другу документацию, практически у всех пользователей в электронной почте можно найти самую разную информацию — от персональных данных и сканов документов до проектов будущих договоров. В почтовом архиве, который годами хранится на компьютере или на сервере, может находиться не один важный документ. Так что даже для домашнего пользователя взлом почтового архива и кража данных может привести к внезапному оформлению кредита в микрофинансовой организации, о котором вы и не подозревали.\nВыгружать с почтовых серверов архивы достаточно хлопотно. Поэтому гораздо популярнее оказываются утилиты, шифрующие отдельные папки на почтовых сервисах. Самый простой способ — включить шифрование архивных сообщений и настроить архивацию, скажем, через две недели или через месяц. Конечно, облачные сервисы email применяют шифрование для защиты данных, но, увы, почтовые ящики обычно взламываются за счёт кражи или подбора пароля. Поэтому для шифрования отдельных папок лучше использовать отдельные утилиты со своими ключами и паролями.\nЕсли основной почтовый клиент — локальный (то есть письма загружаются с сервера и хранятся на компьютере), можно использовать инструменты для локального шифрования писем. А в случае если письма загружаются по протоколу IMAP, вполне можно автоматически организовать шифрование и повторную загрузку писем на сервер. Однако мало кто из пользователей сможет сделать это самостоятельно, и администраторам потребуется настраивать и поддерживать эту экосистему своими силами.\nПри этом очевидно, что облачные провайдеры не дают никакой приватности. Все они «читают» переписку в автоматическом режиме, радуя нас обилием релевантной контекстной рекламы. И если вы не хотите, чтобы кто-то «подглядывал» за вашей перепиской, можно вести обмен сообщениями в уже зашифрованном виде. Для такого уровня приватности подходят программы типа PGPmail. Но не стоит злоупотребять этой практикой, так как она способна вызывать повышенное внимание со стороны контролирующих органов. К тому же поставщики бесплатных email-сервисов могут отказать в обслуживании тем, кто шифрует свою переписку. Так что, возможно, вместе с утилитой для шифрования потребуется и платный почтовый сервис.\nПлатежи и транзакции\nС точки зрения злоумышленников, самая интересная и ценная информация — это данные ваших банковских карт, реквизиты доступа в интернет-банк и коды подтверждения оплаты. Чтобы избежать досадных инцидентов с финансовыми активами, лучше всего использовать такой простой метод защиты, как виртуальная карта для платежей в сети.\nОднако и на компьютере можно создать защищённые условия для проведения платежей. Для этого достаточно запустить виртуальную машину (на этот раз уже с доступом в интернет) с зашифрованным диском и без лишнего ПО, чтобы минимизировать риски компрометации вашей финансовой информации.\nСтоит помнить, что проблема изоляции приложений на мобильных устройствах под Android пока ещё не имеет универсального системного решения. То есть банковские мобильные приложения работают практически в одной и той же среде со всеми другими утилитами. Поэтому использование двухфакторной аутентификации не даёт гарантий безопасности. Ведь если устройство было поражено вирусом или украдено злоумышленником, он сможет получить доступ и в интернет-банк и ввести проверочный код из пришедшей на устройство SMS. Поэтому для счетов, на которых хранятся действительно серьёзные суммы, лучше не проводить платежи онлайн и не устанавливать мобильные приложения.\nГлавное — ключи и пароли!\nПодход пользователя: один пароль для всех учётных записей и стикеры на рабочем столе\nДавайте обсудим самый важный вопрос: как помочь пользователю запоминать пароли от всех этих сервисов и криптографических утилит? Считается, что ввод ограничений на состав пароля решает проблему безопасности, и администраторы стремятся сделать пароли длинными, содержащими и буквы, и цифры, и символы, а также исключить из них реальные слова, которые можно найти в словарях, а также требуют менять их, скажем, каждые три месяца. Но кто сможет в реальности запомнить несколько каламбуров из десятка не связанных между собой символов?\nПользователи всегда борются против сложностей, которые мешают им работать. Поэтому на рабочих местах появляются жёлтенькие стикеры с теми самыми сложными паролями, а в доступной и незащищённой электронной почте оказываются все ключи шифрования, которые человек просто не хочет и не может запомнить.\nЕсли же предоставить пользователю право самостоятельно устанавливать пароли на разные сервисы (а это неизбежно происходит, если речь идёт не о корпоративных учётных записях), то в большинстве случаев люди устанавливают вариации одного и того же пароля в разных системах. Например, это может быть PASSWORDgmail, PASSWORDfacebook, PASSWORDyandex и так далее. А после регистрации на каком-то сомнительном ресурсе с паролем PASSWORDroga-i-kopita все пароли могут быть легко взломаны злоумышленниками.\nС другой стороны, шифрование только подливает масла в огонь. Ведь при утере ключа шифрования вы также теряете доступ ко всем зашифрованным данным. А если ключ хранится в электронной почте, то риск его кражи сводит на нет все плюсы шифрования. И здесь обращаться в службу поддержки бесполезно. Стойкие криптографические алгоритмы не позволят вам получить доступ к своим же данным.\nРешение проблемы — программы для хранения паролей\nХорошим решением могут стать программы для хранения паролей. Например, вы можете предложить пользователям установить dashlane, sticky password или любую \nдругую\n утилиту-менеджер паролей, защитив их одной фразой. Очень важно, что здесь речь идёт не про мастер-пароль, который открывает доступ ко всем вашим учётным записям, а именно про фразу, которая должна быть достаточно длинной и известной только вам. Утилита просто хранит файл с паролями и ключами доступа в зашифрованном виде, а секретная фраза при помощи различных алгоритмов позволяет получить ключ расшифровки.\nПоследний штрих этой концепции безопасности — защита зашифрованного файла с паролями, потерять который нельзя ни в коем случае. Поэтому для утилит данного типа всегда настраивают автоматизированные алгоритмы резервного копирования в облако. Даже при полной утрате устройства, вы сможете в любой момент восстановить файл и снова получить доступ ко всем своим хранилищам, учётным записям и сервисам. Инкрементальное обновление данных в современном ПО для резервного копирования позволяет загружать обновление файла с паролями на сервер сразу после добавления новых учётных записей и гарантировать сохранность и конфиденциальность вашего доступа ко всем категориям данных, которые вы решили защитить паролем — от файлов и электронной почты до корпоративных сервисов и скрытых виртуальных машин.\nЗаключение\nЧтобы от шифрования действительно был толк, нужно продумать систему так, чтобы пользователям было удобно с ней работать. Поэтому конкретные криптографические утилиты для защиты почты или файлов необходимо дополнять надёжными менеджерами паролей, а также средствами облачного резервного копирования, чтобы не потерять всю информацию. Если сотрудникам будет понятно, как все это использовать, а шифрование будет происходить прозрачно и без технических сложностей, тогда криптографическая защита информации действительно будет работоспособной.\nНе смешно? А здесь смешно: \n@ithumor\nБезопасность\n, \nКриптография\nТакже рекомендуем:\n10 популярных кодов и шифров\nИгра от Google, в которой можно отточить свои хакерские навыки\n23 сайта для практики хакинга\nШифрование в MD5 больше не безопасно: интерактивный тест на реальный взлом вашего пароля",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-15-cover-icon-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Kostushko-01-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/video/making-game-in-godot-engine/?autoplay=1",
                "title": "Как создать игру с нуля на Godot Engine",
                "created_date": "21 ноября 2019 в 8:57",
                "body": "Уроки создания игр - SKANERSOFT, канал на YouTube\n1\nВведение в разработку\n00:00\n Краткий анонс того, что будет происходить в видео. Нарезка моментов.\n00:20\n Введение и выбор темы для проекта. Для выбора темы используется генератор случайных фраз, который выдал тему про шампунь. Сеттинг определяется следующим образом: главный герой находится в некоем альтернативном мире (предположительно, это его сон), в котором ему предстоит отстреливаться от монстров с грязными волосами шампунем (ох уж этот генератор случайностей).\n02:40\n Моделирование объектов окружения, оружия и врагов. Для моделирования используется программа Blender 3D версии 2.8, используются простые модели без текстур, оформленные материалами с плотной заливкой.\n2\nСоздание игрового уровня\n6:20\n Перемещаемся в игровой движок Godot Engine, создаём новый проект. Для проекта определяем рендер OpenGL ES 2.0 для большей совместимости. Также такой проект удобно портировать для WEB.\n6:46\n Поскольку игра подразумевает переход между уровнями, рассмотрим шаблон проектирования, при котором данную возможность довольно просто реализовать. Данный подход не требует навыков проектирования и моделирования ситуаций. Попутно создаём структуру папок и необходимый набор базовых сцен. Определяем синглтон (глобальный объект), подключаем его к проекту, а также конфигурируем его.\n8:30\n Программируем загрузку уровня.\n9:00\n Переносим объекты, смоделированные в Blender, в игровой проект. Для экспорта используется формат glTF 2.0, который поддерживается как движком, так и пакетом моделирования.\n9:25\n На основе моделей создаём игровые объекты, настраиваем материалы, пока без поведения. Также масштабируем все объекты так, чтобы они имели нормальный размер относительно игрока и друг друга, пропорции сохраняем. Расставляем объекты, получая приблизительный вид будущего уровня для игры.\n11:24\n Добавляем объект Environment, отвечающий за окружение. Настраиваем боковое освещение и убираем скайбоксы. Настраиваем Glow эффект для игрового мира. Создаём объекты, отвечающие за освещение, настраиваем тени.\n3\nСоздание персонажа\n13:50\n Теперь необходимо создать объект игрока, отвечающий за взаимодействие с игровым миром. Этим объектом будет управлять человек за компьютером или телефоном (планшетом). Объект состоит из капсюля и камеры — идеальное сочетание объектов для игр от первого лица. Для камеры используем стандартную «интерполированную камеру», которая будет вращаться плавно, создавая приятный эффект.\n16:35\n Модифицируем комнату, в которой происходит действие.\n17:30\n Программируем поведение игрока. Управление осуществляется мышью и клавиатурой. Соответственно, необходимо обработать поступающие команды. Godot позволяет сделать это очень просто.\n21:00\n Настраиваем перемещение по миру при помощи клавиш, задействуя стандартный механизм действий движка. Клавиши настраиваются через настройки проекта. В коде проверяем только срабатывание действий.\n25:37\n Обрабатываем клавишу паузы и условия выходы из игры. Также обрабатываем мышь и скрываем её в игровом процессе, отображаем только в меню паузы или при выходе в меню.\n26:40\n Включаем тени от источников света и настраиваем их отображение.\n4\nСоздание вражеских персонажей\n27:43\n Переходим ко вражескому объекту. Говорим о локальных осях, настраиваем материалы объекта. Добавляем поведение объекту: враги будут двигаться к игроку, пока не приблизятся на удобное расстояние, постоянно выстреливая изо рта светящимися шарами, убивающими игрока. При приближении игрока они должны отъезжать от него, чтобы сохранять нужное расстояние.\n31:50\n Программируем объект, генерирующий вражеские объекты. Этот объект будет порождать их на уровне, пока не будет уничтожен сам. Таким образом, чтобы пройти уровень, в первую очередь требуется уничтожить объекты, генерирующие врагов. Полное их уничтожение гарантирует переход на следующий уровень. Враги генерируются по таймеру.\n5\nПрограммирование боя\n35:37\n Добавляем игроку оружие. Это бутылка шампуня. Позиционируем его правильно в камере. Так же добавляем прицел, чтобы игрок мог целиться.\n37:39\n Теперь надо разработать то, чем бутылка шампунем будет стрелять. Это будет поток из капель, который при движении очень походит на струю. Для организованного движения шариков необходимо задать их поведение. Это делается для каждого шарика. Поток будет имитировать гравитацию и инерцию. Выстрелы происходят по левой кнопке мыши, так что механизм обработки делаем такой же, как и раньше. При прикосновении пуль к чему-либо, целесообразно их уничтожать. Обработаем и это.\n46:12\n Переходим к обработке пуль и реакции объектов на них. Помимо того, что пули уничтожаются, они должны как-то влиять на то, во что они попадают. Соответственно всё, что нужно, — настроить обработчики у нужных объектов.\n47:41\n Добавляем возможность стрельбы вражеским объектам. За основу берём настроенный ранее механизм стрельбы для шампуня. Меняем лишь цвет и немного поведения. После этого немного меняем направление стрельбы, чтобы вражеские пули всегда летели в камеру, усиливая эффект устрашения.\n50:54\n Конфигурируем глобальный объект и некоторые параметры реакции игрока и врагов. Такая калибровка происходит на протяжении первых этапов разработки практически всегда.\n52:12\n Теперь на 2D слое делаем визуализацию попадания пули в игрока. Делаем это при помощи заполнения экрана красным и плавным исчезанием заливки. Данный эффект помогает идентифицировать попадание, даже когда оно происходит со спины.\n6\nПрограммирование технической части\n54:05\n Переходим к настройке достижения цели уровня. Для этого определяем механизм достижения какого-то числового счёта. При создании врагов мы будем запоминать их количество на уровне, при уничтожении проверять, сколько было убито. Как только убиваем последнего, активируется механизм отпирания двери на следующий уровень. Визуально на двери это отобразится путем смены красного цвета лампы на зелёный.\n58:18\n Добавляем сцену с паузой. Она реализуется созданием отдельной сцены, которая будет рисоваться поверх игры при нажатии клавиши Escape. При этом вся игра будет становиться на паузу и «замирать». Курсор при постановке на паузу отображается. Также паузу стоит отменять по Escape.\n1:00:15\n Далее разрабатываем механизм перехода между уровнями. И тут мы возвращаемся к понятию паттерна, про который я говорил в самом начале. Механизм довольно простой: у нас есть одна сцена, которая перезагружает уровни в зависимости от текущего индекса. Для демонстрации моделируется ещё один уровень.\n1:03:38\n Теперь нужно разграничить слои объектов, чтобы определить, что с чем сталкивается, и что на что реагирует. Это нужно в первую очередь для того, чтобы исключить попадание пуль в самого себя, и чтобы пули не сталкивались с объектами дверей, потому что это просто не нужно. Для настройки слоев в Godot Engine есть специальные маски, расставляя галочки в которых можно добиться нужного эффекта.\n1:08:34\n Создание уровня с Боссом игры. Моделируем объект, экспортируем и настраиваем его материалы и поведение. Тут всё очень похоже на работу с другими объектами, поэтому многие части дублируют и код, и поведение в целом.\n7\nЗаключение\n1:15:26\n Бонус — создание механизма, позволяющего оставлять следы от капель шампуня на стенах и полу, и завершение урока.\n\nИтог — создание игры в Godot Engine — процесс намного более увлекательный, чем может показаться на первый взгляд, а кажущиеся сложными вещи выполняются довольно просто и удобно.\nНе смешно? А здесь смешно: \n@ithumor\nИнструменты\n, \nРазработка игр\nТакже рекомендуем:\nЛучшие IDE и редакторы кода для Python\nКонечный автомат: теория и реализация\nКак научиться разрабатывать игры: подробная блок-схема\nСамые типичные ошибки и вопросы, связанные с Git, и удобные способы их решения",
                "images": [
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/qKhmjBOJ1pU1-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/pros-and-cons-of-being-a-programmer/",
                "title": "Плюсы и минусы профессии программиста — отвечают эксперты",
                "created_date": "18 ноября 2019 в 14:29",
                "body": "О преимуществах и недостатках профессии программиста ходит много слухов. О том, какие реально у профессии есть плюсы и минусы, мы решили узнать у экспертов.\nКирилл Сорокин\n, \nдиректор по разработке в компании «ТехЛАБ»\nМне достаточно сложно объективно судить о достоинствах и недостатках профессии. Я начал программировать примерно в 1992 году, тогда вообще мало кто вне стен специальных учреждений что-то про компьютеры знал. Это было круто и имело какую-то почти пиратскую романтику. Собственно, с этим ощущением в голове я и работаю. Если чуть «приземлиться», то самое крутое в программировании то, что ты можешь творить и создавать — это всё ещё достаточно творческая профессия. Ты работаешь и видишь, как под пальцами появляется результат труда, и это очень здорово. Кроме того, твоё произведение зачастую приносит пользу людям. Другой любопытный бонус — программисты более или менее отчётливо понимают, как работает современный мир, который постепенно становится полностью цифровым.\nДругие плюсы более прозаичны. Во-первых, рынок труда в силу большой нехватки крутых кадров — это рынок работника: как правило, ты не ищешь работу, а выбираешь. Зарплаты, прямо скажем, часто неоправданно высоки относительно других профессий. Карьерный путь тоже достаточно прозрачен: люди, склонные к индивидуальной работе, могут уйти в проектирование и архитектуру, а прирожденные управленцы — в менеджмент разработки.\nНа мой взгляд, в профессии реально сложно найти минусы. Наверное, главных два. Первый — хорошим программистом быть непросто — тут нужен определённый склад ума. Очень пригодятся такие качества, как умение системно мыслить, аккуратность и усидчивость. Второй — всё очень быстро меняется, надо не отставать. В бухгалтерском учёте чего-то радикально нового, как мне кажется, не появлялось уже много лет. В разработке софта всё кардинально пересматривается раз в пятилетку. Если не успеваешь адаптироваться к новшествам — это не значит, что ты плохой программист. Но ты «устарел». С возрастом это всё сложнее и занимает больше времени, так люди устроены.\nНу и, конечно, нельзя не сказать о фрустрации от того, что баг неделю не находился (а он крылся в случайной запятой на третьей строчке файла), о дедлайнах, которые не всегда соблюдаются. Но это всё мелочи: на мой взгляд, достоинства профессии того стоят. \n30\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n30\nПовысить\nПонизить\nЯрослав Сорокин\n, \nстарший бэкэнд-разработчик в компании «ОНСЕК»\nВсё очень индивидуально, поэтому могу рассказать только о своих наблюдениях, возникших в процессе познания профессии программиста: о плюсах и, скорее, не о минусах, а о трудностях, с которыми мне пришлось столкнуться.\nДля начала о хорошем. Да, разработчики ПО, действительно, получают неплохую заработную плату на российском рынке. Она очень достойная и, по статистике, средняя зарплата программиста выше средних зарплат в большинстве других областей. Из этого складывается некоторое ощущение привилегированности профессии.\nДругое важное преимущество состоит в том, что программист — это глобальная профессия. Разработчик минимально зависит от контекста страны, в которой находится — это делает его мобильным, открывает возможности для жизни и работы в других странах. Если эмиграция не интересует, то можно удалённо работать на иностранную компанию, оставаясь в своей стране. В некоторых случаях это также может привести к более высокому уровню заработка.\nНа программистов всегда стабильно высокий спрос. Работодатели вынуждены конкурировать за сотрудников и, как следствие, стараются создать максимально комфортные условия: современные офисы, новая техника, большой соцпакет.\nВсё вышеперечисленное делает эту профессию очень привлекательной в глазах большинства людей. Но, конечно же, есть и трудности. У каждого они свои, я могу сказать о том, что мне показалось серьёзным препятствием в процессе карьерного роста.\nОдно из следствий глобализации профессии — это английский как рабочий язык. Большинство материалов, статей, книг, конференций выходит именно на этом языке. Конечно, наше сообщество переводит многие книги и статьи, но часто это происходит с опозданием. А технологии при этом постоянно развиваются и, чтобы повышать свою квалификацию, нужно изучать первоисточники, которые в большинстве своём будут на английском. Поэтому знание этого языка, хотя бы на техническом уровне, необходимо для работы. Из-за необходимости постоянно изучать новое может сложиться ощущение, будто вы снова в институте, только вот ваше обучение никогда не закончится. Другое отличие состоит в том, что эти знания нужно сразу применять на практике, что тоже нелегко. Также требуются такие качества, как усидчивость и терпеливость, особенно в самом начале. Многие проблемы на первом этапе кажутся нерешаемыми, и то, в чём более опытные коллеги могут разобраться за час, у начинающего программиста может занять несколько дней.\nИ напоследок о здоровье. Конечно, сидячая работа может отрицательно сказаться на самочувствии, в первую очередь, на зрении и осанке. Так что за здоровьем в любом случае надо внимательно следить. Собственно, как и в любой другой профессии.\nВ общем, путь начинающим программистам предстоит нелёгкий, но и награда в конце ждет неплохая. И какой бы выбор вы в итоге ни сделали, самое главное — пусть он будет осознанным. \n21\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n21\nПовысить\nПонизить\nДмитрий Меремьянин\n, \nCTO «Фоксфорд»\nИз плюсов: программист может найти работу в любой стране мира, может создавать крутые продукты, которые меняют жизнь людей, быть востребованным и получать высокую заработную плату, уже спустя пару лет опыта. Из минусов: не самый здоровый образ жизни — большую часть времени ты сидишь и работаешь за компьютером. Ещё один момент, который важно учитывать — чтобы оставаться востребованным приходится постоянно следить за трендами и изучать новые технологии. Это и плюс и минус одновременно. Постоянно учиться — интересно, но надо быть готовым к тому, что придется жертвовать другими увлечениями.\n12\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n12\nПовысить\nПонизить\nИван Дегтярев\n, \nbackend-разработчик IT-компании MediaSoft\nБезусловно, существует много слухов о программистах и IT-отрасли в целом. Считается, что программисты зарабатывают много, поголовно имеют проблемы со здоровьем, по характеру, извините, — задроты и ничем кроме компьютеров не интересуются. И, конечно, способны решить любую технически сложную проблему (феномен «тыжпрограммиста»).\nЭти стереотипы — как раз один из минусов профессии. Люди не понимают, что айтишники бывают разные, среди них есть разработчики, системные администраторы, QA-инженеры, IT-руководители, сотрудники сервисных служб, и всех этих людей можно назвать программистами, так как они обычно умеют писать код, хотя бы минимально, но это не значит, что все они поголовно могут (и хотят) чинить компьютер. В итоге ты часто слышишь что-то вроде: «Братух, у меня ноут глючит, посмотри плиз, тыжпрогер у нас», — и приходится объяснять своим близким, друзьям или знакомым, что ты не специалист по железу, а фронтенд-стажёр, ковыряющий JS. Не самый главный минус, но всплывает часто, и нужно время, чтобы перестать на это реагировать.\nСущественным минусом, на мой взгляд, является сидячий образ жизни. Программисту приходится много времени проводить без движения, и вместе с другими вредными привычками, например пристрастием к нездоровой пище, это негативно сказывается на здоровье.\nЕщё один минус — работа программистом требует огромной самодисциплины. В хороших компаниях разработчик сам себе устанавливает рабочий график, и если он не умеет рационально распределять своё время, он будет регулярно сталкиваться с прокрастинацией и связанными с ней переработками. Низкая производительность и ошибки могут привести к потере репутации, и на здоровье постоянная нервотрёпка отразится не лучшим образом.\nПреимуществ у профессии тоже много. Все слышали о том, что у программистов более высокие зарплаты, и это верно, но только отчасти. В нашей сфере чаще всего работает принцип «как поработал, так и заработал». Если вы идёте в IT с ожиданием высоких зарплат, то и ожидайте высоких требований к себе.\nВажный плюс — в IT вы можете познакомиться с интересными людьми, которые нестандартно мыслят, постоянно учатся, ищут способы оптимизации существующих процессов. С прогерами интересно, и большинство из них хорошо умеет работать в команде, а командный дух — это очень крутое чувство.\nНельзя не отметить и то, что в программировании руководители часто предоставляют много свободы сотрудникам. Если вам удобно работать, надев на голову маску лошади, — почему нет, главное, чтобы задачи выполнялись. Да и вообще в нашей профессии масса плюсов: можно пойти поспать в лаунж-зону, можно жить в офисе, если у вас проблемы с жильём, в конце концов, можно пить на работе, до работы, после работы, но не во время работы (помним про самодисциплину). \n33\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\nЕвгений Ким\n, \nруководитель отдела разработки платформы RU-CENTER\nДействительно, вокруг программистов (и вообще вокруг IT-специалистов) много стереотипов и эти стереотипы постоянно изменяются. Раньше считалось, что это такие красноглазики, которые могут и тонер в картридже поменять, и монитор принести, и сайт на выходных запрограммировать. Раньше, возможно, это было близко к истине, но сейчас это уже не так.\nТеперь на программистов смотрят по-другому. Появился новый стереотип — у них очень высокие зарплаты. Если смотреть в среднем по больнице, то так и есть. Средняя зарплата IT-специалиста выше, чем средняя зарплата по стране. Но, как обычно, дьявол кроется в деталях.\nКрутые специалисты действительно получают много, но таких специалистов мало. Это раз. Два — есть темы на хайпе, которые очень сильно разогреты из-за отсутствия достаточного количества специалистов (привет React-разработчикам). Такие ниши тоже сильно работают на поддержание стереотипа о больших зарплатах в разработке. Ну и третье. Программисты не сильно привязаны к стране и городу — работать можно из Барнаула на стартап в долине и т. д. В таких условиях российские работодатели вынуждены платить конкурентные деньги, и на фоне общей стагнации в зарплатах обычных россиян эффект стереотипа только усиливается.\nЕщё один стереотип — программисты очень замкнутые личности и умеют говорить только на околокомпьютерные темы. Это совсем не так. В силу объективных причин сейчас средний возраст программистов не такой высокий. Я конечно не знаю точных чисел, но по моим ощущениям это 25–26 лет. Вы действительно думаете, что молодые ребята могут говорить только о компьютерах?\nА вот стереотип про плохое зрение является чистой правдой. Как бы мы ни хотели, но продолжительное сидение за компьютером не проходит бесследно для глаз. В моём окружении более половины разработчиков имеют проблемы со зрением. Но нам нравится считать, что очки только добавляют шарма. \n9\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n9\nПовысить\nПонизить\nЮрий Пономарев\n, \nконсультант по программным продуктам Oracle Центра технической поддержки компании РДТЕХ\nПреимущества\nПостоянная работа по самосовершенствованию, познанию своего дао, пути воина.\nРабота с очень продвинутыми людьми, встречи с коллегами, которые понимают тебя с полуслова.\nРабота за нормальными компьютерами, в невредной для жизни обстановке.\nУчастие в жизни страны — «реальной», не «телевизорной».\nВозможность зарабатывать сколько душе угодно, если не угодно — дауншифтить.\nПостоянные профессиональные конференции, семинары, слёты.\nБольшая вероятность сменить несколько стран проживания и континентов.\nВероятность прожить интересную и долгую жизнь, т. к. нагруженный мозг медленнее стареет.\nВсегда есть возможность переучиться, учить кого-нибудь. Даже на пенсии.\nКак правило, позитивный взгляд на будущее.\nНедостатки\nПотребность первое время, практически 2–3 года, быть на нудной работе или на подхвате в большом коллективе.\nПостоянная гиподинамия, с которой нужно бороться.\nПроблемы с кровообращением и нервами на четвертом десятке жизни. Синдром «сухого глаза» может настигнуть через два-три года.\nСложность с выбором достойных руководителей.\nРиск ошибиться в выборе предметной области, изучению которой посвятишь значительное время.\nСложность в создании крепкой семьи, сложность в общении с женщинами, далёкими от точных наук.\nПостоянные затраты на апгрейд компьютера.\nСмена предметной области может привести к возврату в начальную точку карьеры.\nОсуждение и непонимание окружающих при общении на близкие к программированию темы.\nИтого\nНаши достоинства — продолжение наших недостатков, но достоинства столь весомы, что их хватит не на одну хорошую карьеру. \n12\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n12\nПовысить\nПонизить\nАндрей Никольский\n, \nдиректор по эксплуатации финансового супермаркета «Банки.ру»\nГлавный материальный плюс профессии программиста (и любого квалифицированного ИТ-специалиста) — тон на рынке труда задают специалисты, а не работодатели.\nОтсюда и большие зарплаты (существенно выше средних по региону), и гибкий график работы, и возможности для удалённой работы, фрукты-печенья-спортзалы в офисе. Когда работодатели конкурируют между собой за разработчиков, условия с каждым годом становятся всё лучше, и пока рынок даже не приблизился к насыщению. Скорее наоборот, технологий стало больше, и спрос ещё вырос.\nМинусы в такой ситуации тоже есть: всё время приходится изучать новые тренды в своей области, а то и лезть в соседние. Тем, кто не любит учиться, всё это причиняет невыносимые страдания.\nИ есть ещё один существенный минус, о котором крупные технологические компании обычно умалчивают, как раз-таки связанный с прекрасным офисом и отличным окружением. Разработчика стараются окружить комфортной обстановкой, чтобы он проводил в офисе как можно больше времени. Ведь гибкий график позволяет максимизировать производительность «сов» и работать с командами из Таиланда или США. Однако, уходя с работы в районе полуночи, и приезжая на неё хорошо выспавшимся, не остаётся времени ни на семью, ни на друзей, ни на хобби. Многие находят семью и друзей на работе, но всё равно — получается ограниченный мирок, эдакое высокотехнологичное болотце, в котором и зачахнуть недолго.\nУщерб здоровью от работы программиста, по-моему, уже давно можно отнести в разряд мифов. Сидячий образ жизни и общение с мониторами по 12 часов в день, к сожалению, стала общей проблемой современности. Однако более качественные, чем у среднего офисного труженика, мониторы позволяют сохранять зрение, а эргономичные кресла — осанку. И, конечно, вред от энергетиков накануне дедлайна будет, но посмотрим правде в глаза — дедлайны есть не только у программистов, журналисты не дадут соврать.\nРезюмируя, могу сказать, что для меня главный плюс ИТ лежит в духовной плоскости: каждодневное решение сложных задач, развитие полезных продуктов и мозговые штурмы с коллегами дают невероятный заряд энергии. И приятное чувство исполнения собственного призвания на любимой работе. \n33\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\nАлександр Бочкин\n, \nгенеральный директор компании «Инфомаксимум»\nПреимущества\nВозможность самому выстраивать свой график\n. Пропускная система, рабочий день с 09:00, дресс-код — это не про IT. Приходить в офис в удобное для себя время, уходить в течение рабочего дня без составления кучи служебных, поработать из дома, если не предполагается планёрок или летучек, либо же полная работа удалённо — современные компании, как правило, очень лояльно относятся к своим сотрудникам, если они выполняют всё в срок. Руководство, которое очень часто само «из разработчиков», понимает, что думать и творить в жёстких условиях едва ли получится.\nВостребованность на рынке\n. Разработка — очень обширная сфера, где технологии развиваются практически ежедневно. Потребность в программистах растет не только в IT и около IT, затрагивая всё новые и новые области. В регионах, которые традиционно испытывают кадровый голод куда сильнее мегаполисов, компании стараются плотно работать с вузами и ссузами, выпускающими профильных специалистов: ведут профориентационную работу и дополнительные дисциплины, дают практические кейсы и проводят курсы. Общаясь с деканом одного из факультетов, мы узнали, что практически 98 % студентов четвёртого курса к окончанию своей учёбы либо трудоустроены, либо имеют как минимум два предложения о работе.\nЗаработная плата выше средней\n. Именно IT-отрасль сегодня предлагает высокооплачиваемые вакансии, причём как в мировом разрезе, так и в российском. Согласно \nисследованию HeadHunter\n, медианный (средний) уровень зарплат у Java и Android-разработчиков — более 130 тыс. рублей. «Мой круг», \nпроведя аналитику\n общего роста зарплат в IT, отметил, что в первом полугодии текущего года выросла медианная зарплата у разработчиков всех специализаций (кроме десктопной, у них она не изменилась), самое высокое изменение — в game dev (25 %).\nУспешная карьера с нуля\n. Программирование — одна из тех сфер, для которых опыт и практические навыки намного важнее любых «корочек». В первую очередь будет оцениваться именно тестовое задание. Разработчиком может стать каждый, кто обладает неиссякаемым трудолюбием, упорством, готовностью учиться и настоящим желанием освоить эту профессию. Некоторые входят в профессию благодаря профильным курсам, коих сейчас достаточно в интернете. У нас есть отличный пример: наш backend-разработчик — серебряный призёр юношеских Олимпийских игр по лёгкой атлетике. Java он изучал самостоятельно параллельно своему спортивному пути и в один момент решил связать свою жизнь именно с программированием. Прошел у нас стажировку, при этом обучаясь на факультете физического воспитания, получил предложение о трудоустройстве и уже более полугода успешно работает в компании.\nБольшое количество дополнительных бонусов от работодателей\n. Практически любая IT-компания только «за» профессиональный рост своего сотрудника и готова оплатить необходимые курсы, конференции, тренинги, вебинары и т. д. Кроме того, в последнее время компании, в том числе и региональные, стараются расширить перечень предоставляемых «плюшек» для сотрудников: офисы повышенной комфортности, оплата проезда, заказ обедов, корпоративные скидки, оплата тренажерного зала, ДМС и т. д. Совсем недавно мы выкупали трансляции известных конференций по Java и C++, наших основных языков backend.\nНедостатки\nСидячая работа\n. Разработчик — это сидячая профессия, и даже необычные офисные локации не изменят этой сути. Однако последствий избежать не так сложно, как кажется на первый взгляд: достаточно лишь каждый час делать 3–5 минутные перерывы на физическую активность.\nНикогда не получится знать всё\n. Программированию учатся всю жизнь. То, что на пике сегодня — завтра станет никому не интересным. Выходят обновления и библиотеки, появляются новые языки. Чего стоит только один JavaScript, который дополняется едва ли не ежедневно благодаря огромному сообществу. Поэтому остановиться и сказать «я знаю всё» — не про разработчика.\nБольшое число стереотипов\n. Недавно к нам приходили школьники, выбравшие вектором обучения информатику. Пока мы задавали им вопросы и показывали офис, сложилось впечатление, что они до сих пор где-то мыслят стереотипами: разработчики — суровые бородатые дяди либо худые подростки в очках и клетчатых рубашках, никто ни с кем не общается, возле каждого стоит банка с кофе. Благо, что перестали думать, что и сидят все в полуподвальных помещениях, спасибо Google, Яндекс и Mail. Однако завеса стереотипности всё ещё висит над всем миром IT, и невозможно предсказать, сколько времени потребуется, чтобы такие профессии стали «прозрачными». \n25\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n25\nПовысить\nПонизить\nИлья Козырев\n, \nстарший разработчик департамента аналитических решений ГК «КОРУС Консалтинг»\nНа мой взгляд, в профессии программиста существенно больше плюсов, чем минусов. Освоив основы, можно оставаться конкурентоспособным на рынке труда по всему миру. Это даёт ощущение стабильности.\nТакже труд программиста неплохо оплачивается. Но не нужно думать, что, закончив несколько курсов, вы будете зарабатывать огромные деньги и ни в чём себе не отказывать. Как и в любой другой работе, в нашей — в первую очередь ценится усердие, накопленные знания и навыки, компетенции.\nНеоспоримый плюс работы программиста — комфортные условия. Очень многие компании предлагают гибкий и свободный график, который позволяет приезжать в офис только на встречи. Некоторые работодатели даже согласны на удалённую коммуникацию. А глобальная цифровизация, к которой стремится бизнес, даёт программистам прекрасную возможность поработать в самых разных сферах: от фармацевтики и ритейл-сетей до авиастроения и нефтедобычи.\nНесмотря на все эти преимущества, работать в удовольствие без личной мотивации не получится. В программировании часто встречаются моменты, когда долго сидишь над задачей, и думаешь, что ничего не получится, но внезапно в голове словно что-то щёлкает — и нужное решение приходит! Подобные ощущения удовлетворения от решённой задачи лично мне дают вдохновение заниматься программирование дальше.\nПрограммисту необходимо жить и работать в режиме постоянного обучения, осваивать новые технологии, алгоритмы, подходы к разработке. Не исключено, что нужно будет переучиваться. Однако я придерживаюсь мнения, что это больше плюс: мне нравится узнавать новое и жить в непрерывном обучении.\nВ этой профессии есть место творчеству, но есть и большое количество рутинных и однотипных задач, которые иногда могут тянуться месяцами. Будущему специалисту нужно быть к этому готовым. Из-за рутины нередко происходят выгорания, проблемы с личной мотивацией, накапливается усталость и стресс. Как бы вам ни хотелось этого избежать, но иногда придётся сидеть за работой ночами: будь то своя инициатива или приближающийся дедлайн.\nИ помните — как бы ни горели сроки, никогда не забывайте о здоровье и отдыхе. Занимайтесь спортом, в течение дня делайте небольшую разминку, отдыхайте от экрана. Берите пример с Линуса Торвальдса — он часто работает на беговой дорожке! Самое главное — не давать себе выгорать, находите мотивацию, постоянно обучайтесь и узнавайте новое. \n20\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n20\nПовысить\nПонизить\nРоман Тепляков\n, \nDevOps в AlertGroup\nМы живём в мире высоких технологий. Появление новых устройств, о которых человек не догадывался ещё 5–7 лет назад, внедрение дополнительных функций в уже знакомые аппараты, разработка новейшего софта и приложений — всё это реалии нашей жизни, которым человек уже перестал удивляться. Львиная доля технологического прорыва связана с работой программистов: их без преувеличения можно назвать глыбой, на которой зиждется прогресс.\nЭта профессия одна из самых популярных в мире. Вокруг неё ходит много мифов, предубеждений или чрезмерного оптимизма. Мы расскажем о реальных плюсах и минусах специальности. Эта информация, возможно, поможет в выборе будущим студентам.\nРеальные преимущества профессии программист\nИтак, начнём с очевидных преимуществ:\nВысокий доход.\nСвободный график.\nПринадлежность к интеллектуальной касте.\nВозможность выезда за рубеж.\nПерспектива.\nРазберёмся с каждым пунктом более подробно.\nВысокие доходы программистов ни для кого не секрет. Информации об этом достаточно. Если анализировать данные по зарплатам, например, в США, то они распределяются следующим образом:\n15 % зарабатывают $40–55 тыс. в год.\n50 % зарабатывают $55–80 тыс. в год.\n15 % зарабатывают $80–95 тыс. в год.\n20 % зарабатывают более $95 тыс. в год.\nМы видим, что даже самые маленькие зарплаты в этом секторе больше средней по США. В России ситуация ещё лучше — зарплата программиста часто оплачивается в долларах, а рубль не отличается стабильностью, поэтому кроме высоких доходов, которые намного больше средних, IT-специалист не переживает за курсовые колебания.\nГрафик IT-специалиста действительно свободный, даже если вы сидите в офисе. Работа с 9:00 до 18:00 в крупных компаниях — скорее архаизм, чем традиции. В большинстве из них программистам ставится определённая задача — на день, неделю или месяц — и они должны её выполнить. Как? Это проблемы специалиста, который может выходить на работу хоть после обеда.\nПрограммист — не просто специальность, а образ жизни. Часто эти ребята общаются только со своими, обсуждают какие-то непонятные для других темы, используют собственный слэнг, шутки. Людям со стороны это просто не интересно, также как программисту слушать разговор о житейских вещах.\nПрограммисту легче других получить работу за границей. Уже в институте грамотному студенту поступают заманчивые предложения из-за рубежа. Уехать работать в богатую западную компанию для IT-специалиста не составляет труда. Повышает шанс хорошее знание английского.\nКадры в программировании нужны всегда и по оценкам экспертов профессия останется сейчас и в будущем одной из самых перспективных. Автомобили с автопилотом, интернет, проникающий всё глубже в нашу жизнь, роботы вместо человека или персональный помощник в виде смартфона — это реальность. Неужели вы думаете, что продолжать совершенствовать эту реальность возможно без программистов? Вопрос риторический.\nСложности профессии\nНедостатки этой профессии также есть, хотя они и не столь очевидны. Самый главный — для её овладения действительно нужны мозги. Обладание математическим и аналитическим складом ума, возможность понимать языки программирования доступны не каждому. Это отсеивает многих ещё на самом начальном этапе. То есть хорошим программистом может стать не каждый и упорство здесь также помогает далеко не всегда.\nIT-специалист очень редко добивается результата с первого раза, иногда для решения задачи требуются годы. Вы обладаете таким упорством? Если нет, то подумайте, а стоит ли начинать.\nЕсли вы непоседа, который не может находиться на одном месте по 8–10 часов, то вам сложно будет добиться больших успехов. Кстати, многие компании оборудуют зоны отдыха рядом с рабочим местом, и программист имеет возможность отдыхать, не отлучаясь далеко от компьютера.\nМир программирования меняется очень быстро — то, что вчера считалось перспективным направлением, сегодня уже устаревшее явление. Если вы не хотите ежедневно развиваться, то скоро останетесь за бортом.\nНе забывайте английский язык, на котором издаётся большая часть специализированной литературы. Для продвижения вперёд вам необходимо владеть им в совершенстве, иначе вы не сможете конкурировать с другими.\nПрофессия программист — перспективна и высокооплачиваема, но есть сложности, которые могут не дать вам её освоить. Взвесьте все «за» и «против» и принимайте решение. Надеемся, у вас получится!\n16\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nЕкатерина Артюшина\n, \nHR-директор SimbirSoft \nБлагодаря цифровизации программисты необходимы и бизнесу, и государству. Испытывая нехватку высококвалифицированных кадров, компании зачастую даже готовы сами обучать и развивать перспективного кандидата до нужного уровня: помогать осваивать новые технологии и языки, давать нетривиальные задачи, чтобы вовлечь и заинтересовать. Компании, нацеленные на развитие, помогают разработчикам расти в дружном профессиональном сообществе, проходить международную сертификацию.\nХорошей практикой в IT-компаниях стало объединение в одной проектной команде разработчиков разного уровня: например, сеньор занимается вопросами архитектуры, миддлы выполняют ключевые задачи, а джуны наблюдают за ними и перенимают их опыт. Таким образом, отрасль открыта для всех, кто готов расти и заниматься самообразованием, а не только для избранных со врождёнными способностями.\nВ силу того, что рынок IT «перегрет», компании прикладывают максимум усилий, чтобы создать разработчикам лучшие условия для работы, отдыха, обмена опытом. При этом работа программиста позволяет не только получать достойную зарплату, но и постоянно развиваться, расширять свою экспертизу в разных отраслях бизнеса.\nКонечно, в этой ситуации говорить о недостатках профессии — сложно, но они тоже есть. IT-специалисты привыкают к высокому уровню комфорта, и в случае каких-либо негативных изменений им нужна гибкость, чтобы снова найти себя. Нужно постоянно учиться, чтобы быть востребованным. IT-компании мирового уровня готовы полностью снять с программистов все бытовые вопросы, но в этом есть свой риск — уход от действительности. Круто, когда разработчик живёт не только кодом, а поддерживает баланс во всех сферах жизни, имеет широкий кругозор. \n9\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n9\nПовысить\nПонизить\nДмитрий Поролло\n, \nведущий разработчик X5 Retail Group\nНачну с преимуществ, потому что мне они кажутся важнее недостатков:\nРазработчик обычно видит результат своей работы — например, работающее приложение или ускорение какого-либо процесса за счёт автоматизации. Это всегда мотивирует, даёт силы и желание продолжать работать.\nВ профессии программиста велика доля творчества. Одну и ту же задачу можно решить с помощью множества разных паттернов, но именно их правильное и часто нестандартное комбинирование позволяет создавать действительно удачные решения. Поэтому увлечённый человек в этой профессии не заскучает, хотя нужно понимать, что примерно 60 % нашей работы — это всё-таки неизбежная, но нужная рутина.\nИзучение новых технологий. В сфере IT постоянно что-то происходит: языки и фреймворки развиваются, появляются новые концепции и методологии, выходят обновления open-source решений, и нужно быть в курсе этих изменений. Ощущение того, что ты непрерывно развиваешься, держит в тонусе и даёт уверенность в будущем.\nУ айтишника много путей развития, причём как вертикальных (например, стать тимлидом), так и горизонтальных. Можно делать веб-продукты или пойти в мобильную разработку, разрабатывать решения для бизнеса или делать игры. Не хочется только кодить? Можно стать сисадмином, если есть интерес к решению задач вычислительных ресурсов, пойти в архитекторы, если интересно проектировать, или стать системным аналитиком, если хочется заниматься техническим осмыслением бизнес-требований.\nНачать работу в сфере IT можно даже без профильного образования, иногда даже общетехническое не нужно. Кому-то это утверждение покажется спорным, но при желании многому можно обучиться прямо в процессе работы.\nТеперь недостатки:\nРабота программиста требует много времени, в том числе личного. Часто после окончания рабочего дня нужно что-то изучать или готовиться к выступлениям, часть выходных придётся потратить на посещение конференций. Чтобы это не стало проблемой, нужно по-настоящему любить свою профессию и интересоваться программированием.\nНужна серьёзная самодисциплина. От природы она мало кому даётся, и её необходимо целенаправленно развивать.\nВысокий порог входа с точки зрения базовых знаний. Да, выше я сказал, что стать программистом можно и без диплома вуза, обучившись многому в процессе работы. Однако сначала нужно научиться специфически мыслить — с опорой на логику и алгоритмы, а для этого придётся почитать учебники, сходить на курсы и сделать несколько пет-проектов.\nПрограммисты — достаточно замкнутые люди, и экстраверту в таком коллективе может не хватать общения. Но отчасти это миф: разработчики выглядят замкнутыми, потому что программирование требует высокой концентрации в течение длительного времени. Если задать им вопрос про их текущие задачи или проекты в перерыве, можно получить довольно много информации и эмоций.\nСидячий образ жизни и нагрузка на зрение — вот это, к сожалению, не миф, а реальная проблема, но с ней можно бороться, купив себе ноутбук с качественным экраном и соблюдая режим труда и отдыха.\nНекоторые разработчики жалуются, что в IT мало девушек, и в полностью мужском коллективе временами бывает скучно. А это утверждение уже очень скоро превратится в миф в прямом смысле этого слова: девушек в нашей сфере постепенно становится всё больше, и это хорошо — смешанные команды, по моим наблюдениям, обычно более уравновешенные и общительные.\nУчитывая мифы и спорность некоторых минусов, плюсов в моём личном рейтинге получилось больше. И всё же повторюсь: главным аргументом в пользу выбора профессии программиста должен стать неподдельный интерес к этой работе.\n43\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n  \n\nРейтинг полезности ответа: \n43\nПовысить\nПонизить\nВладимир Иванов\n, \nLead Software Engineer в EPAM\nРабота программиста, как и любая другая, имеет свои плюсы и минусы. Но прежде чем их анализировать, надо понять, подходит ли вам профессия по духу или нет. Если она не подходит, то никакие плюсы не заставят вас добиться в ней успеха. Но давайте перейдём ближе к сути.\nМинусы\nСидячий образ жизни. Вы реально много сидите. Это чревато гиподинамией и последующими проблемами со здоровьем. Как бороться: зал, бег, фитнес-браслеты, командные игры.\nВысокий темп индустрии — на самом деле, это можно отнести как к минусам, так и к плюсам. Нужно постоянно учиться просто для того, чтобы оставаться на месте. Технологии меняются с невероятной скоростью. Как бороться: читать блоги, пробовать новое на досуге, ходить на конференции (Mobius совсем скоро!), проходить курсы.\nВозможное однообразие (я знаю, что это может противоречить предыдущему пункту). Может быть вы будете сидеть на одном проекте пару лет и верстать вьюшки. И на следующем тоже. Как бороться: изучать смежные области, просить руководителей о смене задач/проекта, менять место работы.\nСтереотипы: «ты ж программист», значит, тебе нужно чинить принтер сестры тёщи. Как бороться: честно говорить, я не умею. На сами стереотипы забивать, они везде есть.\nПлюсы\nПрестижная работа. Вы — инженер! Вы создаёте что-то новое, что помогает людям жить лучше. Это замечательно.\nХорошая компенсация. Посмотрите на HH или Glassdoor, посмотрите, сколько платят разработчикам. Кроме зарплат обычно есть кофе, «плюшки» в офисе, ДМС, компенсация спорта, бюджет на конференции.\nГибкий график/удалённая работа. Мир движется в сторону удалённой работы: все хотят лучших специалистов, и не факт, что они сидят в том же городе, что и компания. Поэтому у разработчиков много свободы в плане графика. Главное правило — успевай всё в срок, будь на встречах.\nРынок продавца. Вы продаёте своё время. Разработчиков не хватает — рынок на вашей стороне, торгуйтесь и ищите лучшие условия.\nРазнообразие технологий. Выбирайте то, что вам больше нравится — разрабатывать веб-сайты? Писать бэкенд на Java? Писать приложения под iOS на Swift? Освойте нужные навыки и наслаждайтесь своей работой.\n29\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n29\nПовысить\nПонизить\nСергей Ширкин\n, \nдекан факультета Искусственного Интеллекта в онлайн-университете GeekUniversity\nОсновные минусы работы программиста ничем не отличаются от недостатков офисной работы в целом. Прежде всего, это связано с тем, что в этой работе есть недостаток движения. Немного облегчить его можно, если периодически (примерно раз в час) делать перерывы по 5–15 минут, которые можно потратить на разминку или небольшую прогулку. Что касается работы за компьютером и возможных проблем со зрением — можно воспользоваться \nинформацией\n из трудового кодекса о требуемых перерывах при разных видах работы за компьютером.\nЕщё одна возможная проблема — так называемый \nтуннельный синдром\n (синдром запястного канала), который часто упоминают при описании возможных проблем программиста. К основным рекомендациям (правильное расположение клавиатуры — с наклоном от человека, удобная мышка, упражнения для кистей рук) можно добавить то, что в разных языках программирования требуется писать разный объём кода. Также в разных специализациях программистов объём кода отличается — например, при верстке веб-страниц кода может быть очень много, в то время как в программах, связанных с математическими вычислениями (например в искусственном интеллекте), код относительно небольшой и на его написание уходит больше времени.\nИногда в минусы работы программиста включают возможное снижение социальных навыков общения. Однако при командной работе, когда проводятся регулярные совещания, совместное планирование и обсуждение результатов деятельности, такой эффект исключён. Не зря на многих местах работы от специалистов требуют наличие soft skills — подразумевается, что социальные навыки всё-таки понадобятся.\nК плюсам можно отнести то, что работа программиста, как правило, интересна и часто похожа на решение интересных задач разной сложности. При частом решении таких задач развивается логика, системное мышление, математические навыки, что само по себе положительно отражается и на других сторонах жизни.\nТакже к плюсам можно отнести низкий уровень стресса. Если всё-таки стресс присутствует, это может быть связано с неправильной организацией работы или с отсутствием корпоративной культуры. В таком случае стоит задуматься о смене места работы. \n20\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n20\nПовысить\nПонизить\nСергей Романчук\n, \nведущий Frontend-разработчик ООО МФК KONGA\nОсобенности профессии\nЧаще всего молодые специалисты сталкиваются с несоответствием своих ожиданий и реальности. Кто-то на начальном этапе готов работать буквально за опыт и практически бесплатно, а кто-то, начитавшись о компаниях типа Google и Microsoft, сразу приходит в компанию с завышенными запросами.\nНекоторые люди решают стать разработчиками только из-за денег, зная, что программистам больше платят. Большинству, кто переучивается или приходит из других профессий, интересно только получать больше, чем на предыдущем месте работы. Но если человеку неинтересно в свободное время что-то программировать, например создавать мини-игру или верстать знакомому сайт, то такой человек вряд ли будет развиваться в области. Это должно увлекать.\nКак и в любой другой профессии, в разработке есть негативные стороны. Например когда внезапно что-то перестало работать в запущенной системе. Вроде никто ничего не делал, а реализованная тобой функциональность перестала работать или стала работать некорректно. Тогда в срочном порядке начинается исследование возникшей проблемы.  Как правило, отдел техподдержки или тестирования привлекает ответственного за данную область системы разработчика, и для оперативного разрешения проблемы он должен отвлечься от своих текущих задач. Не всегда по итогу в проблеме виноват разработчик, чаще даже нет, но если система достаточно сложна, то человек, обладающий большей экспертизой, значительно ускорит локализацию проблемы.\nРелизы (выпуск новой версии продукта) ПО отдельная тема. Когда совершается крупный релиз и что-то не работает, приходится задерживаться или работать на выходных, чтобы добиться нормального результата. С компенсацией деньгами или отгулами, конечно же. Ситуация, когда ничего не работает, и весь продукт «стоит», а команда дома отдыхает, кажется мне странной. Но в то же время, я негативно отношусь к тому, чтобы человек без повода перерабатывал. Ведь это, в конечном счёте, сказывается на качестве. Однако некоторые коллеги готовы сидеть на работе до глубокой ночи или даже ночевать в офисе.\nЕсть в работе скука и рутина, как и в любой другой профессии. Проходные задачи, которые не дают тебе никакого роста. Порой на них даже не хочется фокусироваться, но если допустить ошибку — это может вылиться в серьёзные проблемы не только для стабильности работы системы, но и в какие-то юридические претензии. Поэтому даже простую работу следует перепроверять по завершении и уже затем отдавать задачу дальше по процессу — в тестирование.\nОдна из неприятных особенностей профессии программиста — это «переключение контекстов». Для работы над задачей тебе требуется вникнуть в её суть и детали, просмотреть написанный ранее код, который, возможно, был написан не тобой. Это может занять и час времени. Начинаешь заниматься этой задачей, а потом раз! — и менеджер проекта просит тебя переключиться на другую, более срочную задачу или появился срочный баг по реализованной ранее задаче. Теперь тебе нужно также «вгрузиться» в другую задачу, решить её, а затем заново «вгрузиться» в ту, что ты планировал делать.\nБывает, случаются такие моменты: ты делаешь задачу, все говорят, что она срочная, а в итоге оказывается, что кто-то что-то не учёл или появилась ещё более срочная задача, и задача, сделанная тобой наполовину или полностью, откладывается «в дальний ящик» и теряет актуальность или вообще противоречит новым требованиям. Выходит, что делал ты эту задачу напрасно. Это сильно бьёт по мотивации, к этому тоже нужно быть готовым.\nРазвитие программиста\nПрограммист проходит следующие стадии развития: стажёр, младший разработчик, просто разработчик и ведущий разработчик. Тот, кто имеет лидерские и организаторские качества, может стать тимлидом. А затем ты должен решить, куда хочешь развиваться дальше: в техническую сторону как архитектор, или в менеджерскую, если тебе нравится курировать и направлять людей. В конце концов, можно стать техническим директором компании. Но, мне кажется, в целом разработчики не очень амбициозны, им бы работать над интересными задачами, а что написано в трудовой книжке — не главное.\nЧтобы выявить квалификацию сотрудника, каждые полгода или год проводятся performance-ревью. Мы получаем обратную связь от коллег, формируем план профессионального роста до следующего ревью и говорим о своих впечатлениях о работе.\nАутсорс и продуктовые команды\nЕсли программист планирует устраиваться в компании, которые работают на заказ, нужно трезво оценивать, что зачастую люди там трудятся «на износ». Всегда есть исключения и разные философии компаний, но в заказной разработке чем больше сделаешь, тем больше контора заработает. Бывает, что нет тестировщиков или аналитиков, и разработчик выполняет в том числе и их обязанности.\nВ продуктовых командах, наоборот, главное — качество своего продукта. Поэтому процесс работы более структурированный. Поэтому и разработчики здесь более расслаблены.\nМне лично очень помог опыт аутсорса, потому что это воспитывает в тебе навыки быстрых решений и самоорганизацию. А в продуктовой команде все будут до последнего ждать уточнений требований, полной детализации задачи, и только потом процесс запустится.\nДля начинающего разработчика по большому счёту не важно, с чего начинать, профессионально расти можно в любом типе компаний — было бы желание. \n24\nОтвет эксперта\n2019-11-18T14:29:51+03:00\n\nРейтинг полезности ответа: \n24\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, какие плюсы и минусы у профессии программиста?\nПлюсы\nРешение интересных задач разной сложности.\nВозможность работать из любой точки мира.\nГибкий график.\nРазнообразие технологий — всегда можно найти что-нибудь по душе.\nИз-за нехватки высококвалифицированных кадров компании порой готовы сами обучать кандидатов до нужного уровня\n\nкомпании стараются предоставить лучшие условия для работы, чтобы не упустить специалиста.\nХорошие зарплаты, порой неоправданно высокие. Но не стоит думать, что после пары курсов вам на голову начнут падать мешки с деньгами.\nМинусы\nВас могут на несколько лет усадить за проект, где вы просто будете пилить формы и править баги.\nВ то же время, нужно постоянно изучать новые технологии и следить за трендами, чтобы быть востребованным.\nТипичный минус офисной работы — недостаток движения и возможные проблемы со здоровьем.\nСвободы программиста должны подкрепляться хорошей самодисциплиной.\nРазные стереотипы, например, что раз вы программист, то можете починить любую технику по телефону.\nПорой сложно поддерживать мотивацию, поэтому желательно «гореть» своей работой.\nНеобходимость знать английский язык.\nЧастые переработки, когда у вас релиз и вдруг что-то не работает.\n100500\nЛучший ответ\n2019-11-18T14:29:51+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nКарьера\nТакже рекомендуем:\nПрограмма минимум: что должен знать начинающий C# программист\nДостаточно ли вы умны, чтобы работать в IT?\nКак в IT-компаниях смотрят на программистов без диплома при приёме на работу?\nКак оценить профессионализм программиста за 5 вопросов — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-1-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/45792_bf5456f2_LbjaC4Xq_1566549688-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/45792_6ecefafb_QYP1XYcB_1573120720-e1573756222112-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/DSC05558-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/45000_17fa0ad2_x1JbqtAT_1573556968-e1573756546905-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/06/271_9c2ef1d6_KQpURZHR_1560409230-e1561124774895-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/12/ponomarev-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/me_373x373-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/07/72846_8c58f2d3_lmmtGUDr_1549637442-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/88088_03cfecd2_gBtfPTFV_1573804571-e1573821674332-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/dawfgteh6j7ir-e1573823204937-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Ekaterina-Artjushina-SimbirSoft3-e1573823666394-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Dmitrij-Porollo-X5--e1573823781269-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Vladimir-Ivanov-e1573823892253-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/Sergej-Shirkin-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/02XGX3X1-e1573824774529-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-to-become-a-network-engineer/",
                "title": "Опыт построения карьеры сетевого инженера",
                "created_date": "16 ноября 2019 в 12:27",
                "body": "Аркадий Марисенков, инженер IP-сетей компании Linxdatacenter\nКарьеру в ИТ сегодня чаще всего ассоциируют с задачами в области разработки софта. Программист, тестировщик, системный архитектор, тим-лид и подобные позиции у всех «на слуху». Между тем, ничуть не менее важная область современных цифровых решений представлена сетями, где свой вклад в создание и работу самых современных digital-продуктов делают сетевые инженеры.\nКто такой сетевой инженер?\nПрежде всего, определимся с терминами. Сетевой инженер — это специалист, отвечающий за создание, настройку и обслуживание внутренних компьютерных сетей компании, а также за взаимодействие ИТ-инфраструктуры компании с внешними сетями. «Сетевики» должны обладать серьёзным уровнем знаний в области дизайна и поддержки работы сетей, однако их работа будет включать в себя элементы серверного администрирования и программирования.\nТребуется разбираться в локальных сетях, оборудовании и софтверных решениях, используемых в компании для управления сетевой составляющей ИТ-систем. Все это обеспечивается только высоким уровнем квалификации сетевого специалиста: пробелы в образовании и практическом опыте могут обойтись компании очень дорого, а с учётом глубины интеграции бизнес-процессов в цифровой среде, масштабы потенциальных убытков иногда довольно трудно представить, и лучше их не допускать даже в теории.\nЦенность сертификации\nРазвитие любой карьеры зависит от конкретного человека, в особенности от осознанности выбора, нацеленности на результат и готовности к трудностям. При построении карьеры в сфере ИТ стоит выделять приоритетные направления и задачи. Я начал процесс самообразования, имея за плечами успешную карьеру в совершенно другой, не связанной с ИТ и телекоммуникациями области.\nВ качестве первой, промежуточной, цели на карьерном пути сетевого инженера можно назвать сертификацию одного или нескольких вендоров сетевого оборудования. Если рассматривать наиболее популярного вендора, то получение знаний на уровне CCNA (первый уровень в системе сертификаций Cisco) является объективным входным барьером для работы сетевым инженером.\n\nЭтот сертификат не является свидетельством определённого уровня знаний, но указывает на наличие базового понимания работы с сетевым оборудованием. Для людей, только начинающих карьеру в отсутствии опыта работы, наличие сертификата может быть хорошим подспорьем при устройстве на работу.\nПрохождение курса CCNA на базе одного из учебных центров даёт определённые знания, но с точки зрения полученного опыта, максимальный результат можно получить только с уже имеющимися знаниями, путём их структурирования на курсе и получения ответов на уже сформировавшиеся вопросы. Очень многое зависит от преподавателя на курсе, стоит искать преподавателя не только с собственной высокой квалификацией, но и с хорошими навыками преподавания.\nИсточники информации\nПеред прохождением курса любого из вендоров необходимо уделить время тщательному изучению профессиональной литературы по сетевой тематике и ИТ в целом. Среди огромного объёма доступных ресурсов для развития, для себя я выделил следующие:\nВ. Олифер, Н. Олифер: «Компьютерные сети»\n. После прочтения данной книги освоение теории курса CCNA происходит очень легко и можно делать основной упор на практическую часть занятий.\nЭ. Таненбаум, Д. Уэзеролл: «Компьютерные сети»\n. Лично у меня эта книга не вызвала особого восторга, но учитывая количество рекомендаций коллег, считаю необходимым привести её в качестве источника информации. Книг на разные темы под авторством Э. Таненбаума достаточно много. Насколько полно в книгах освещается интересующая тема — решать вам.\nПроект \nМаксим aka Gluck, Марат aka eucariot\n и всех замечательных людей, которые участвовали в создании серии статей: «\nСети Для Самых Маленьких\n». Этот ресурс рекомендую обязательно читать и смотреть, авторы сделали превосходную работу, которой нет равных среди всех остальных попыток создать хорошо структурированное учебное онлайн пособие. Статьи доступны на GitBook.\nЭ. Немет, Г.Снайдер, Т. Хейн, Б. Уэйли: «UNIX и LINUX: Руководство системного администратора»\n. Несмотря на то, что книга нацелена скорее на аудиторию администраторов, рекомендую к прочтению. Книга даёт хорошую базу по работе c UNIX и LINUX, и в дальнейшем может использоваться как источник информации по разного рода возникающим вопросам, поскольку в ней освещены многие темы в достаточной степени для работы сетевого инженера.\nЭти ресурсы — обязательная база.\nДополнительные источники\nЭтими источниками я пользуюсь на текущий момент при подготовке к сертификациям:\nCisco: Rene Molenaar, Networklessons.com, Learn any Networking Topic\n. Лучше книг Rene Molenaar и онлайн-ресурса networklessons.com для подготовки к сертификациям Cisco по треку R&S любого уровня, на мой взгляд, нет. Ресурс платный и на английском.\nДругие вендоры: CBT Nuggets: Online IT Training Videos, IT Certification Training\n. Отличные курсы, рекомендуемые для обучения многими коллегами.\nВсё перечисленное — лишь основные источники информации, которыми пользовался я сам. На текущий момент они помогли мне добиться поставленных перед собой целей. Я продолжаю активно ими пользоваться в ежедневной работе и дальнейшем самообучении.\nДумаю, что для начала карьеры этого списка более чем достаточно. На просторах сети много рекомендаций типа «читать всё и обо всём», но книги по сетевой тематике достаточно объёмные, так что я бы не рекомендовал распыляться. В любом случае придётся осваивать разные направления для того, чтобы на одном языке разговаривать с коллегами из других департаментов, но на этапе становления глубоко погружаться, например, в виртуализацию однозначно не стоит.\nВендоры: Cisco как стандарт, Китай как перспектива\nЧто касается вендоров, то после освоения Cisco я однозначно рекомендую изучать Juniper, однако начинать с него будет тяжелее ввиду специфического представления конфигурации. Cisco в этом плане на порядок более «новичок-френдли» вендор: для сравнения, страница конфигурации на Cisco в переложении на Juniper будет составлять уже 2–3 страницы. Juniper — это продвинутый этап, следующая ступень вашего образования в сетях.\nCisco можно с уверенностью называть отраслевым стандартом сегодня. Возможно, в будущем мы увидим китайских вендоров, занимающих значимую нишу на этом рынке (Huawei, H3C, D-Link). Но пока что для начального этапа становления сетевого инженера можно почти полностью полагаться на Cisco и созданную вокруг их решений экосистему образовательного контента и сертификаций.\nОтмечу, что ценность вендорских сертификатов очень разная, они по-разному воспринимаются вашими будущими работодателями и коллегами. Каждый решает сам, надо их получать или не надо, главное — получение определённого уровня практики в процессе подготовки. Некоторые сертификаты обязательно включают практическую часть с выполнением реальных заданий, и в этом их неоспоримая, а, может быть, и главная ценность. Пока ты активно готовишься к экзаменам, то получаешь опыт и базовые навыки, которым на начальном этапе профессионального развития взяться больше неоткуда.\nДальнейшее развитие: основные направления\nДальнейшее и более глубокое развитие «сетевика» я вижу через проработку компетенций в области информационной безопасности сетей.\nВсё более заметную роль в связи с развитием облаков играет и виртуализация, поскольку на виртуальную парадигму работы переходят не только сервера, но и сети (виртуальные маршрутизаторы, сетевые экраны и т. д.).\nВесьма актуальным умением становятся также навыки, позволяющие автоматизировать определённые рутинные процедуры работы сетевых инженеров, а значит, нужно уметь писать код, хотя бы на базовом уровне для решения простейших задач автоматизации.\nПо мере развития технологий будет трансформироваться и содержание работы сетевых специалистов. Чтобы соответствовать этим изменениям, нужно постоянно самостоятельно совершенствовать свои профессиональные знания и навыки.\nПолезные ссылки\nКурс для начинающих по сетям, сетевым протоколам и архитектурам на Coursera\n;\nЦикл статей по компьютерным сетям для начинающих на форуме Codeby.net\n;\nВведение в компьютерные сети. Базовый уровень в формате Wiki на сайте БГУ\n;\nАналогичная Wiki-база знаний от Мехмата ЮФУ\n;\nВводный курс на более продвинутом уровне на Habr\n.\nНе смешно? А здесь смешно: \n@ithumor\nКарьера\nТакже рекомендуем:\nПрограмма минимум: что должен знать начинающий C# программист\nДостаточно ли вы умны, чтобы работать в IT?\nКак в IT-компаниях смотрят на программистов без диплома при приёме на работу?\nКак оценить профессионализм программиста за 5 вопросов — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-20-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Arkadiy-Marisenkov-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/from-zero-to-google/",
                "title": "С нуля — в Google: история успеха",
                "created_date": "15 ноября 2019 в 13:41",
                "body": "Перевод статьи \n«Google | L4 | Warsaw | Sep 2019 [Offer]»\nРассказывает \nscooby_doo\nМожет это будет и не самая короткая статья, но я хочу пройтись по всем пунктам от самого начала. Во-первых, моя мотивация. Я хотел работать в Google. Не в Amazon, не в Uber, не в Facebook, не в Microsoft. Только в Google. И дело не только в масштабе компании и большом количестве пользователей, но и в том, что каждый их продукт оказал невероятное влияние на мою жизнь.\nУ меня было несколько друзей в Google. Они сказали мне, что нужно хорошо разбираться в структурах данных и алгоритмах и много практиковаться. А затем получить рекомендацию для прохождения собеседования. Если кратко, то именно это я и сделал. А теперь перейдём к подробностям.\nЯ приступил к \nLeetCode\n в январе. На тот момент я не знал ни одного языка программирования и мне было немного боязно начинать заниматься этим в 26 лет, когда большинство одарённых начинают в 12. Тем не менее, с самого начала я был сильно увлечён статисткой и математикой.\nС чего начать?\nИтак, с чего я начал? Проходил множество онлайн курсов по: HTML (январь), CSS (январь-февраль), JS (февраль), React (июнь), AI/ML (апрель-май); в процессе написания проектов изучил C++ на YouTube-канале \nThe Cherno\n (с января по настоящее время). Где-то в середине февраля я начал решать простые задачи на LeetCode, и это был полный провал. У меня уходило множество часов на решение простейших задач, я отправлял тонны неправильных решений. Однако я поставил перед собой определённые цели. Я планировал потратить половину марта на массивы, вторую — на строки, половину апреля — на связные списки, затем деревья и так далее. Я придерживался плана и продолжал безостановочно решать задачи и, к моему удивлению, к середине марта я уже вполне мог справляться с 3–4 задачами в день, в основном со средним уровнем сложности, а в редких случаях — даже с высоким. И вот мой первый совет: \nне ждите знака свыше, начинайте работать\n.\nЯ обогнал свой план по изучению каждой структуры данных за 15 дней и концу марта уже успел немного заняться связными списками, деревьями и графами. Мой второй совет: \nимейте план, но не стесняйтесь его перегонять\n. К апрелю я хорошо освоился на LeetCode (по крайней мере, мне так казалось) и решил к тому моменту порядка 80 задач.\nНа этом этапе я принял третье и, возможно, самое умное решение в моём процессе подготовки, которое подводит меня к следующему совету: \nвтяните в это своих друзей\n! Я собрал группу из 4–5 друзей, создал группу в WhatsApp и завёл таблицу в Google Таблицах, где мы могли отслеживать прогресс друг друга в решении задач. Мы придумали алгоритм подсчёта очков (чем сложнее задача, тем больше очков) и начали соревноваться друг с другом. Это кардинально поменяло дело. Я помню, как провёл несколько ночей, решая 15 задач, лишь бы перегнать моих друзей! Дела шли хорошо, и в середине мая я сделал нечто, что подняло меня на совершенно другой уровень: прошёл \nкурс Уильяма Фисета\n по структурам данным на Udemy. Он не сильно рекламируется, но он офигенный, бесплатный и составлен человеком из Google. Мой четвёртый совет: \nпройдите этот курс\n!\nПрактика\nЯ решил, что теперь мне осталось только заняться практикой, что я и сделал. Согласно моему плану, я должен был подать заявление в Google в июле (через полгода после моего решения сделать это), и я определился с количеством задач, которые хочу решить к тому времени (300 штук). Однако, к началу июня я решил уже 240 и решил взять перерыв, чтобы изучить React, сделать пару небольших проектов, чтобы получить опыт создания приложений, пусть даже и простых. До января я никогда не писал ни единой полезной строки кода, поэтому это было нужно, чтобы дополнить моё резюме.\nЗатем наступил июль, и я сделал шаг вперёд. Я подал заявление и купил… барабанная дробь… премиум на LeetCode! Я не знаю, было ли это очень эффективно, но я не хотел ничего упустить и в итоге ОЧЕНЬ насладился некоторыми премиум-задачами, потому и вам советую. Более того, в июле я создал новый аккаунт, чтобы решить все важные для Google задачи (спасибо премиуму) и даже множество задач Facebook. С некоторыми из них я уже справился до этого, но всё равно решал их снова, потому что в марте я был совсем зелёным и мне хотелось закрепить свои знания и качество кода. Курс Уильяма Фисета действительно поднял меня на новый уровень.\nА теперь сумасшедшая часть. До июля я решил 240 задач, однако с 6 июля до 23 сентября я решил ещё 230 новых задач! Я был абсолютным монстром, я проделал невероятный объём работы, который мне и не снился. Также мне пришлось изучить проектирование систем, так как мой рекрутер сказал, что меня будут спрашивать и по этой теме. Сегодня прошло моё последнее очное собеседование в Варшаве, Польше. Далее я опишу, как проходили все мои собеседования.\nСобеседование по телефону\nЭто был простой вопрос про способы реализации связных списков. С ходу я смог назвать два способа. Мне сказали реализовать один. Я быстро справился, поэтому мне сказали реализовать и другой.\nЗатем мне предложили подумать над способом получше. На это у меня ушло 5 минут. К тому моменту мы почти закончили. Интервьюер сказал: «Я не ожидаю, что вы реализуете это решение за 3 минуты, но, может, вы хотите попробовать?».\nЯ сказал «да» и управился в срок.\nПрошёл!\nОчное собеседование\nВ целом потрясающий опыт: прагматичные сотрудники, потрясающий офис, потрясающие бонусы, дружелюбные люди. Chromebook не заработал, что было тем ещё обломом, так как мне обещали, что мне не придётся писать код на доске, но я всё равно справился.\nЭтап 1: написание кода\nВам даны логи выполнения нескольких функций со временем запуска и завершения работы. Задача: создать иерархию в виде файловой системы, которая будет сообщать длительность выполнения каждой функции.\nРешение: создать структуру в виде N-арного дерева и заполнить её десериализованными логами. Писал на доске.\nДополнительный вопрос 1: как убедиться, что данные в логах логически последовательны? Ответ: во-первых нужно отсортировать временные метки, а ещё использовать какую-то проверку, аналогичную проверке баланса скобок.\nДополнительный вопрос 2: как сделать то же самое для многопоточной программы? Ответ: создать флаг потока на входе и разделить массив на хеш-таблицу массивов, что позволит использовать решение для однопоточной версии.\nЭтап 2: написание кода\nГо (настольная игра). Интервьюер на самом деле принёс игру с собой, что мне понравилось. Есть доска, на ней расположено несколько камней. Вам дают новый камень, который нужно положить на пустую клетку. Необходимо вернуть количество вражеских камней, которые будут захвачены после этого хода. Он объяснил мне правила игры. Я предложил длинное решение через поиск в глубину. После реализации обнаружился один логический баг, но мне дали подсказку, после чего я нашёл его и исправил. Снова писал на доске.\nЭтап 3: проектирование систем\nЯ особенно беспокоился по поводу этого этапа, но интервьюер был очень спокойный и дружелюбный. Он, вероятно, знал, что у меня не очень много опыта в проектировании систем, поэтому он нарисовал всю систему за меня, а затем спросил: «Допустим, у нас происходит 50 тысяч рекламных переходов в секунду. С какими проблемами вы столкнётесь и как вы их предотвратите?». Я рассказал о таких базовых вещах, как уменьшение задержки, увеличение пропускной способности и планирование аварийного переключения. По сути, когда вопросы касаются практического применения технологий, они хотят видеть ваше общее понимание подходов в масштабировании. Я думаю, что всё прошло хорошо, но я так себе судья, так что не знаю, посмотрим.\nЭтап 4: \ngoogliness\n и лидерство\nПрим. пер.\n Google определяет googliness как «mashup of passion and drive that’s hard to define but easy to spot» — «смесь увлечённости и драйва, которую сложно описать, но легко заметить».\nЭто было похоже на вопросы HR о лидерских качествах. Меня много спрашивали о вещах, связанных с управлением командой. Вопросы показались мне лёгкими, так как я был тимлидом в своём стартапе, хоть я и не писал код.\nЭтап 5: написание кода\nЗадача была похожа на \nэту\n за исключением нескольких деталей. Я расписал на бумаге решение сложностью в O(n^2). Я продолжал думать над решением получше, но интервьюер сказал, что O(n^2) — правильное решение, и был рад, что я пытался копнуть глубже.\nВот, собственно, и всё.\nЧем всё закончилось\nЯ получил отличные отзывы по результатам четырёх интервью и удовлетворительный по пятому (уверен, что это было проектирование систем);\nВ течение недели мне подобрали команду и одобрили мой наём;\nЯ получил \nL4 SWE\n оффер. Мечты сбываются.\nНе смешно? А здесь смешно: \n@ithumor\nGoogle\n, \nИстория успеха\nТакже рекомендуем:\nИгра от Google, в которой можно отточить свои хакерские навыки\nСева, 8-классник: «Сперва я работал в Meduza.io, потом решил заняться стартапом в области чат-ботов; мной заинтересовались в Mail.ru»\nКак десятиклассник устроился на работу программистом\nКак проходит телефонное собеседование в Google: рассказ из первых рук от кандидата на должность технического директора",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/google_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/video/smartwatch-on-esp8266/?autoplay=1",
                "title": "Умная техника своими руками: поэтапное создание смарт-часов на ESP8266",
                "created_date": "14 ноября 2019 в 16:06",
                "body": "Ещё в 1972 году компания Hamilton Watch разработала первые умные часы под маркой Pulsar. Изначально у таких часов было довольно мало вычислительной мощности. Её хватало только на калькуляторы, игровые устройства и тому подобные незамысловатые гаджеты. Но с развитием технологий мощность начала стремительно увеличиваться. Современные смарт-часы — это полноценные компьютеры. Некоторые могут работать автономно, а другие функционируют только в сопряжении со смартфоном.\nВ этой статье будет описан принцип создания собственных смарт-часов на базе популярного микроконтроллера ESP8266.\nОпределение функциональности часов\nВ этой статье мырассмотрим часы, которые смогут выводить текущее время и дату, отображать погоду в вашем городе и позволят удалённо управлять Wi-Fi реле. Это означает, что прямо с часов вы сможете управлять любым прибором, подключённым к розетке, будь то музыкальный центр или электрочайник.\nЧтобы получать текущее время, необязательно использовать модуль реального времени. Если смарт-часы будут иметь доступ к интернету, то понадобится ближайший \nNTP-сервер\n. С его помощью можно достаточно точно узнать текущее время. Чтобы контролировать Wi-Fi реле в часах, будет использоваться Blynk.\nBlynk\n — это облачный сервис, позволяющий с помощью приложения для Android или iOS контролировать устройства на Arduino, Raspberry Pi или же, в данном случае, ESP8266.\nПодбор элементов\nВ часах элементами управления будут 3 тактовые кнопки. Экран тут используется доступный — двухцветный OLED 0’96. Для питания нужен аккумулятор, а для зарядки — специальный контроллер. В этих часах используется литий-ионный аккумулятор и соответствующий для него контроллер TP4056.\nНе стоит забывать, что ESP8266 работает на 3-вольтовой логике. Для получения необходимого напряжения питания можно использовать любой доступный стабилизатор напряжения на 3,3 В. Остаётся лишь немного деталей: разъём для зарядки, переключатель, несколько светодиодов, набор резисторов и пара конденсаторов.\nНеобходимые для сборки часов элементы\nСоздание и распайка печатной платы\nЕсли хотите, чтобы итоговый вариант часов был надёжным и компактным, лучше всего распаять часы на печатной плате. Для создания рисунка печатной платы подойдут, к примеру, \nSprint Layout\n или же \nEasyEDA\n.\nВы можете создать печатную плату в домашних условиях либо заказать её у специализирующихся сервисов — те же EasyEDA или \nJLCPCB\n. К этим смарт-часам в свободном доступе уже есть \nGerber PCB файлы печатной платы\n.\nПосле получения/создания платы стоит распаять на ней все компоненты. Монтаж SMD компонентов удобнее делать паяльной пастой и паяльным феном. Но такую работу можно будет выполнить и обычным паяльником с тонким жалом.\nПодготовка прошивки часов\nПосле того, как все компоненты будут распаяны, можно приступить к программной части. Вначале следует разобраться с API для получения погоды. К примеру, можно использовать \nWeather API Yahoo\n.\nПримечание\n С января 2019 года процесс работы с Weather API Yahoo немного изменился. Однако API всё ещё в бесплатном доступе. О том, как получить доступ, детально расписано на их странице.\nПосле получения ссылки с API можно приступить к прошивке микроконтроллера. Сам скетч для Arduino можно взять \nздесь\n.\nВ первую очередь подставьте ваш код аутентификации Blynk в \nchar auth[]\n. Этот код будет выслан вам на почту сразу после создания нового приложения в Blynk.\nЗатем введите SSID и пароль от вашей точки доступа Wi-Fi в \nchar* ssid\n и \nchar* password\n соответственно.\nСкопированную из Weather API ссылку необходимо вставить в \nconst String url\n.\nВ \nBLYNK_CONNECTED()\n можно вставить код аутентификации Blynk другого ESP модуля, управляющего электрическим прибором (если такой имеется). Этот процесс можно увидеть в видео о \nсоздании Wi-Fi реле\n. И под конец не забудьте в \nTimeChangeRule\n указать параметры вашего часового пояса (в методе \ntellTime()\n).\nПрошивка микроконтроллера\nТеперь в Arduino IDE нужно установить все необходимые библиотеки:\nTime.h и TimeLib.h\n.\nTimezone.h\n.\nSSD1306.h и SSD1306Wire.h\n.\nNTPClient.h\n.\nESP8266WiFi.h и WifiUDP.h\n.\nПоследняя версия Blynk\n.\nЧтобы прошить ESP8266, нужно подключить его к мосту USB-UART. Все необходимые контакты уже выведены на торец печатной платы. Обратите внимание, что RX контакт одного подключается к TX контакту другого и наоборот. Более подробно о прошивке микроконтроллеров серии ESP8266 можно почитать тут:\nЗнакомство с недорогим и функциональным микроконтроллером ESP8266: прошивка и пример использования\ntproger.ru\nПотом в Arduino IDE нужно будет выбрать текущую плату и COM-порт. Зажав кнопку flash на микроконтроллере, начните прошивку. После удачной прошивки остаётся лишь присоединить аккумулятор и ремешок.\nВключите часы. Должна высветиться надпись «Connected to Wi-Fi». Если это так, то микроконтроллер прошит, а значит, ваши смарт-часы готовы.\nПри нажатии на среднюю кнопку на часах будет отображаться текущая дата, время и температура. Две боковые кнопки управляют двумя подключёнными к Wi-Fi реле электрическими приборами.\nНе смешно? А здесь смешно: \n@ithumor\nArduino\n, \nDIY\n, \nHardware\nТакже рекомендуем:\nБот для Telegram на Python: от первой строчки кода до запуска на Heroku\nНовая жизнь дискет: что такое флопотрон и как его сделать\nВ чем разница между CPU и GPU?\nСовременные гаджеты, которые можно сделать своими руками",
                "images": [
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 576\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/FIDTH5MJNSR8NUG.LARGE_.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 576\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/FFFWK3FJNSR8SOU.LARGE_.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 576\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/FTGDOIFJNUL8C7B.LARGE_.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 576\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/FBOIR0NJNULE68P.LARGE_.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/react-context-in-5-min/",
                "title": "React Context за 5 минут: что это и как использовать",
                "created_date": "13 ноября 2019 в 15:38",
                "body": "Перевод статьи \n«React Context in 5 Minutes»\nReact Context для многих стал привычным способом управления состоянием, заменив собой Redux. В этой статье вы узнаете о React Context и научитесь его использовать.\nСпособы передачи данных между компонентами в React\ntproger.ru\nРассмотрим работу Context на примере такого дерева. Нижние блоки можно представить как отдельные компоненты:\nДопустим, вам нужно добавить свойство какому-то из нижних блоков — это несложно. Но что делать, если это свойство нужно передать соседнему (т. е. отдельному) блоку? Пока единственное решение — передать это свойство блоку-родителю, откуда его можно передать необходимому дочернему блоку.\nЕсли вдруг вам понадобится передать свойство соседнему родителю, вы, опять же, просто переносите его на уровень выше, а потом «спускаете» обратно к нужному блоку.\nРешение довольно простое, а главное — рабочее. Но что делать, если нужно передать свойство дальнему блоку?\nДля этого нужно «поднять» свойство по всему дереву вверх до самого первого блока, а потом «спустить» обратно к нужному дочернему блоку. Проблема в том, что это свойство будет проходить через кучу промежуточных компонентов. Этот утомительный и трудоёмкий процесс известен как \nпробрасывание\n (англ. \nprop drilling\n).\nИменно на этом этапе задействуется Context API. Он даёт возможность передавать свойства отдельным блокам дерева без сложных манипуляций с родительскими и дочерними блоками.\nВ качестве примера использования React Context возьмём вот такой забавный переключатель дня и ночи:\nПолный код можно посмотреть \nздесь\n.\nСоздание Context\nВначале нужно сделать так, чтобы всё приложение имело доступ к Context. Для этого в \nindex.js\n нужно обернуть всё приложение в \nThemeContext.Provider\n. Ещё стоит передать ему свойство \nvalue\n. В нём будет храниться состояние: день или ночь.\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ThemeContext from \"./themeContext\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <ThemeContext.Provider value={\"Day\"}>\r\n    <App />\r\n  </ThemeContext.Provider>,\r\n  document.getElementById(\"root\")\r\n);\nПолучение свойств от Context через contextType\nПока что в \nApp.js\n возвращается компонент \n<Image />\n.\nimport React from \"react\";\r\nimport Image from \"./Image\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Image />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\nНам нужно с помощью Context менять \nclassName\n в \nImage.js\n с \nDay\n на \nNight\n и обратно. Для этого нужно добавить к компоненту статическое свойство \nContextType\n. Потом, используя интерполяцию строки, нужно передать это свойство в \nclassName\n в объекте \n<Image />\n.\nТеперь свойство \nclassName\n содержит строку из \nvalue\n:\nimport React from \"react\";\r\nimport Button from \"./Button\";\r\nimport ThemeContext from \"./themeContext\";\r\n\r\nclass Image extends React.Component {\r\n  render() {\r\n    const theme = this.context;\r\n    return (\r\n      <div className={`${theme}-image image`}>\r\n        <div className={`${theme}-ball ball`} />\r\n        <Button />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImage.contextType = ThemeContext;\r\n\r\nexport default Image;\nПолучение свойств из Context\nК сожалению, способ выше работает только с классовыми компонентами. Но благодаря \nхукам\n с помощью функциональных компонентов теперь можно сделать всё что угодно. Так что для полноты картины нужно конвертировать имеющиеся компоненты в функциональные и использовать \nThemeContext.Consumer\n, чтобы передать информацию между ними.\nПишем приложение со списком дел при помощи React Hooks\ntproger.ru\nЭто можно сделать, обернув элементы в экземпляр \n<ThemeContext.Consumer>\n. Внутри него нужно предоставить функцию, возвращающую элементы. В данном случае будет использоваться паттерн «render props», который позволяет передать компоненту в качестве children любую функцию, которая возвращает JSX код.\nimport React from \"react\";\r\nimport Button from \"./Button\";\r\nimport ThemeContext from \"./themeContext\";\r\n\r\nfunction Image(props) {\r\n  // Это больше не нужно\r\n  // const theme = this.context\r\n\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {theme => (\r\n        <div className={`${theme}-image image`}>\r\n          <div className={`${theme}-ball ball`} />\r\n          <Button />\r\n        </div>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\n// Это больше не нужно\r\n// Image.contextType = ThemeContext;\r\n\r\nexport default Image;\nПримечание\n<Button />\n тоже нужно обернуть в \n<ThemeContext.Consumer>\n — в будущем это добавит функциональности кнопке.\nimport React from \"react\";\r\nimport ThemeContext from \"./themeContext\";\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {context => (\r\n        <button className=\"button\">\r\n          Switch\r\n          <span role=\"img\" aria-label=\"sun\">\r\n            🌞\r\n          </span>\r\n          <span role=\"img\" aria-label=\"moon\">\r\n            🌚\r\n          </span>\r\n        </button>\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Button;\nВынесение свойств из Context\nНа текущем этапе в приложении передаётся заранее прописанное значение, но наша цель — переключать день и ночь кнопкой. Для этого нужно переместить \n<Provider>\n в отдельный файл и обернуть его в собственный компонент \nThemeContextProvider\n.\nimport React, { Component } from \"react\";\r\nconst { Provider, Consumer } = React.createContext();\r\n\r\nclass ThemeContextProvider extends Component {\r\n  render() {\r\n    return <Provider value={\"Day\"}>{this.props.children}</Provider>;\r\n  }\r\n}\r\n\r\nexport { ThemeContextProvider, Consumer as ThemeContextConsumer };\nПримечание\n Теперь свойство \nvalue\n обрабатывается и в новом файле \nThemeContext.js\n, поэтому обработку этого значения из файла \nindex.js\n нужно убрать.\nИзменение Context\nЧтобы подвязать кнопку, сначала нужно добавить состояния \nstate\n в \nThemeContextProvider\n:\nimport React, { Component } from \"react\";\r\nconst { Provider, Consumer } = React.createContext();\r\n\r\n// Примечание: ещё вы можете использовать хуки, чтобы определять состояние \r\n// и преобразовывать его в функциональный компонент\r\nclass ThemeContextProvider extends Component {\r\n  state = {\r\n    theme: \"Day\"\r\n  };\r\n  render() {\r\n    return <Provider value={\"Day\"}>{this.props.children}</Provider>;\r\n  }\r\n}\r\n\r\nexport { ThemeContextProvider, Consumer as ThemeContextConsumer };\nПотом нужно добавить метод переключения между днём и ночью:\ntoggleTheme = () => {\r\n  this.setState(prevState => {\r\n    return {\r\n      theme: prevState.theme === \"Day\" ? \"Night\" : \"Day\"\r\n    };\r\n  });\r\n};\nПосле этого нужно изменить значение \nvalue\n на \nthis.state.theme\n, чтобы свойство устанавливалось из состояния:\n render() {\r\n    return <Provider value={this.state.theme}>{this.props.children}</Provider>;\r\n  }\nТеперь нужно изменить \nvalue\n на объект, содержащий \n{theme: this.state.theme, toggleTheme: this.toggleTheme}\n, а также заменить использование \nvalue\n на получение поля \ntheme\n из объекта. То есть нужно каждое \ntheme\n заменить на \ncontext\n, а каждую ссылку на \ntheme\n — на \ncontext.theme\n.\nИ под конец на кнопку нужно повесить слушатель события \nonClick\n. При нажатии кнопки должен вызываться \ncontext.toggleTheme\n — в таком случае будут обновляться Consumer’ы, которые используют состояние от Provider’ов. Код кнопки будет выглядеть примерно так:\nimport React from \"react\";\r\nimport { ThemeContextConsumer } from \"./themeContext\";\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <ThemeContextConsumer>\r\n      {context => (\r\n        <button onClick={context.toggleTheme} className=\"button\">\r\n          Switch\r\n          <span role=\"img\" aria-label=\"sun\">\r\n            🌞\r\n          </span>\r\n          <span role=\"img\" aria-label=\"moon\">\r\n            🌚\r\n          </span>\r\n        </button>\r\n      )}\r\n    </ThemeContextConsumer>\r\n  );\r\n}\r\n\r\nexport default Button\nТеперь эта кнопка переключает день и ночь.\nРекомендации к работе с Context\nХоть в этом коде всё работает отлично, всё же есть некоторые аспекты с работой Context:\nНе используйте Context, если он заменяет пробрасывание всего на один-два уровня. Этот инструмент — отличный способ, если нужно распространить состояние на множество компонентов, находящихся в «дереве» далеко друг от друга. Но если вам нужно просто опуститься или подняться на пару уровней, то пробрасывание будет легче и быстрее.\nПостарайтесь не использовать Context для сохранения локального состояния. Например, если вам нужно сохранить введённые в форму данные, то лучше использовать локальное свойство.\nВсегда оборачивайте родителя в Provider’а на как можно более низком уровне — не стоит использовать самую верхушку «дерева».\nНаконец, если вы решили пересылать свойства таким способом, важно помнить про наблюдение за производительностью и рефакторингом. Но это скорее всего не понадобится, если просадки в производительности не будут сильно заметны.\nРефакторинг через классы: вычищаем свой JavaScript-код\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nReact\nТакже рекомендуем:\nПишем полноценное приложение на React с нуля за час\n9 полезных советов для тех, кто начинает знакомство с React.js\nReact, Angular и Vue: что изучать в 2019 году?\nReact: практики, которые помогут стать продвинутым разработчиком",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/react_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"706px\" viewBox=\"0 0 706 329\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/gevur92qwoxvdjnm12dw.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"716px\" viewBox=\"0 0 716 337\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/u20r26dtxyr6ek6krzsb.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"712px\" viewBox=\"0 0 712 340\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/wtlykrxnx8xi12h4wek4.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"717px\" viewBox=\"0 0 717 336\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/g3xrvthcw24izllvb58w.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"718px\" viewBox=\"0 0 718 339\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/ey25z0hvmy31xiiqqwgq.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"714px\" viewBox=\"0 0 714 350\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/ckfpokb2cz3ffmn8238i.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"416px\" viewBox=\"0 0 416 384\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/3evdww.gif",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"416px\" viewBox=\"0 0 416 384\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/3evdww.gif"
                ]
            },
            {
                "url": "https://tproger.ru/articles/becoming-a-developer-after-courses/",
                "title": "Закончил курсы, что дальше? — узнаём из первых уст, реально ли после онлайн-курсов и самообучения стать разработчиком",
                "created_date": "12 ноября 2019 в 12:28",
                "body": "Анна Мосягина, продюсер факультета «Программирование» в «Нетологии»\nПрофессия разработчика становится всё более популярной, и количество курсов, предлагающих освоить программирование под тем или иным углом, растёт. В разработке многому можно научиться только на личном опыте, а погружение в сферу не каждому даётся с лёгкостью. Действительно ли курсы помогают сделать это погружение легче или даже сменить профессиональный вектор? Рассказываем 6 реальных историй.\nИз армии в крупную IT-компанию: история Сергея Вертепова\nВ университете я учился на специалиста по защите информации, им же и работал. На третьем курсе понял, что ожидал от этой специальности гораздо большего и работать по ней совершенно не хочу.\nЯ не люблю заниматься чем-то бесцельно, поэтому абстрактная цель «научиться программировать» недостаточно меня мотивировала. Как раз в то время, когда я блуждал в океане информации, не понимая, с чего начать обучение, наткнулся на контекстную рекламу «Школы программирования» (сейчас — GeekBrains) и подумал: «Почему бы нет». Ведь если не научишься чему-то, то не сделаешь домашнее задание, а в конечном итоге тебе не дадут сертификат, ты потеряешь деньги и время — отличная мотивация учиться.\nНе могу сказать, что было очень сложно: нас погружали в тему очень плавно. Начали с базового HTML, потом РНР с самых азов. Первым делом научился делать калькулятор. Когда для тебя это новый язык — даже простая задача становится интересной. Основные сложности были в недостатке времени. Я учился и работал, а по вечерам надо было ещё и домашние задания делать. В общем, личной жизни у меня тогда практически не было.\nПосле курсов я стал героем шутки про «джуниора», который всё знает и умеет. Я уверенно рванул на фриланс-биржи, где потерпел фиаско и ударился лбом о синдром самозванца. После диплома пошёл в армию, где окончательно убедился, что не хочу ничего и никого защищать. Там же начал читать книги, изучать материал, а по возвращении искать работу в IT-сфере.\nПоскольку между курсами и отправкой резюме прошло два года, первое собеседование я провалил. Проанализировал, что было не так, провёл работу над ошибками и продолжил бороздить просторы HeadHunter. В общем, ответов «у вас низкая квалификация» я получил довольно много. Были задания, над которыми я сидел два дня и две ночи с перерывами на трёхчасовой сон. Они меня неплохо «прокачали»: своё последнее тестовое задание, на которое мне дали неделю, я сделал за полтора дня и получил оффер.\nСейчас у меня всё прекрасно. Имею опыт в коммерческой разработке чуть больше трёх лет и работаю в одной из крупных российских IT-компаний в должности старшего разработчика.\nПосоветовать могу только одно: не бойтесь и всегда разбирайте свои ошибки\n. Конечно же, не переставайте развиваться, иначе есть риск сильно отстать.\nИз ученика в «играющего тренера»: история Николая Хащанова\nВ 90-х я изучал Basic и Fortran, а во время учёбы в школе делал простые сайты на HTML, используя движок e107. Закончил в 2013 году РГТЭУ по специальности «Менеджмент организации». Трудовую деятельность начинал в торговле и постепенно перешёл в строительство, где дорос до руководителя проектов. Параллельно с работой вёл различную деятельность как ИП: занимался производством виниловых наклеек, антитюнингом автомобилей и т. д.\nВ январе 2018 года начал работать программистом в «Аврора Групп» — одной из крупнейших инжиниринговых компаний. Знания в управлении строительством и проектированием помогли с нуля выстроить архитектуру приложений для повышения прибыли компании и разработать корпоративный портал (CRM) под все бизнес-процессы. А вот знания в разработке получал уже на курсах в «Нетологии»: сначала одновременно прошёл курсы по PHP и JavaScript, чуть позже «JavaScript в браузере» и SQL. По окончании курса JS меня взяли аспирантом. Так я начал улучшать свои знания ещё и на других курсах по веб-разработке — JavaScript, PHP, «Основы JavaScript в браузере» и SQL, а в этом году мне предложили проверять домашние задания на курсе «основы PHP» и оптимизировать курс «JavaScript в браузере».\nЗнания, полученные на курсах, помогли мне почти за 2 года разработать более 15 приложений, которые были интегрированы в единую систему для автоматизации и оптимизации деятельности компании. В планах на следующий год — разработка мобильного приложения, а ещё через год — упаковка данной системы в коробку и выпуск на рынок.\nЧто могу сказать новичкам: стать разработчиком несложно\n. Это такая же профессия, как и множество других. А уровень квалификации полностью зависит от вложенных в собственное развитие сил. Для начала советую разобраться с термином «алгоритм» и перед написанием кода рисовать блок-схему или писать псевдокод. Понимание алгоритма и умение пользоваться документацией помогает выстроить логику функциональности самого приложения и на выходе получить готовый продукт.\nПопытка уйти из школы: история Алины Косенко\nЯ заканчивала институт по специальности «Учитель русского языка и литературы». На тот момент казалось, что я всегда буду при деле. Проработав несколько лет в школе, поняла: хочется не только рассказывать правила русского языка детям, но и учиться самой. Так я начала исследовать разные сферы: записалась на бесплатные занятия и вебинары по маркетингу, продажам и в конце послушала лекцию по веб-разработке.\nПрограммирование казалось мне очень сложной сферой: я всегда считала себя гуманитарием. Но после лекции подумала «почему бы и нет» и пошла на курс по веб-разработке. Он был долгим и очень интенсивным: задания присылали по 3–4 раза в неделю, причём на выполнение каждого у меня уходило по неделе. Поэтому сроки я всегда пропускала и просила кураторов подождать меня. Было сложно, но мне очень нравилось.\nПо итогу курса стало проще разбираться в сфере, я могла написать простой код, но полностью профессию веб-разработчика так и не освоила. Наверное, если бы прошла курс заново, то стало бы немного проще. Диплом я так и не защитила: сначала говорила себе, что сдам позже, но под конец мотивация всё-таки пропала.\nВ итоге я продолжила заниматься разработкой в свободное от работы время, иногда практиковалась самостоятельно и думала, что когда-нибудь решусь посвятить себя сфере полностью. Но пока мне страшно искать заказы и полностью отказываться от работы учителя: там есть постоянный доход, а сфера разработки для меня новая.\nЧто я могу сказать начинающим: оцените свои силы ещё в самом начале\n. Изучайте самостоятельно темы, смотрите бесплатные вебинары и лекции — делайте всё, что поможет вам вникнуть. Если вы хотите поменять сферу деятельности кардинально, будьте смелыми, гораздо смелее меня 🙂\nВоля случая: работа в IT вместо Олимпиады в Рио. История Владимира Тесленко\nДесять лет я боролся за сборную Украины по греко-римской борьбе в весе до 96 кг. В 2016 году я готовился на отборочный чемпионат к Олимпиаде в Рио и на тренировке порвал мениск колена. Для карьеры спортсмена это был фатальный инцидент: травмированным я был никому не нужен. Даже если бы мне оплатили операцию, я бы стал должником на ближайшие годы.\nОднажды по дороге в больницу я случайно встретил друга из Политехнического Университета, где мы вместе учились на радиотехническом факультете. На тот момент он работал тестировщиком и рассказал, что это за профессия, какие условия работы и зарплата у айтишников. Так мысль о развитии в этой сфере «залезла мне под кожу».\nЯ прекрасно понимал, что после профессионального спорта будет тяжело освоить новую область, где должны работать мозги. Начал готовиться дома сам, денег на обучение не было вообще — работать с травмированным коленом было крайне тяжело.\nДаже элементарные нагрузки по учёбе давались очень тяжело. После чтения книг и просмотра видеоматериалов клонило в сон: заниматься больше 4–5 часов в день я не мог. Спустя два месяца понял, что сам не справлюсь и необходимо идти на курсы. К этому времени я уже раскопал многое об IT-сфере, походил на конференции, завёл знакомства с разработчиками и тестировщиками. От них и узнал, на какие курсы лучше пойти, одолжил денег и записался в Main Academy. Занятия проходили 3 раза в неделю по три часа, весь материал был на английском языке. В таком режиме мы учились 3 месяца. Я думал, что домашняя подготовка поможет мне, но годы спорта оставили свой след: я хуже всех сдавал тесты и теорию, плохое знание английского мешало понимать презентации. Мне было сложно абсолютно всё. У нас в группе была конкуренция и никто никому не помогал. Поэтому я понимал, что единственный мой друг — преподаватель. Я постоянно задавал ему вопросы по материалу и домашкам, донимал расспросами о том, как попасть на работу.\nПосле первого месяца на курсах я начал рассылать резюме на позиции QA Engineer всех уровней от Junior до Senior. Естественно, мне говорили, что я не подхожу. Когда я отослал резюме в Norse Digital на позицию QA Lead, мне тоже отказали. Тогда я ответил, что только начинаю и готов работать за еду. И спустя неделю меня пригласили на собеседование! На нём задавали вопросы по программированию: какие принципы ООП знаю, какими языками и какой версией пользовался. Я так переволновался, что когда перешли к вопросам по теории, все знания растворились и я смог ответить только на тридцать процентов. Понимал, что собеседование завалил. Но мне дали тестовое задание: описать часть сайта тест-кейсами. За несколько часов описал штук 10 кейсов и отправил. Получил обратную связь: «задание выполнил неплохо», и в итоге меня взяли на позицию «тестировщика контент-менеджера». В первые месяцы работы сложнее всего было освоить операционную систему Linux: до этого я её никогда не видел. Мне приходилось постоянно донимать админов: я не понимал, как работать с терминалом, что такое SSH и какие команды надо знать.\nКогда начал работать, мне оставалось учиться на курсах ещё месяц, но главная цель — войти в IT-индустрию — была достигнута. Поэтому на экзаменах я был спокоен, ведь у меня уже была работа. Сегодня я работаю на позиции QA Automation уже в третьей ИТ-компании с общим стажем в 3,5 года. А ещё успеваю активно заниматься спортом и борьбой, ведь ей я отдал больше 20 лет жизни.\nВсем новичкам хочу пожелать решимости\n. Если вы поняли, что вам надо в ИТ-сферу, действуйте. Работа — это образ жизни, от неё зависит ваш график, окружение, атмосфера и настроение. Самое главное — это желание развиваться, гореть тем, чтобы вас взяли на работу. И тогда огонь в глазах увидят работодатели и обязательно вас возьмут.\nРедактор не гуманитарий: история Натальи Рыжовой\nДо обучения я работала с текстами в СМИ, но не была гуманитарием и всегда хотела заниматься чем-то более конкретным и сложным. Однажды я делала сайты на конструкторе для родственников и захотела углубиться в программирование. Случайно увидела рекламу бесплатного курса «Нетологии» по вёрстке и пошла посмотреть. В итоге с удовольствием прошла и записалась на следующий курс. А потом на следующий.\nСначала учиться было легко и интересно. Когда приступили к программированию, стало сложно: его я не знала совсем, если не считать изучения Pascal в школе. Кроме того, мне мешал «синдром отличницы»: я всегда сначала честно мучаюсь самостоятельно и только потом прошу помощи. У меня в окружении нет программистов, поэтому ни с кем, кроме преподавателей, я посоветоваться не могла. После курсов практиковалась на мелких частных заказах. Найти первого клиента было несложно: взяла на бирже фриланса заказ на вёрстку и даже сделала. А потом заказчик раскритиковал меня в пух и прах.\nНа самом деле, на работу «фронтенда» устроиться было сложно: требования к junior-позициям часто оказываются вполне на уровне middle full stack или дизайнера-верстальщика. Причина одна: работодатель хочет найти специалиста, который умеет всё. Так мне пришлось продолжить учиться самостоятельно, чтобы «прокачаться» и выучить несколько незнакомых до этого технологий. Сейчас у меня есть постоянная работа, в основном это поток заказов на доработки сайта. Это не совсем то, чего я хочу, но приносит заработок и практику.\nДам совет новичкам: постоянно практикуйтесь\n. Немного самостоятельно написанного кода даст вам больше, чем несколько очень хороших лекций. Вступите в профессиональное сообщество: если айтишников нет среди знакомых, найдите их в интернете. Это может стать большой поддержкой для вас.\nОт автомобильного бизнеса к разработке: история Александра Коловатова\nСо старших классов я хотел быть программистом, но ушёл в бизнес. Одно время работал заместителем директора в дилерском центре DAF — нидерландском производителе грузовых автомобилей. В подчинении у меня находилось порядка 40 человек. Потом я были владельцем магазина запчастей DAF, но что-то не пошло. А с 2015 года и по сегодняшний день держу сеть реалити-квестов «Интуиция».\nКогда я несколько раз потерял деньги и бизнес, решил: мне нужно то, что невозможно потерять, — знания. Вторым толчком стал высокий спрос на программистов и ощущение, что в этой сфере возможен постоянный рост.\nУчился самостоятельно по учебникам и видеоматериалам на просторах интернета. Сразу скажу: было сложно. Несколько лет голова не работала в полную силу, а организм всячески отвергал обучение. Некоторые темы давались очень «больно», я терпел и боролся, начинал заново по несколько раз. Хотел как можно скорее стать программистом, поэтому занимался много и делал перерывы только на отдых: в будни учился от 4 часов в день, в выходные — от 6 часов. После первых двух месяцев такого режима впал в депрессию с полным ощущением своей непригодности. Сделал перерыв в две недели, затем вернулся и больше не срывался.\nЧерез 8–9 месяцев появилось ощущение, что я готов работать в этой сфере. Уже на втором собеседовании меня взяли в небольшой e-commerce проект, но только после выполнения тестового задания: практически везде просят что-то написать. На самих собеседованиях не было сложно — все прекрасно понимают, что вы новичок и ещё многого не знаете.\nСейчас жизнь складывается отлично. Помимо постоянного профессионального развития растёт и оплата моего труда. Совсем недавно прошёл собеседование в более серьёзную компанию с офисами в Калифорнии и Нью-Йорке. Работаю над очень крутыми проектами, о которых 3 года назад мог только мечтать.\nСовет простой: верить в себя, брать и делать\n. Непонятна тема — начните заново или пропустите и вернитесь позже. Нужно понимать, что на один час теории должно приходиться два часа практики. Не пытайтесь найти готовый ответ сразу, попробуйте догадаться сами. Если ваше решение не такое крутое и красивое, как у других — это нормально. И последнее: даже самый опытный разработчик не знает всего. Всего знать нельзя, уж слишком обширная сфера.\nНе смешно? А здесь смешно: \n@ithumor\nИстория успеха\n, \nКарьера\n, \nСоветы\nТакже рекомендуем:\nПрограмма минимум: что должен знать начинающий C# программист\nАдаптивная верстка: что это и как использовать\nДостаточно ли вы умны, чтобы работать в IT?\n9 полезных советов для тех, кто начинает знакомство с React.js",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-19-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/photo_2019-11-08-22.19.45-e1573408680723-150x150.jpeg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/is-it-worth-writing-clean-code/",
                "title": "Стоит ли писать «красивый» код — отвечают эксперты",
                "created_date": "11 ноября 2019 в 12:55",
                "body": "Стоит ли тратить время на «красивое» оформление кода согласно разным Style Guide, если того не требует заказчик? Или же это всё дурные мысли, появляющиеся от безделья, и главное, чтобы код работал? Узнаем у экспертов.\nАндрей Черабаев\n, \nразработчик в Mediasoft\nКорректное именование переменных и Code Style — это не прихоть. Это то, из чего складывается такая полезная вещь, как семантика кода, она же в переводе с высшего эльфийского — читаемость и понятность. В своём проекте можно творить любую дичь, хоть запутывание кода на уровне написания — но любой коммерческий проект подразумевает поддержку. А значит, упорядоченный, читаемый код — «не роскошь, а средство передвижения». Просто спросите себя — а я сам эту «мудрость предков» пойму через месяц? Или буду обкладывать матом человека, который это написал?\nМой любимый пример — это работа с сервисом очередей на одном проекте. Код был написан на основе внутренней магии сервиса и содержал четыре переменные — \na\n, \nb\n, \nc\n и \nd\n. Чтобы выяснить, что это за переменные и какая именно магия используется внутри, ушло десять часов. Вместо десяти минут. Как сказал человек, которому пришлось это разбирать… Хотя нет, я не могу этого рассказать — это непедагогично.\nЕсть и более мелкие примеры, с которыми сталкиваются разработчики изо дня в день. Все они похожи между собой и кочуют из проекта в проект.\nБанальное именование переменных. Например, абстрактные \ndata\n, \nresult\n и \nvalue\n — там же данные, результат и значение, что может быть непонятного? Только в проекте этих данных, результатов и значений — как у дурака фантиков. К тому же, каждый раз придётся вспоминать, что там лежит, если не оставить себе на будущее комментарии. Перед каждой строкой, где эти переменные используются.\n«Вроде-как-синонимы». Индекс элемента массива, обозначенный как \norder1\n, даже выглядит логично — элементы идут по порядку, начиная с первого. Только «порядок сортировки» и «порядковый номер элемента» это даже не синонимы, хотя в голове автора это, видимо, так. Здесь можно было бы вспомнить про «\nЛожных друзей переводчика\n», если бы мы говорили о трудностях перевода.\n«Я художник — я так вижу». Вот функция с названием \ngetListCount\n, которая возвращает \ntrue\n, \nfalse\n или \nnull\n. Что хотел сказать этим автор? — что длина списка строго больше единицы. А что значит \nnull\n? — что не придумали другого обозначения для пустого списка. Но читая название функции, я хочу сразу понимать, что она делает, а не гадать, почему на вопрос «Ты будешь чай или кофе?» мне отвечают «В четверг».\nРазное название для одних и тех же терминов. \ndirect\n, \nisDirect\n, \noneWay\n и \nemptyTransfers\n — нормальные названия для прямых рейсов в рамках ста строк кода (если не смог договориться с голосами в голове).\nСмотря на все эти примеры, основную мысль можно выразить так: правильное именование сущностей позволяет поддерживать код без головной боли, пустой траты времени и битвы экстрасенсов. Это даёт ожидаемое поведение чего бы то ни было.\nТак что не стоит пренебрегать корректным именованием переменных и форматированием кода — последнее в профессиональных редакторах вообще делается парой клавиш. И себе нервы сэкономите, и человеку, который за вами это будет доделывать. И помните: статья «\nКак писать неподдерживаемый код\n» — это вредные советы, а не руководство к действию. \n42\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n42\nПовысить\nПонизить\nСергей Комаров\n, \nдиректор департамента информационных решений компании РДТЕХ\n\nТаким вопросом программисты задаются достаточно часто, и главный аргумент противников «красивого» кода — «время будет потрачено впустую». И если разговор зашёл про время, давайте посмотрим на проблему с другой стороны. Допустим, кому-то придётся модифицировать код, написанный другим программистом (возможно, это будет даже его собственный код, но с момента его написания прошло значительное время, и всё порядком подзабылось). Как быстро удастся с ним разобраться, когда в нём нет комментариев, на каждой строчке расположено по несколько действий, а все переменные именуются «А», «ВВ», «ССС»?  Сразу отвечу: иногда бывает проще написать новый код, чем распутывать это «спагетти».\nТаким образом, оформив и документировав код, мы значительно экономим время того, кто будет дальше его поддерживать и развивать. \n32\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n32\nПовысить\nПонизить\nДаниил Вершинин\n, \nведущий программист компании Polarr Inc.\nОтвет на поставленный запрос напрямую зависит от того, как и с кем работает программист.\nЕсли перед программистом стоит задача написать приложение или библиотеку для себя, или если в будущем не планируется привлечения других людей для работы над проектом, то можно действительно «творить» со своим кодом всё, что душа пожелает. Золотое правило для программистов-одиночек звучит следующим образом: «Пока я понимаю свой код, ничего дополнительного мне делать не нужно».\nЕсли программист работает в команде (или в ближайшее время такая работа планируется), то возникает необходимость в документировании и тестировании исходного кода, а также в корректном именовании переменных, соблюдении стилевого гида. Это необходимо для того, чтобы прямо через исходный код сообщать о своих намерениях коллегам. В противном случае, над проектом всегда будет висеть угроза большого количества ошибок, возникших в результате влияния одних кусков кода на другие — регрессий. Командная работа также подразумевает использование нетривиальных техник программирования — design patterns. С их помощью код разбивается на необходимые структурные элементы, которые документируются и тестируется независимо друг от друга. Если все программисты, работающие над одним проектом, говорят на одном «языке» архитектуры приложения, то каждый сможет написать такие независимые модули, а вероятность их «поломки» будет стремиться к нулю. Design patterns, unit tests, документирование кода — это своеобразное письменное соглашение программистов о том, как ведётся работа над конкретным проектом. Она помогает коллегам лучше помогать друг друга через код.\nВо всяком случае, использование всех вышеперечисленных приёмов для реализации личных проектов, — это хороший способ дисциплинировать себя, научиться писать код, который легко поддерживать спустя многие годы работы над приложением. Для программистов-новичков, к тому же, это лучший шанс подготовиться к работе в команде. \n14\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n14\nПовысить\nПонизить\nАлександр Бочкин\n, \nгенеральный директор компании «Инфомаксимум»\nПисать «красивый» код стоит. Почему?\nОткрывая меню любого ресторана/бара/кафе, что вы делаете в первую очередь? Видите картинки. Для себя определяете: нравится ли блюдо, понятен ли его состав, большая ли порция, будет ли её достаточно. Согласитесь: если вам принесут некую непонятную субстанцию, пусть даже и гипотетически вкусную, первая реакция — недоверие.\nТак и с кодом: глядя на него, вам будет хотеться понять его алгоритм, оценить, как программа поведёт себя в том или ином случае, где необходимо внести определённые правки.\nВ длинном и неаккуратном коде вы можете возиться очень долго — потеряете время, нервы, силы, и нет гарантии, что всё получится.\nПрограммист-профессионал чётко знает, что и для кого он пишет, какую задачу должен решать этот код, даже если единственное требование заказчика — «чтобы работало». Код не должен впечатлять, он должен быть понятным, однозначным, конкретным, предсказуемым в будущем. Такой код намного проще не только поддерживать, но и оптимизировать, и фиксить при необходимости.\nБольшую роль играют наименования переменных и методов, поскольку значительно упрощают чтение кода. Достижение той же цели, но значительно меньшим количеством кода, делает его более надёжным. Комментируйте, но не увлекайтесь. Не проектируйте лишнего, отталкивайтесь от определённой задачи. Отслеживайте ошибки. \n13\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n13\nПовысить\nПонизить\nРуслан Титов\n, \nтехнический архитектор бизнес-приложений «1С» компании «ГЭНДАЛЬФ» \n«Красивый», но неработающий код бесполезен, а работающий код без красоты нечитаем и сложен. Сделать его и работающим, и «красивым» помогает целый ряд ПО. Мы, например, используем:\nSmoke test на Vanessa-add (разработанная на основе Vanessa-behavior) — для проверки работоспособности;\nSonarQube — для анализа качества и «красоты» кода.\nВот некоторые моменты, на которые мы обращаем внимание при написании кода в своих разработках:\nкогнитивная сложность функции/процедуры: помогает ограничить количество условий и циклов в одной функции/процедуре. Такое ограничение нужно для повышения сопровождаемой функции/процедуры. Многие разработчики этим общим стандартом пренебрегают, а в дальнейшем сталкиваются с достаточно типовыми проблемами — например, в тестировании или в доработке таких функций/процедур;\n«магические» числа/даты — сущность, появляющаяся в коде из ниоткуда и используемая напрямую в выражениях; за ней надо следить, потому что это тоже достаточно частый грешок программистов, после чего сам же программист сталкивается с непониманием того, что он сделал;\nименование виртуальных таблиц в запросах. Ещё одна очень часто встречающаяся проблема, когда программист строит многоуровневый запрос с большим количеством виртуальных таблиц или вложенных запросов и именует их по типу VT1, VT2, VT3 и т. д. В дальнейшем такой подход усложняет процесс сопровождения и читаемости запроса.\nЭто, разумеется, далеко не все важные моменты. Но всё, что ещё можно было бы здесь перечислить, так или иначе влияет на сопровождаемость, читаемость и тестирование кода. Отсюда можно сделать вывод: «красивый» и работающий код, написанный по общепризнанным стандартам, упрощает и сокращает затраты на его сопровождение. \n8\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nЕвгений Камышанов\n, \nLead Software Engineer в EPAM\nНачнём с самого главного: если код не работает, то можно не тратить время на оценку остальных его параметров. Неработающий код — это отсутствующий код. Но как только всё собралось и заработало, наступает время подумать, что же дальше.\nА дальше этот код будут читать. Много, долго и совершенно непричастные люди. Гораздо дольше, чем планирует автор, и люди, максимально далёкие от заложенных в коде идей. Или даже сам автор, но в ситуации, которая исключает плавное и вдумчивое погружение во вчерашние озарения. Поэтому то, что называется «красивостью», является обычным инструментом, который призван удешевить главный параметр кода — его сопровождаемость.\nАрхитектура, стиль, следование стандартам и документации, мнемоничность именования сущностей, да даже размеры отступов — это всё должно служить одной цели: облегчению сопровождения кода. То есть удешевлению стоимости внесения изменений в уже работающий код.\nЗаказчик в крайне редких случаях предъявляет какие-то требования к коду. Разве что его основной бизнес — программирование. Покупают у программистов фичи, а не код, инструменты и их работающую функциональность. А ещё дешёвое внесение модификаций в уже работающую систему или расширение функциональности, не требующее экспоненциально растущих затрат.\nМожно ли сэкономить на красоте? Можно, конечно. Если код планируется «write-only» — запустить один раз и забыть.\nЯ не вижу дихотомии. Код должен работать и быть красивым, то есть простым (не примитивным!), читаемым, понятным, легко модифицируемым и расширяемым. \n58\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n58\nПовысить\nПонизить\nПетр Урваев\n, \nруководитель технологических решений SimbirSoft\nКорректное оформление кода позволяет сохранять код понятным и поддерживаемым. На крупных проектах, над которыми работают несколько команд программистов, особенно важно правильно понимать то, что сделано другими. Во frontend разработке, в частности, принято комментирование кода согласно JsDoc и корректное именование переменных. Для оформления отступов и форматирования можно применять Prettier, настраивать pre-commit и pre-push hooks для Git, а в качестве дополнительного средства для улучшения качества кода использовать статические анализаторы.\n33\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\n\n \nРоман Спиридонов\n, \nСТО в The JstUP Team\nCode Style важен для проекта, особенно если над ним работает не один человек, а целая команда. Для того, чтобы с кодом в дальнейшем можно было работать и поддерживать его, дополняя и внося изменения, обязательно должна быть логика именования переменных, описания функций и т. п. Вопросы стилизации кода, коррекции его отступов, расстановку запятых можно автоматизировать и не тратить на них времени, если в проекте уже есть настройки для плагинов, форматирующих код в IDE или для самой IDE, если язык это позволяет делать. На эту часть работы тратится от силы час в начале работы над проектом и дальше автоматика всё делает за разработчика, хотя с какого-то момента уже и сам начинаешь писать код в соответствии со стилем (потому что это очень удобно, когда сразу всё в одном стиле).\nЕсли же стоит задача сделать как можно скорее, чтобы выкатить функцию для тестирования, то в этом случае, необходимо после выкладки функции производить дополнительно некоторый рефакторинг, который позволит привести код в порядок и сделать из сложно читаемого быстрого решения что-то, что будет нормально восприниматься не только автором кода, но и его коллегами.\nМоё мнение, что проекты, в которых есть Style Guide и следование стандартам написания кода и именования переменных, на голову жизнеспособнее в долгосрочной перспективе по сравнению с проектами, где Style Guide отсутствует. \n17\nОтвет эксперта\n2019-11-11T12:55:53+03:00\n\nРейтинг полезности ответа: \n17\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, нужно ли писать «красивый» код?\nЕсли вы пишете что-то для себя, то в целом вы вольны творить с кодом что угодно. До тех пор, пока вы понимаете, что происходит, можно считать, что проблем нет.\nЕсли же вы работаете над каким-то проектом с командой, то тут, безусловно, нужно придерживаться определённых правил. И дело не в том, что у компаний слишком много денег, что они готовы тратить драгоценное время программистов на написание кода в каком-то определённом стиле. Проекты, как правило, предполагают поддержку. А код, написанный абы как, поддерживать дорого, потому что даже его создатель через месяц может не вспомнить, почему он использовал этот шаблон проектирования или что это за переменная \ndata\n.\nИтого: пишете что-то для себя — чистый код может подождать, работаете в команде — следуйте принятым правилам оформления кода и пишите с перспективой на будущее.\n100500\nЛучший ответ\n2019-11-11T12:55:53+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nКодстайл\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-17-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/10/cherabaev-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/12/rdtex_Komarov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/90652_5df10112_Cny7JlbW_1571926736-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/07/72846_8c58f2d3_lmmtGUDr_1549637442-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/Titov-Ruslan-e1566837673488-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Evgenii-Kamyshanov_1-e1571403674763-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/1iTn0ir0fBY-e1573477470375-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/06/81860_2da8d61a_UtvTGeVI_1560461761-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/5-reasons-to-participate-in-datathon-skillfactory/",
                "title": "Как устроены хакатоны, зачем на них ходить и как готовиться: разбираем на примере темы Data Science",
                "created_date": "11 ноября 2019 в 12:47",
                "body": "Хакатоны — это ивенты, которые устраивает компания или несколько компаний. Они собирают самых разных экспертов, чтобы в сжатые сроки решить конкретные бизнес-задачи. Это идеальная площадка для нетворкинга, где участники могут свободно обмениваться идеями и инструментами. Хакатоны вдохновляют новичков, позволяют профессионалам найти партнёров, а работодателям дают возможность оценить в работе и тех, и других.\nЕсть узкоспециализированные тематические хакатоны. Например, Data Science хакатон или datathon нацелен на решение задач data-проектов. На таком мероприятии собирается множество специалистов по обработке и анализу данных со всех уголков страны или даже мира.\nЧто вас ждёт на хакатоне\nПодготовка\nКак правило, всё начинается с того, что компания-спонсор объявляет своё задание и метрики, которые будет использовать жюри при оценке решений.\nОни могут быть\nсубъективными: инновационность, креативность;\nобъективными: например, в случае с Data Science — точность классификации того или иного датасета.\nВам также предложат ресурсы, которые можно использовать: API, техника, наборы данных.\nПодбор команды\nДалее участники объединяются в группы, как правило они формируются заранее. На самом хакатоне команда предлагает решение, рассказывает о своём опыте и роли каждого участника.\nСостав команды зависит от тематики и задач хакатона. На Data Science хакатоне в команде обычно четыре человека: бэкендер, фронтендер, data scientist и бизнес-эксперт.\nСоревнование\nВ течение всего ивента команда активно работает над прототипом, который ей нужно будет представить жюри в виде презентации.\nПо результатам хакатона участник может получить главный или один из призов: часто это деньги, дополнительные бонусы, а также возможность дальнейшего сотрудничества с компаниями-партнёрами.\nДополнительные активности\nИногда эксперты компании дают мастер-классы или читают лекции на технические темы. Также организаторы разбавляют ивенты активностями, чтобы участники могли отвлечься и немного расслабиться после напряжённой работы — это игровые приставки, теннис, кикер и даже йога.\nЗачем участвовать в хакатоне\nОбщение с комьюнити\nВы вряд ли найдёте более разностороннюю компанию экспертов и более благоприятную среду, чем на хакатоне. У каждого свой уникальный опыт, свои идеи и цели: вам удастся не только познакомиться с единомышленниками, но и обменяться мнениями, получить ответы на вопросы и свежий взгляд на своё решение задачи. Принципы открытости и доступности знаний и навыков, которые свойственны хакатонам, этому очень способствуют.\nВы также сможете воспользоваться помощью и поддержкой менторов и представителей компаний. Они могут направить в нужное русло, подсказать, что вы упускаете и на что нужно обратить внимание при разработке продукта. Это может сэкономить вам кучу времени и дать полезную информацию.\nВозможность получить классную работу\nКстати, компании нередко ищут себе сотрудников на хакатонах, ведь здесь всё как на ладони: вот потенциальный сотрудник в работе — что может быть нагляднее и весомее. Это вам не резюме и бесконечные этапы собеседования на десяти уровнях, здесь решения принимаются быстро и в то же время обоснованно.\nПри этом реальные результаты работы, с которыми вы подошли к финалу ивента, — отличное дополнение к портфолио, чтобы проще искать работу самому. Участие в хакатонах убедит работодателя, что вы заинтересованы развиваться в своей области и готовы не только выложиться на все 100%, но и соперничать на равных с конкурентами. К тому же вы не пасуете в стрессовой ситуации и выживете в условиях жёсткой конкуренции, с которой сталкиваются компании на рынке.\nПризы\nЭто скорее приятные бонусы, хотя призы могут быть и головокружительными. История помнит ивенты с призом 1 миллион долларов! В целом эти суммы значительно меньше, средний чек за победу — примерно 1000 долларов. Иногда все участники делят один призовой фонд соразмерно месту в рейтинге победителей. Нередко призами становятся гаджеты: часы, ноутбуки, смартфоны. Но вкус победы слаще всех подарков, к тому же это прокачанные скиллы, крутая команда и нереальное чувство удовлетворения от проделанной работы. И, как следствие, новая мотивация двигаться вперёд.\nОпыт\nУникальный опыт, который вы получите на хакатоне, всегда будет с вами. Вы сможете поделиться им с коллегами, продемонстрировать на интервью, чтобы получить работу мечты, и использовать на следующем ивенте, где вы будете уже не новичком, а опытным участником.\nОсобая плюшка для специалистов по работе с данными: уникальные датасеты\nКак правило, спонсоры предоставляют реальные датасеты. Данные защищены NDA, но вы можете использовать proof of concept с реальным датасетом. Это даст вам возможность продемонстрировать решение реальной задачи и ваше мастерство. С помощью такого трюка можно устроиться на новую крутую работу или запросто начать свой путь в Data Science.\nКак готовиться к хакатону\nХорошая подготовка — залог высокого результата, поэтому без неё не обойтись. Начните с внимательного изучения требований организаторов ивента, соберите команду мечты и не забудьте о бытовых мелочах.\nУсловия и требования организаторов\nУзнайте, что предоставляют организаторы, и соберите всё, что вам нужно для работы: зарядки, лэптопы, сетевые кабели, USB-модемы.\nУзнайте обо всех ограничениях — возрастных, по профессиональному опыту и т.д. Как правило, об этом известно заранее.\nОбсудите задачи с представителями компании, чтобы убедиться, что вы их правильно поняли, а они правильно их поставили. Все могут ошибаться, и организаторы тоже.\nВаша идея и личная подготовка\nУбедитесь, что ваша идея выполнима. Представьте себе процесс работы заранее. Да, у вас будет команда и несколько часов непрерывного брейншторма, но это не всегда помогает, особенно, если задача окажется неосуществимой.\nПодумайте об идее: можно ли её улучшить и максимально упростить, чтобы успеть её воплотить.\nПоинтересуйтесь заранее техническими навыками, которые могут потребоваться в работе над решением задачи. Подучите материал, потренируйтесь в спокойной обстановке — у вас вряд ли будет время искать и осваивать важную информацию на самом ивенте.\nРабота в команде и презентация\nСоберите команду до хакатона: вам будет комфортнее работать, если вы уже знакомы и доверяете членам команды как хорошим экспертам.\nУбедитесь, что вся команда понимает идею одинаково.\nВыберите своего спикера сразу. Так ответственный человек сможет потренироваться, отрепетировать заготовки и держаться увереннее перед жюри. Продумайте возможные вопросы и ответы на них, на самом ивенте уделите не менее двух-трёх часов подготовке всей презентации.\nКомфорт\nПредставьте себе свой график на хакатоне, чтобы понять, что вам пригодится из бытовых вещей. Так вы сможете хоть как-то обеспечить себе комфорт.\nНаденьте свободную удобную одежду и обувь, чтобы на пути к победе ничто вас не отвлекало.\nИ ещё, если вам по каким-то причинам не нравится ивент, и вы не видите в нём пользы для себя, не теряйте времени зря, уходите. Хакатоны нужны участникам так же сильно, как и компаниям. Можно закрыть глаза на погрешности организации, но с откровенно плохого хакатона лучше уйти совсем.\nБонус: курсы для подготовки к хакатонам по Data Science\nЧтобы лучше подготовиться к серьёзным соревнованиям, можно поучиться онлайн и пройти курсы.\nПервый путь: освоить профессию Junior Data Scientist. \nПройти курс\n, совсем не имея опыта, можно удалённо из любой точки мира. Менторы, эксперты и преподаватели из МИЭФ ВШЭ, EORA, HF labs, NVIDIA и Яндекс.Дзен составили его так, что 20% отдаётся теории и 80% — практике на реальных данных. К концу обучения у вас будет готово своё портфолио в виде Git-репозитория с решёнными кейсами, которые можно будет продемонстрировать работодателю.\nЕщё один путь в Data Science — это дата-инженер. \nКурс по Data Engineering\n в Skillfactory преподаёт ведущий дата-инженер «АльфаСтрахования»‎, и вы на практике освоите основные методы и инструменты по работе с Big Data. Выпускники курса уже работают в компаниях OZON.ru, Альфа-Банк, Bayer, ВТБ, Мегафон, Henkel. Длится курс всего 10 недель, и сейчас его можно купить со скидкой 20%.\nГотовьтесь к хакатонам, друзья. И помните, что главное — это не бояться совершать ошибки, ведь это часть уникального опыта, и нередко из этих самых ошибок неожиданно рождаются гениальные идеи. Удачных вам хакатонов!\nData Science\n, \nКарьера\n, \nПартнёрский материал\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder_050_award_cup_winner_2998005-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/building-a-rpg-in-a-year-of-free-time-and-6000/",
                "title": "История инди-разработчика: как на год лишиться свободного времени и 6000 $, чтобы разработать 2D RPG",
                "created_date": "10 ноября 2019 в 11:27",
                "body": "Перевод статьи \n«Building a RPG on a years+ worth of free time and $6,000»\nВ сентябре 2018 я начал работу над небольшой повествовательной RPG. Суть проста: берём сеттинг SCP Foundation, игровую механику из Final Fantasy Tactics и D&D 5 издания и делаем олдскульную пошаговую RPG (с классами!). Моя цель была довольно амбициозной: передать ощущение старых RPG вроде Baldur’s Gate и Planescape: Torment. Я работал один, поэтому не мог добавить много фич и контента, но я всё равно хотел, чтобы было чувство приключений, открытий и интересных персонажей. Это была не просто ностальгия, это была необходимость заполнить пустоту в индустрии. Поэтому я начал работу над RPG с небольшим бюджетом и боевой системой, написанной с нуля. Бюджет состоял из того, что я мог выделить из своих средств (плюс то, что я смог позже получить на Kickstarter).\nИнструменты\nМои инструменты были недорогими.\nПрограммное обеспечение\nSublime Text — для кодинга. Может, это и не лучшее средство для работы с JavaScript, но мне его возможностей было достаточно;\nAseprite — создание и редактирование пиксель-арта;\nGimp — дешёвая альтернатива Adobe Cloud для редактирования изображений, да и научиться работать с ним проще;\nRPGMaker MV — для создания основы игры. Довольно ограниченный конструктор игр, но отлично подойдёт, если вы создаёте олдскульные 2D RPG;\nOBS — прекрасная программа для записи видео;\nMovavi — возможно, не самый популярный видеоредактор, но мне нравится. К тому же он относительно доступный.\nЖелезо\nDell Inspiron 15 — ужасный ноутбук для создания игры, но что было, тем и пользовался;\nMacBook Pro — в некоторых аспектах апгрейд Dell, необходимый для портирования игры под Mac OS, а также тестирования и прочего.\nПомощь\nМножество нанятых художников, которые очень помогли мне с промо-артами, ассетами, тайлами и т. д.;\nпрофессиональные музыканты, которые помогли мне подобрать сочетание музыки и сочинить тему игры;\nпрограммисты, которые помогли мне с кодом и попытками превратить RPGMaker в нечто, для чего он изначально не был предназначен;\nобширное и замечательное сообщество, посвящённое созданию игр, особенно по RPGMaker и созданию отличных плагинов;\nмои D&D группы, которые подкинули идеи по созданию одновременно весёлой и справедливой пошаговой боевой системы, которая .\nПрепятствия\nРасширение границ проекта\nУ многих геймдевов есть привычка расширять игру, так как всем в процессе разработки приходят в голову идеи, которые могут её улучшить, и мы неизбежно пытаемся включить некоторые из них. Возможно, это что-то, что вы увидели в другой игре, или что-то, что вам подсказали в Discord. С течением времени новых фич появляется всё больше, и одна из самых трудных вещей — решить, каким из них не место в игре, особенно если они уже реализованы и реализованы хорошо.\nФинансы\nЕсли сказать кому-то, что ты создаёшь игру с бюджетом в 6000$, то, возможно, тебе посмеются в лицо. Неизбежно найдутся те, кто будут говорить тебе, что это невозможно, перечисляя зарплаты программиста-джуна на Среднем Западе, художников, писателей, актёров озвучки и т. д. Однако для любителей и соло-разработчиков малобюджетные игры всегда были чем-то самим собой разумеющимся. У игроков не должно быть романтизированного представления о разработчиках игр как о создателях игрушек, возящихся у себя в мастерской. Однако если это определение к кому и применимо, то именно к инди-разработчикам. Игровая индустрия — огромный источник заработка, подпитываемый мошенническими методами монетизации, однако любители — это просто люди, работающие у себя в спальне или гараже, которые создают игры просто потому, что они хотят. Многие из нас пытаются быть на стороне потребителя: никаких DLC и микротранзакций. Заплати за игру, и она твоя навеки. Неудивительно, что это не очень помогает хорошо зарабатывать. Низкий бюджет установил жёсткие рамки на то, насколько отполированной будет моя игра, пусть я и успешно собрал на Kickstarter 250 % от начальной цели (хотя я просил какие-то жалкие 800$ для завершения некоторых ассетов).\nБаланс между работой и личной жизнью\nКак и многие любители, я работаю на полную ставку, чтобы оплачивать счета. Тратить дополнительные 30 часов в неделю на разработку игры — тяжело, но я всё равно делал это, потому что мне нравилось. Даже сейчас мне всё ещё нравится работать над играми. Но не моему телу и психическому состоянию. Через несколько месяцев работы над проектом в глубине души я начал чувствовать постоянно нарастающую усталость. У этого могли быть два возможных последствия, с которыми я уже сталкивался. Либо я терпел крах и прекращал работу, либо через силу заставлял себя всё делать и в итоге разочаровывался в разработке игр. По этим причинам многие талантливые создатели игр уходят из бизнеса (ну, ещё из-за низкой зарплаты и бестолкового высшего руководства). Я решил ненадолго остановиться, убедился, что у меня достаточно времени, чтобы расслабиться, и более эффективно распланировал предстоящие этапы разработки.\nГеймплей\nПожалуй, я первым признаюсь, что я — не опытный геймдизайнер. Моей сильной стороной всегда было писательство. Это то, чему я учился в колледже, что я делаю на работе, и, самое главное, что мне нравится. Частично причина, по которой я тяготел к разработке игр, заключалась в отсутствии хороших сюжетов за пределами симуляторов ходьбы\nи экспериментальных игр. Но геймплей? Мне пришлось многому научиться, и я всё ещё учусь. Я провёл большую часть своей жизни, играя в разные RPG, поэтому у меня есть хорошее представление о том, какие системы мне нравятся, а какие нет. Я хотел создать игру, которая будет не только про гринд, но и потребует хороших навыков в тактике ведения боя и умения создавать билды для персонажа. Я вернулся к D&D и вспомнил, как я изучал различные билды, вспомнил обо всех этих маленьких квадратиках, где неверное решение могло за один ход стоить вам или кому-то ещё жизни. Я хотел взять лучшее из D&D и поместить в свою игру, может даже немного усовершенствовать. Я и представить не мог, насколько это будет непросто.\nНарратив\nЯ думал, что нарратив будет самой простой частью, но теперь я понимаю, что так никогда не бывает. Я писатель по образованию и профессии, и я довольно легко нахожу, что написать (но это не всегда легко вычитывать). Я думал, что 10-часовая игра не должна быть такой уж большой проблемой. Предпосылка для сюжета уже есть, лор на месте, почти всё готово. Ну, всё, за исключением персонажей, которые являются самой важной частью партийной повествовательной RPG. Почему игрока должны волновать эти люди? Да и вообще, кто они? Создать лор и сеттинг просто. Но не персонажей. Всё потому, что какой бы сумасшедший фантастический мир вы ни придумывали, персонажи должны быть узнаваемы и действовать согласно своей внутренней логике. Это значит, что написание хороших персонажей требует достаточно времени и внимания.\nЭтап первый: планирование, сбор идей, первые шаги\nНа первом этапе мне нужно было решить, какие инструменты я буду использовать. Я хотел создать солидную 2D RPG с видом сверху, в которую здорово играть, в которой есть хорошая боёвка и от внешнего вида которой не вытекают глаза. Я чувствовал, что мне не хватит опыта и бюджета для работы с Unity или Unreal (если не считать работой низкокачественную сборку игры из готовых ассетов), поэтому я остановился на RPGMaker, с которым мне уже доводилось работать. RPGMaker — замечательный инструмент , однако он успел снискать славу конструктора низкокачественных игр похуже, чем Unity. Отчасти это связано с исключительной простотой его использования. Практически любой желающий может с его помощью почти сразу создать игру (возможно, после просмотра пары видео). Однако возможности RPGMaker очень ограничены: он рассчитан на одну и только одну вещь — создание RPG в стиле Final Fantasy. Чтобы заставить его сделать что-то сверх этого, нужна куча плагинов, возни и непосредственной работы с кодом. В итоге из исходной программы я получил сильно модифицированного Франкенштейна с торчащими тут и там байтами.\nВ течение этого времени я собирал идеи о возможностях, которые можно добавить в игру. Reddit очень с этим помог, особенно сабреддиты вроде r/rpg_gamers и r/strategyrpgs. Сейчас мы переживаем нечто вроде возрождения CRPG/SRPG, так как многие небольшие инди-разработчики (хотя большинство всё ещё намного больше меня) привносят новые идеи и IP. Как я собираюсь выделить свою игру (у которой нет ничего особенного в плане графики) среди всех остальных? Ну, если у тебя нет стиля или ты его не можешь себе позволить, то нужно делать ставку на содержание. Это означает две вещи: геймплей и сюжет, две самые важные вещи для RPG.\nИменно в это время я пересмотрел сеттинг игры в духе SCP. Если вы не в курсе, что такое SCP Foundation, то это чудесная кроличья нора с жуткими научными каталогами уникальных и аномальных (выдуманных, надеюсь) вещей. Статуи, которые сломают вам шею, когда вы моргнёте, и маяки из другого измерения. В общем и целом, это очень сюрреалистичная, беспокойная вселенная в духе Лавкрафта. Хотел ли я этого для своего проекта? Да, но, возможно, несколько иначе. В Лавкрафтовском хорроре герои в конечном счёте погибают от лап безразличной (но всё ещё враждебной) вселенной. Но это вообще не про мою историю. Моя история была о триумфе обычных людей перед лицом невероятной силы. Это история о неповиновении всезнающему ИИ и невероятно древним первобытным существам.\nЭтап второй: время (хорошей) тяжёлой работы\nНе знаю, что сказать о процессе разработки, кроме того, что он невероятно утомительный, захватывающий, раздражающий и приносящий удовольствие в одинаковой степени. Когда всё идёт как надо, это одновременно и работа, и удовольствие.\nMiddle Unity3D Developer\nPlarium, Краснодар\ntproger.ru\nВакансии на tproger.ru\nМой обычный день выглядел так: я работал 8 часов на основной работе с мыслями о своей игре, бежал домой, хватал первое, что видел в холодильнике, и садился ещё на 3–4 часа работы. Иногда приходилось вкалывать, чтобы убедиться, что триггеры работают как надо, или проверить анимацию, или играть одну и ту же битву снова и снова, чтобы выловить все баги. Порой это было самым весёлым занятием из всех, которыми могут заниматься люди, сидящие в полумраке в нижнем белье. Я редактировал арты, писал и создавал вещи, которые никогда не должны были существовать, и это было здорово.\nЭтап третий: закрытая бета, фидбек, маректинг\nНаступила пора закрытого бета-теста, и я раздал ключи всем бэкерам с Kickstarter, которые попросили об этом, а также ещё 100 штук по принципу «кто первый встал, того и тапки». Я ориентировался прежде всего на любителей RPG, фанатов SCP и игроков в SRPG. Среди них даже затесалось несколько \nгрогнардов\n старой гвардии (ласковое(?) прозвище игроков олдскульных RPG). Этап беты вызывал у меня тревогу, но обратная связь сразила меня наповал. Многим людям реально понравилось направление, в котором шла игра, а лучше всего, что некоторые из них даже оставили полезные, конструктивные отзывы и порекомендовали дальнейшее направление для игры. Вот вам правда о разработчиках игр, по крайней мере, если речь идёт о не слишком самоуверенных экземплярах: мы никогда не откажемся от полезного фидбека, и пускай на его реализацию может не быть времени, ему всегда рады.\nКроме того, для разработчиков-одиночек позитивный отзыв почти так же ценен, как продажа игры. Мы хотим, чтобы игроки проверили наши идеи, хотим убедиться, что они заслуживают одобрения. И хотя мы довольно толстокожие (а иногда приходится такими быть), простой комментарий вроде «это реально весело» пойдёт на пользу.\nЧто не пойдёт на пользу, так это бюджет в 0$, когда доходит до маркетинга. Так как Facebook с его pay-to-play моделью и органический охват (как в целом в Интернете, так и в Steam) были довольно дохлым номером, мне оставалось немногое. Я работаю в сфере маркетинга уже около десяти лет и могу сказать, что без денег маркетинг невозможен. Но есть ещё кое-какие способы распространить информацию об игре. Поговорить с несколькими мелкими ютьюберами, блогерами, стримерами. Написать длинный пост на Reddit. Притвориться относительно приятным и порядочным человеком (на самом деле это довольно хорошо работает). Всё ради того, чтобы на страницу в Steam зашло ещё несколько человек.\nВ итоге я потратил около 4000$ на арт, графику, музыку и звуки; 1500$+ ушло на железо и софт и ещё больше 1000$ на бизнес-затраты и прочее. Мой бюджет был очень ограничен, поэтому я делал всё сам везде, где мог.\nНа каком этапе я сейчас?\nЯ выложил свою игру в ранний доступ в Steam. Сразу признаюсь: ранний доступ — это всего лишь другое название для открытой беты, в стадии которой моя игра и находится. Однако в отличие от других игр, я не собираюсь годами находиться в раннем доступе. До полного релиза я планирую подождать всего месяц-два.\nНе смешно? А здесь смешно: \n@ithumor\nРазработка игр\nТакже рекомендуем:\nКонечный автомат: теория и реализация\nКак научиться разрабатывать игры: подробная блок-схема\nЯзыки программирования, на которых были написаны популярные компьютерные игры — пять вдохновляющих примеров\nПишем свою первую игру. Прохождение для разработчиков",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/elf_rpg_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-to-survive-at-hackathon/",
                "title": "Как выжить во время хакатона: подробное руководство",
                "created_date": "8 ноября 2019 в 16:51",
                "body": "Дарья Любицкая, Skillfactory\nХакатон — это когда участники берут с собой всё необходимое, предупредив близких, что выпадут из привычной жизни на 24 часа, а то и на неделю, и закрываются в одном помещении. На протяжении всего этого времени они нон-стопом генерируют идеи, которые в результате могут перерасти в крутые стартапы.\nВне зависимости от типа, хакатон — это не просто соревнование, это драйв, кураж и желание создать что-то стоящее за ограниченный отрезок времени. Для этого у участников, кажется, есть всё, что нужно: команда заряженных единомышленников, время на подготовку, куча идей в запасе, прокачанные менторы и эксперты, сумасшедшие призы и особенная атмосфера креатива и открытости, которая вдохновляет всех вокруг и заставляет с бешеной скоростью двигаться к цели. Режим работы «Апокалипсис» с графиком «24/7» превращает обычного участника хакатона в сверхчеловека. А ещё приводит к созданию новых крутых прототипов, помогает добиться того, на что обычно уходят недели, а то и месяцы. Не зря эти необычные ивенты превратились в безотказно работающий HR-инструмент, который постепенно открывают для себя HR-эксперты самых разных компаний.\nРежим «Апокалипсис»\nКрутость хакатона в его драйве, но само состязание длится нон-стопом несколько часов или дней. И это вообще не про зону комфорта. Как сохранить свой запал всё это время и не отключиться от дикой усталости или перегруза?\nОбщие правила выживания:\nприйти выспавшимся и отдохнувшим;\nнакануне ивента исключить алкоголь и пить больше воды;\nсколотить команду, обсудить идею, распределить роли, взять с собой всё, что может понадобиться, — одним словом, хорошенько подготовиться заранее;\nзапастись кофе, энергетиками или водой — каждому своё, и, конечно, в меру;\nделать перерывы: например, выбрать момент и пройтись одному или со всей командой, сделать лёгкую разминку или сыграть в кикер, пообщаться с экспертами и участниками, в общем перевести дух и отвлечься;\nконтролировать запас энергии: спать во время хакатона можно и нужно, но это очень индивидуально: кому-то достаточно пары часов, а кто-то бодрится, вздремнув всего 20 минут, но вот что точно вряд ли с вами случится, так это полноценный сон в любимой постели под тёплым одеялом;\nсохранять позитивный настрой.\nКто спал на моей кровати\nВо многих продвинутых ИТ-компаниях есть свои лаундж-зоны, где сотрудники могут отдохнуть и даже поспать. Во время внутреннего хакатона эти места будут считаться поистине королевскими, ведь там можно с комфортом отключиться и перезагрузить мозг. Но что если ваш хакатон проходит не в компании, а в арендованном офисе, незнакомом пространстве или вообще в чужом городе? Где раздобыть подушку и как вообще устроиться поспать?\nПервое, что нужно запомнить: берите с собой спальник! Во всём этом шуме и постоянной возне вы вряд ли сможете найти себе идеальное место, а устроиться в уголке да в собственном тёплом спальном мешке — легко. В комплекте с импровизированной кроватью в ход могут пойти… коробки. Да-да, они будут отличной заменой берушам, если вдруг вы о них забыли, просто наденьте небольшую пустую чистую коробку на голову, или, что более очевидно, смятые коробки могут стать неплохим матрасом и основанием для подушки. Мерч, много мерча — на подобных ивентах обычно куча всяких футболок и толстовок — сделайте из них мягкую подушку или лёгкое одеяло и устраивайтесь поудобнее.\nНу и самое главное — отправляйтесь спать только тогда, когда вы уже готовы выключиться. Поверьте, шум и суета не дадут вам досчитать до ста и заснуть, вы будете нервничать и ворочаться и в итоге потеряете кучу времени и сил. Другой вопрос: спать ли вообще? Знаете это чувство, когда ты то ли спал, то ли нет? Лучше бы и не ложился: тело не слушается, мозг как в тумане. Одним словом, только вам решать спать или не спать на хакатоне, здесь всего один секрет — прислушиваться к своему организму.\nНе ошибается тот, кто ничего не делает\nВсе делают ошибки, тем более в таком ритме, как режим «Апокалипсис». Что делать, если вы начали работать над продуктом и быстро поняли, что ничего не выходит? Не бойтесь начать заново или сделать по-другому. Нет ничего хуже, чем тестить бесполезный продукт несколько часов подряд на 24-часовом ивенте.\nНетворкинг как глоток свежего воздуха\nИтак, хакатон уже вовсю гудит, команды что-то кодят, тестят, проверяют, а вы после долгой работы начали отвлекаться. Это значит, что пора перевести фокус внимания на что-нибудь другое. Старайтесь переключаться время от времени: прогуляйтесь по залу, пообщайтесь с другими участниками, послушайте их истории, поучаствуйте в обсуждении. Вообще используйте это время для установления новых контактов, кто знает, возможно, вот этот участник соседней команды — это ваш будущий партнёр, коллега или друг. А после небольшой разгрузки мозгов вы с ещё большим энтузиазмом возьмётесь за дело, а может, вам в голову придёт какая-нибудь полезная или совершенно новая мысль, которая решит проблему или улучшит работу продукта.\nВода и еда\nПейте много воды, учёные говорят, что для полноценной работы организма человеку необходимо 1,5–2 л воды в день. Вода доставляет в клетки организма питательные вещества и кислород, которые так необходимы напряжённо трудящемуся мозгу. Не пейте воду во время еды, это не придаст сил, а, наоборот, затруднит переваривание пищи, так как вода разжижает слюну и желудочный сок. Лучше выпейте стакан чистой воды за 20 мин до приёма пищи, это поможет активизировать нервную систему и взбодрить организм. Кстати, стакан чистой воды — ещё и отличный помощник в борьбе со стрессом. Что касается еды, то это индивидуально, здесь, как и со сном, один секрет: ешьте, когда захочется. Главное не забудьте поесть совсем, увлекшись процессом работы.\nНе забудьте насладиться ивентом\nХакатон — это массовое состязание, но вы проявляете здесь личные навыки и качества. Воспользуйтесь моментом и успейте почувствовать кайф от проделанной работы и общей атмосферы, от всего этого уникального опыта. Ведь именно об этом вы потом будете рассказывать своим друзьям и близким, вспоминая странности, шутки и открытия того сумасшедшего дня.\nЧто потом\nПосле хакатона участники, возможно, всё ещё на драйве и подъёме идут отдыхать по домам. Но вот вы за рулём машины или стоите в метро и думаете, как бы добраться до дома прежде, чем уснёте. Жёсткий недосып, напряжённая работа мозга дали о себе знать, организм требует перерыва Главный риск здесь — уснуть в душе, прихожей, автобусе, за столом, на остановке. Одним словом, будьте на чеку! А мы желаем вам добраться до самого любимого спального места и уснуть в нём заслуженным крепким сном!\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/iconfinder-icon-16-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/image1-e1570626836239-150x150.jpeg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/http-request-smuggling/",
                "title": "Атака HTTP request smuggling: механизм, разновидности и защита",
                "created_date": "8 ноября 2019 в 10:28",
                "body": "Перевод статьи \n«HTTP request smuggling»\nHTTP request smuggling — это атака, при которой злоумышленник вмешивается в обработку последовательности HTTP-запросов, которую веб-приложение получает от одного или нескольких пользователей. Уязвимости, связанные с HTTP request smuggling, часто имеют критический характер, позволяя злоумышленнику обойти меры безопасности, получить несанкционированный доступ к конфиденциальным данным и напрямую скомпрометировать информацию других пользователей приложения.\nПримечание\n HTTP request smuggling впервые была задокументирована в 2005 году, недавно эта тема была снова поднята в \nисследовании PortSwigger\n.\nЧто происходит во время атаки HTTP request smuggling?\nСовременные веб-приложения часто используют цепочки HTTP-серверов между пользователями и конечной логикой приложения. Пользователи отправляют запросы на фронтенд сервер (иногда называемый балансировщиком нагрузки или обратным прокси-сервером), и этот сервер направляет запросы на один или несколько бэкенд серверов. В современных облачных приложениях этот тип архитектуры становится всё более распространённым, а в некоторых случаях его и вовсе нельзя избежать.\nКогда фронтенд сервер пересылает HTTP-запросы на бэкенд сервер, он обычно отправляет несколько запросов по одному и тому же внутреннему сетевому соединению, поскольку это более эффективно. Протокол очень прост: HTTP-запросы отправляются один за другим, а принимающий сервер анализирует заголовки HTTP-запросов, чтобы определить, где заканчивается один запрос и начинается следующий:\nВ этой ситуации крайне важно, чтобы фронтенд и бэкенд системы одинаково понимали начало и конец запроса. В противном случае злоумышленник может отправить запрос, который по-разному интерпретируется фронтенд и бэкенд системами:\nЗдесь злоумышленник составляет свой запрос фронтенд серверу таким образом, что часть запроса интерпретируется как начало следующего запроса. Эта часть добавляется к следующему запросу и влияет на его обработку.\nКак возникает уязвимость HTTP request smuggling?\nБольшинство уязвимостей, связанных с HTTP request smuggling, возникает из-за того, что спецификация HTTP предоставляет два разных способа указать, где заканчивается запрос: заголовок \nContent-Length\n и заголовок \nTransfer-Encoding\n.\nЗаголовок \nContent-Length\n прост: он определяет длину тела сообщения в байтах. Например:\nPOST /search HTTP/1.1\r\nHost: normal-website.com\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 11\r\n\r\nq=smuggling\nЗаголовок \nTransfer-Encoding\n может использоваться для указания того, что тело сообщения разбито на блоки. Каждый блок состоит из размера фрагмента в байтах (выраженного в шестнадцатеричном формате), за которым следует новая строка, за которой следует содержимое фрагмента. Сообщение заканчивается блоком, содержащим ноль. Например:\nPOST /search HTTP/1.1\r\nHost: normal-website.com\r\nContent-Type: application/x-www-form-urlencoded\r\nTransfer-Encoding: chunked\r\n\r\nb\r\nq=smuggling\r\n0\nПоскольку спецификация HTTP предоставляет два разных метода для указания длины сообщений HTTP, одно сообщение может использовать оба метода одновременно так, что они конфликтуют друг с другом. Спецификация HTTP пытается предотвратить эту проблему, заявляя, что если присутствует и заголовок \nContent-Length\n, и \nTransfer-Encoding\n, то заголовок \nContent-Length\n следует игнорировать. Этого может быть достаточно, чтобы избежать двусмысленности, когда в игре находится только один сервер, но не когда два или более сервера объединены в цепочку. В этой ситуации проблемы могут возникнуть по двум причинам:\nНекоторые серверы не поддерживают заголовок \nTransfer-Encoding\n в запросах.\nНекоторые серверы, которые поддерживают заголовок \nTransfer-Encoding\n, могут не обрабатывать его, если заголовок каким-то образом \nобфусцирован\n.\nЕсли фронтенд и бэкенд серверы ведут себя по-разному в отношении (возможно, обфусцированного) заголовка \nTransfer-Encoding\n, то они могут по-разному интерпретировать начало и конец сообщений, что приводит к уязвимостям HTTP request smuggling.\nКак выполнить атаку HTTP request smuggling?\nАтаки HTTP request smuggling включают в себя размещение заголовков \nContent-Length\n и \nTransfer-Encoding\n в одном HTTP-запросе и манипулирование ими, чтобы фронтенд и бэкенд серверы обрабатывали запрос по-разному. Способ, которым это будет сделано, зависит от поведения двух серверов:\nCL.TE: фронтенд сервер использует заголовок Content-Length, а бэкенд сервер — Transfer-Encoding.\nTE.CL: фронтенд сервер использует заголовок Transfer-Encoding, а бэкенд сервер — Content-Length.\nTE.TE: фронтенд и бэкенд серверы поддерживают заголовок Transfer-Encoding, но один из серверов может быть вынужден не обрабатывать его, если тот был обфусцирован.\nУязвимости CL.TE\nЗдесь фронтенд сервер использует заголовок \nContent-Length\n, а бэкенд — \nTransfer-Encoding\n. В этом случае можно выполнить простую атаку HTTP request smuggling:\nPOST / HTTP/1.1\r\nHost: vulnerable-website.com\r\nContent-Length: 13\r\nTransfer-Encoding: chunked\r\n\r\n0\r\n\r\nSMUGGLED\nФронтенд сервер обрабатывает заголовок \nContent-Length\n и определяет, что тело запроса имеет длину 13 байтов — до конца \nSMUGGLED\n. Этот запрос перенаправляется на бэкенд сервер.\n\nБэкенд сервер обрабатывает заголовок \nTransfer-Encoding\n и обрабатывает тело сообщения с использованием разбивки на блоки. Он обрабатывает первый блок, который содержит ноль, что указывает на завершение запроса. Следующие байты, \nSMUGGLED\n, остаются необработанными, и бэкенд сервер будет обрабатывать их как начало следующего запроса в последовательности.\nЗдесь\n можно посмотреть лабораторную работу по уязвимости CL.TE (требуется регистрация).\nУязвимости TE.CL\nЗдесь фронтенд сервер использует заголовок \nTransfer-Encoding\n, а бэкенд — \nContent-Length\n. Например, так:\nPOST / HTTP/1.1\r\nHost: vulnerable-website.com\r\nContent-Length: 3\r\nTransfer-Encoding: chunked\r\n\r\n8\r\nSMUGGLED\r\n0\r\n\nПримечание\n Чтобы отправить этот запрос с помощью Burp Repeater, сначала нужно перейти в меню Repeater и убедиться, что опция «Update Content-Length» снята. Нужно включить завершающую последовательность \\r\\n\\r\\n после последнего 0.\nФронтенд сервер обрабатывает заголовок \nTransfer-Encoding\n и тело сообщения с использованием фрагментированного кодирования. Сначала обрабатывается первый блок длиной 8 байт до начала строки, следующей за \nSMUGGLED\n. Затем обрабатывается второй блок с нулевой длиной, что принимается за завершение запроса. Этот запрос перенаправляется на бэкенд сервер.\nБэкенд сервер обрабатывает заголовок \nContent-Length\n и определяет, что тело запроса имеет длину 3 байта, вплоть до начала строки, следующей за 8. Следующие байты, начиная с \nSMUGGLED\n, остаются необработанными, бэкенд сервер будет обрабатывать их как начало следующего запроса в последовательности.\nЗдесь\n можно посмотреть лабораторную работу по уязвимости TE.CL (требуется регистрация).\nПоведение TE.TE: обфускация TE заголовка\nВ этом случае и фронтенд, и бэкенд серверы поддерживают заголовок \nTransfer-Encoding\n, но один из серверов может быть вынужден не обрабатывать его, поскольку он обфусцирован.\n\nЕсть множество способов обфусцировать заголовок \nTransfer-Encoding\n. Например:\nTransfer-Encoding: xchunked\r\n\r\nTransfer-Encoding : chunked\r\n\r\nTransfer-Encoding: chunked\r\nTransfer-Encoding: x\r\n\r\nTransfer-Encoding:[tab]chunked\r\n\r\n[space]Transfer-Encoding: chunked\r\n\r\nX: X[\\n]Transfer-Encoding: chunked\r\n\r\nTransfer-Encoding\r\n: chunked\nКаждый из этих методов — едва уловимое отклонение от спецификации HTTP. Реальный код, который реализует спецификацию протокола, редко придерживается его с абсолютной точностью, и для разных реализаций характерно допускать различные отклонения от спецификации. Чтобы выявить уязвимость TE.TE, необходимо найти какой-либо вариант заголовка \nTransfer-Encoding\n, который обработает только один из серверов (фронтенд или бэкенд), а другой проигнорирует.\nВ зависимости от того, будет ли это фронтенд или бэкенд сервер, оставшаяся часть атаки примет ту же форму, что была описана для уязвимостей CL.TE или TE.CL.\nЗдесь\n можно посмотреть лабораторную работу по уязвимости TE.TE (требуется регистрация).\nКак предотвратить атаку HTTP request smuggling?\nУязвимости в HTTP request smuggling возникают в тех случаях, когда фронтенд сервер пересылает несколько запросов на бэкенд сервер по одному и тому же сетевому соединению, а протокол, используемый для внутренних подключений, несёт в себе риск того, что политика серверов по обработке длины запросов не согласована. Ниже перечислены несколько общих правил предотвращения возникновения уязвимостей в HTTP request smuggling:\nИспользуйте для каждого запроса своё подключение между бэкенд и фронтендом.\nИспользуйте HTTP/2 для бэкенд подключений, так как этот протокол предотвращает неоднозначность в интерпретации длины сообщений.\nИспользуйте одно и то же программное обеспечение веб-сервера для фронтенд и бэкенд серверов.\nВ некоторых случаях уязвимостей можно избежать, если заставить фронтенд сервер нормализовать неоднозначные запросы или заставить бэкенд сервер отклонять неоднозначные запросы и закрывать сетевое соединение. Однако эти подходы потенциально больше подвержены ошибкам, чем общие правила, указанные выше.\nНе смешно? А здесь смешно: \n@ithumor\nБезопасность\n, \nВеб-разработка\nТакже рекомендуем:\nКак работает CSS Flexbox: наглядное введение в систему компоновки элементов на веб-странице\nПростыми словами о «фронтенде» и «бэкенде»: что это такое и как они взаимодействуют\nБесплатные материалы для программистов\nLocalStorage на пальцах\nОдин из наших читателей прислал статью с рассказом о HTML5 LocalStorage в браузерах. Передаём ему слово. ",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/http_security_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1917px\" viewBox=\"0 0 1917 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/http-request-smuggling.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1917px\" viewBox=\"0 0 1917 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/forwarding-http-requests-to-back-end-server.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1917px\" viewBox=\"0 0 1917 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/smuggling-http-request-to-back-end-server.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/highload-2019-live/",
                "title": "Трансляция HighLoad++ 2019",
                "created_date": "6 ноября 2019 в 17:02",
                "body": "7 и 8 ноября в Сколково прошла 13-я ежегодная конференция для разработчиков высоконагруженных систем \nHighLoad++ 2019\n. Мероприятие направлено на обмен знаниями о технологиях, позволяющих одновременно обслуживать многие тысячи и миллионы пользователей.\nПрограмма охватила такие аспекты веб-разработки, как архитектура и эксплуатация крупных проектов, базы данных и системы хранения, системное администрирование, нагрузочное тестирование, эксплуатация крупных проектов.\nНиже можно посмотреть записи выступлений из главного зала.\nПервый день:\n9:20. Открытие\n10:00. Почему вам нужна платформа межсервисного взаимодействия и как её построить уже сегодня? / \nАртемий Рябинков (Авито)\n11:00. Кафка. «Описание одной борьбы» / \nДенис Карасик (Badoo)\n12:00. Паттерны проектирования приложений на Apache Kafka / \nАлександр Сибиряков (Scrapinghub)\n13:00. Мониторинг современного k8s-проекта глазами разработчика / \nСергей Спорышев (ITSumma)\n14:00. Хьюстон, у нас проблема. Дизайн систем на отказ, паттерны разработки внутренних сервисов облака Amazon / \nВасилий Пантюхин (Amazon Web Services)\n15:00. Дорогой DELETE. Типичные ошибки при выполнении массовых операций в высоконагруженных БД PostgreSQL / \nНиколай Самохвалов (Postgres.ai)\n16:00. Анализ запросов в MySQL, PostgreSQL, MongoDB / \nПётр Зайцев (Percona)\n17:00. Успехи и провалы с Redis / \nИван Летенко (Infobip)\n18:30. Премия HighLoad++ 2019.\nВторой день:\n11:00. Архитектура Мессенджера Авито – путь одного сообщения / \nАлександр Емелин (Авито)\n12:00. Персонализация за 10 миллисекунд, или Как tinkoff.ru подстраивается под вас / \nВладимир Посвянский (Tinkoff.ru), Иван Вовк (Tinkoff.ru)\n13:00. Как менять инфраструктуру при взрывном темпе роста компании / \nНикита Маслянников (ЦИАН)\n14:00 Пересядь с иглы TCP на UDP с миллионами пользователей / \nАлександр Тоболь (Одноклассники)\n15:00. Отъявленные баги и как их избежать на примере ClickHouse / \nАлексей Миловидов (Яндекс)\n16:00. Кластер Elasticsearch на 200 Тб+ / \nПетр Зайцев (Одноклассники)\n17:00. Что может квантовый компьютер? / \nАнатолий Дымарский (Сколтех)\nC++\n, \nGo\n, \nАнализ данных\n, \nБазы данных\n, \nВеб-разработка\n, \nМашинное обучение\n, \nОптимизация\n, \nПартнёрский материал\n, \nПроизводительность\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/hl_1540x540-880x308.jpg",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/lets-kill-animated-gifs/",
                "title": "Открытое письмо разработчикам «ВКонтакте»: давайте вместе убьём анимированные гифки",
                "created_date": "5 ноября 2019 в 18:21",
                "body": "Алексей, генеральный директор Tproger\nФормат GIF был создан в 1987 году и безнадёжно устарел:\nподдерживается только индексированная палитра в 256 цветов;\nневозможно стримить анимацию, нужно загрузить весь файл, чтобы его воспроизвести;\nнеэффективное сжатие (практически нулевое для полноцветных изображений).\nЕсть только одно логичное применение GIF для анимации: если у вас долгие статические кадры и в каждом используется одноцветная заливка больших областей. Например \nмигающая надпись\n. Но люди используют GIF не для этого — они просто кидаются короткими «видео», которые автоматически воспроизводятся, не прерывают музыку в наушниках и зацикливаются.\nПочти все современные веб- и мобильные клиенты, в том числе «ВКонтакте», понимают это и автоматически конвертируют GIF в видео. Так файл будет меньше весить, тратить меньше трафика и воспроизводиться практически мгновенно.\nТак давайте вместе поможем прогрессу и сделаем короткие видео внутри «ВКонтакте» такими же удобными! Предлагаю добавить специальный флаг при загрузке видео, который сделает следующее:\nвидео будет проигрываться без звука и без прерывания музыки в плеере;\nна таких видео заранее будет пометка, чтобы пользователи не подключали наушники и понимали, что звука не будет;\nвидео будет автоматически воспроизводиться и зацикливаться;\nвидео будет ограничено по максимальной продолжительности.\nБольше не нужно будет конвертировать видео в GIF, чтобы потом опять получить из него видео, но со значительными потерями качества.\nНе смешно? А здесь смешно: \n@ithumor\nВКонтакте\nТакже рекомендуем:\nБот ВКонтакте: руководство и полезные инструменты разработки\nКак сделать авторизацию с помощью ВКонтакте в десктопном приложении\nVK Cup 2018: разбор задач первого квалификационного тура",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/gif-icon-2-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2015/03/NyjQoyroZP8-e1465409559781-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/how-to-become-a-wanted-programmer/",
                "title": "Как стать программистом, которого хотят нанять — отвечают эксперты",
                "created_date": "4 ноября 2019 в 12:07",
                "body": "Рынок всё больше наполняется программистами. В условиях такой конкуренции хотелось бы как-то выделиться среди остальных, желательно так, чтобы HR-ы сами тебя искали. О том, как этого добиться, мы спросили у экспертов.\nПавел Новиков\n, \nSystem Architect в Replace Group\nПрим. ред.\n Это комментарий нашего читателя ВКонтакте. Он решил поспорить с выводами к этой статье, получилось аргументированно, предлагаем прочитать.\nПо фактам:\n«Любите то, что делаете. Энтузиазм позволит вам развиваться за пределами работы и получать больше навыков».\nBullshit. Компании ваш энтузиазм не нужен. Энтузиазм — это повод возложить на вас ещё больше работы за ту же зарплату, а также путь к тому, чтобы делать вещи, о которых вас не просят (и потом сильно удивляться, почему вас не понимают). Любить и относиться с энтузиазмом к IT в целом — хорошо и правильно, однако это не должно распространяться на работодателя. Если вашему работодателю так хочется видеть в рядах сотрудников инициативных и активных — лучше изобразить это, чем по факту таковым становиться (в конце я объясню почему).\n«Следите за актуальными технологиями в вашей сфере».\nНо отсеивайте bullshit, а то через 10 лет окажется, что вы знаете с десяток технологий, которые когда-то были пару месяцев на слуху и ими пользуются 3,5 анонимуса в 2,5 проектах. Чаще задавайте себе вопрос, почему та или иная технология сыровата, спрашивайте себя, какие проблемы она решает, а какие создаёт, и если технология создаёт больше проблем, чем решает — не тратьте своё время на неё, сколько бы денег в моменте за её знание ни предлагали. Да, я не отрицаю, что круто изучить блокчейн и биткоины и затесаться разработчиком в криптостартап, но держите в голове, что после того, как вы получите свой кэш, а стартап закроется из-за падения курса, — вы окажетесь вновь у необходимости искать работу и переквалифицироваться.\n«Не останавливайтесь на каком-то одном направлении/языке/технологии/etc. Расширяйте свои знания как вглубь, так и вширь».\nBullshit. Твёрдое знание основ — прежде всего. Покуда мир поголовно не переехал на биологические носители информации и квантовые вычисления (что, при всём уважении, едва ли случится в ближайшие 40 лет) — понимание, как работают индексы и сортировки, будет востребовано. А в остальном лучше знать и уметь одну технологию на уровне «эксперт мирового класса», чем поверхностно знать 50 языков и фреймворков, быть мистером «пальцы-во-всех-пирогах». К тому же, к 30 годам вам порядком надоест расширять круг знаний.\n«Участвуйте в соревнованиях по программированию. Призовые места помогут привлечь к себе рекрутеров».\nBullshit. Работодателям, по правде говоря, мало интересно, где и какие грамоты вы получили, а недавний разбор протокола Telegram на Хабре наглядно показывает, какие продукты получаются у олимпиадников и победителей конкурсов. Тратьте время на соревнования и хакатоны только ради нетворкинга (знакомств с полезными людьми).\n«Развивайте soft skills: учитесь работать в команде, делиться информацией, просто общаться».\nУх… soft skills. На моей памяти чаще всего под soft skills подразумевается навык говорить именно то, что люди хотят услышать, что проходит в опасной близости от «умение войти в доверие к нужным людям». Хотите практиковать такие игры — воля ваша. Но лично я бы порекомендовал поизучать вместо этого практическую психологию. А для начала — сходить к хорошему психотерапевту и вылечить свои психологические болячки (поверьте, скорее всего они у вас есть). Окунувшись в это, вы поймёте, что делать дальше.\n«Не бойтесь ответственности и тяжёлых задач».\n…но только если уверены, что этот праздник жизни будет замечен, оценён и оплачен. В противном случае избегайте ответственности и тяжёлых задач.\n«Научитесь эффективно доносить свои мысли до других. Для практики можете, например, завести блог».\nЧтобы выбросить его на свалку истории через пару месяцев. Блог — это подача, раскрутка, маркетинг. А вы не маркетолог, неа. Лучше всего люди читают статьи развлекательного характера, а технические подробности мало кому интересны — для этого есть StackOverflow. Кстати, зарегистрируйтесь там и попробуйте поотвечать на вопросы. Это действительно хороший опыт.\n«Участвуйте в разных митингах и конференциях. Но не только как слушатель, но и как докладчик. Хорошие доклады, принятые аудиторией, также привлекают внимание рекрутеров».\nBullshit. Внимание рекрутёров привлекает отфильтрованный список людей в LinkedIn, горящие сроки закрытия вакансии и внутренние CRM-ки агентств по найму. Навык public speaking это круто, если метите в менеджмент. В остальном на конференции приходят за нетворкингом. И чем больше телефонов/email’ов полезных и интересных людей вы унесёте с конференции, тем лучше. А в какой роли вы участвуете в мероприятии — докладчик или слушатель — несущественно. Помните, что самое интересное происходит в кулуарах.\n«Регулярно выделяйте время на обучение».\nА лучше — используйте ресурс работодателя, чтобы учиться. Как бы то цинично ни звучало, поверьте, от него не убудет.\n«Поработайте над резюме, особенно если у вас нет опыта работы и резюме толком нечем наполнить».\nЛучше начать с запроса «how to write resume» в YouTube и посмотреть часов 50 видео на эту тему, чтобы действительно понять, как это делать. В написании резюме есть свои сложившиеся традиции, устоявшиеся формулировки, форматы, запрещённые слова и обороты — короче, это тоже своеобразная «специальная олимпиада» (особенно в США). Навык написания резюме и ваши профессиональные качества — это совершенно ортогональные вещи.\n«Научитесь смотреть на задачу с разных точек зрения, чтобы понимать, чего хочет бизнес и пользователь».\nBullshit. Если вы не UX-специалист и не аналитик, то научитесь понимать, чего от вас хочет ваше непосредственное начальство. И его начальство. И начальство его начальства. Выбросите из головы всякие мысли «а сколько будет стоить обслуживание этого?», «а понравится ли такое пользователям?», «а сколько денег эта фича принесёт компании?». Это всё чушь, муть и компот. Чтобы думать о бизнесе — у бизнеса есть учредители. И пока вы не в совете директоров и у вас не акций компании или доли в уставном капитале — ну, вы поняли. Думайте, чего от вас хочет непосредственное начальство. По моему опыту, мало кого увольняют за низкую квалификацию и баги. И уж точно никого не увольняли по причине «сделал не то, чего хотели наши пользователи». А вот за «не вписываешься в команду» и конфликты с руководством — таки сплошь и рядом.\n32\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n32\nПовысить\nПонизить\nДавид Аветиков\n, \nстарший архитектор Bell Integrator\nПервое и самое важное — забудьте про страх ответственности. Если вы хотите быть лучшим, значит, вы берёте на себя все риски и принимаете решения за себя и, если позволяют должностные обязательства, за других людей. Вы не будете расти и двигаться вперёд, если всегда за вас кто-то будет решать, что делать. Забудьте про то, что есть какие-то специально обученные люди, которые должны делать «эту» работу, тем более если они не входят в разряд ваших подчиненных. Если вам что-то нужно для достижения какой-то цели, не следует ждать, пока кто-то что-то сделает. Делайте это сами, ведь в первую очередь это нужно вам. Очень часто мы слышим фразы «это не входит в мои обязанности», «это не моя зона ответственности». Про эти фразы тоже забудьте — чем больше вы берёте на себя, тем быстрее растут ваши знания и навыки.\nРазвивайте свои коммуникативные навыки наравне с техническими. Очень хорошо, когда вы умеете писать красивый, хорошо читаемый и документированный код, придумывать интересные и оптимальные алгоритмы. Но, боюсь, что только это не позволит вам получить признание кого-либо больше, чем ваших ближайших коллег и вашего непосредственного руководителя. Ведь одной из составляющих успеха является ораторское искусство. Многие люди думают так: «Работает и хорошо». Но ваша задача — заставить людей понять ваше решение и восторгаться им, а для этого нужно правильно преподнести его публике.\nПриведу пример из собственной практики. Как-то директор департамента (одного крупнейшего сотового оператора) попросил меня составить недельный отчёт и презентовать ему то, что мы сделали за минувший период. Мы тогда уже успешно внедрили mission critical систему, о которой он и хотел послушать. Писать в отчете рутину, которой мы занимались, на тот момент не имело смысла. Да и в глазах директора это могло показаться слишком малым достижением. Поэтому в отчёте я написал только одну строчку: «Успешно разработана и внедрена интеллектуальная система мониторинга метрик предоставления качества услуг». По сути это была небольшая утилита, которая залезала в базу и снимали статистику по прохождению бизнес-процесса. Но что увидел директор? «Интеллектуальная» — очень модное на тот момент слово, и «Метрики предоставления качества услуг» — то, что на его должности волнует его больше всего. Как следствие, это «достижение» пошло по вертикальной иерархии вверх и принесло нам больше известности, чем внедрение всей системы.\nИ ещё: если вы стоите на пороге выбора, в какой компании начинать работу, то тут особо много думать не следует. Вам имеет смысл рассматривать компании, у которых много проектов, в которых постоянно что-то бурлит и что-то меняется. В противовес этому я бы не стал рекомендовать начинать свою карьеру с крупных корпораций. Там вы завязнете на одном проекте, очень быстро наберёте все знания, которые может дать этот проект, и потом вам придется менять работодателя, чтобы расти дальше. Поэтому лучше начинайте карьеру либо в компаниях, занимающихся стартапами, либо в компаниях-интеграторах. Это позволит вам быть на пике технологического стека.\n33\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\nГеоргий Бабаян\n, \nCEO Elbrus Coding Bootcamp\nСамое главное — учить и начинать. Без этого прогресса не будет. Постоянно задавайте себе этот вопрос: что нового я выучил за день, за неделю, за месяц? Что я хочу начать, но откладываю или боюсь?\nОкружите себя командой более сильных людей. Ищите коллектив, который будет заставлять вас развиваться: со сложными задачами и коллегами, которые уже добились того, к чему вы стремитесь. Работа среди опытных и целеустремленных открывает новые горизонты: так вы узнаете о митапах, на которые раньше не ходили, конференциях, куда раньше не ездили, обязательных к прочтению книгах и новых курсах.\nУделяйте внимание нетворкингу в профессиональной среде: так вы узнаете о вакансиях «для своих» и будете в курсе того, какие навыки сейчас востребованы на рынке. Спрашивайте новых знакомых, в какую сторону они планируют развиваться, что изучают, над какими проектами работают. Делайте выводы.\nРегулярно выделяйте время на обучение. Выделите время на неделе и разбирайте непонятное, проходите курсы. Выучите новый язык программирования, который даст дополнительный инструментарий для задач, которые вам интересны (хороший программист знает 2–3 языка). Пройдите курсы по data science, чтобы из рядового разработчика стать специалистом по работе с данными.\nИзучайте английский: так вы сможете читать новости американского рынка — именно там рождаются тренды, которые затем приходят к нам. С уверенным английским вы сможете смотреть обучающие курсы ведущих университетов мира и без проблем разберётесь с документацией к языку или проекту.\nПрокачивайте soft skills: они важны и при приёме на работу, и для карьерного роста. Все крутые продукты сейчас делают команды, поэтому умение продуктивно общаться с людьми становится необходимым навыком. Без умения работать в команде, адекватно воспринимать критику и доносить свои идеи до коллег вряд ли получится стать частью действительно масштабного проекта.\nВ работе беритесь за те задачи, которые кажутся сложными: именно они приводят к скачку в навыках. \n11\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nСергей Комаров\n, \nдиректор департамента информационных решений компании РДТЕХ\n\nПозволю себе немного уточнить поставленный вопрос. Быть лучшим программистом и быть \nспециалистом\n, за которым будут охотиться работодатели — это всё-таки разные цели. Программист — достаточно узкая специализация, его обязанность — реализовывать требования, описанные в техническом задании, используя один из языков высокого уровня. И \nлучший\n программист — тот, кто справится с этой задачей наиболее быстро и качественно. Как видим, это далеко не предел развития.\nПоэтому, если хотите, чтобы за вами \nохотились\n работодатели — не останавливайтесь на уровне лучшего программиста, а развивайтесь дальше: в специалиста в области информационных технологий, которому под силу как спроектировать полноценную информационную систему, так и реализовать задуманное, возглавив команду.\nНиже мои рекомендации, как стать таким специалистом:\nНачинайте свою карьеру в небольшой компании — там больше возможностей для развития. Как показывает практика, путь от рядового программиста-разработчика до архитектора и технического руководителя в небольших компаниях проходят быстрее.\nНе стойте на месте, расширяйте круг решаемых задач. Не бойтесь ответственности.\nРаботайте в команде, обменивайтесь опытом со своими коллегами.\nНе переставайте учиться. Расширяйте кругозор и совершенствуйте свои навыки. Возьмите за правило хотя бы 1–2 раза в год посещать профильные конференции по интересующим направлениям.\nОбязательно пройдите курс по технике эффективной презентации. Умение доносить свои идеи и мысли до других — один из ценнейших навыков. Заведите свой технологический блог, а также найдите возможность хотя бы время от времени выступать с докладом на конференциях.\n43\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n43\nПовысить\nПонизить\nСергей Ширкин\n, \nдекан факультета Искусственного Интеллекта в онлайн-университете GeekUniversity\nСразу скажу: стать даже «средненьким» программистом без опыта реальной работы невозможно. К тому же, не стоит считать средний уровень чем-то зазорным — не такой уж он и плохой. Даже если вы просто работаете программистом и у вас что-то получается — это само по себе уже хорошо.\nМногие известные личности, которых принято считать гениальными программистами, на самом деле писали программы (возможно, и не самого высшего качества) только в самом начале своей карьеры, а в дальнейшем продолжили свой профессиональный путь в качестве топ-менеджеров созданных ими ИТ-компаний, да и вовсе не качество кода определяло их успех — скорее, умение управлять командой, вовремя поступившие инвестиции и самое обыкновенное везение.\nПопасть в лапы HR-ов крупных корпораций достаточно легко, если иметь опыт от 1–3 лет. Другое дело, что техническое собеседование проводят вовсе не HR-ы. Как бы они ни хотели вас «захантить», решать, нужны вы фирме или нет, будут другие профессионалы — как правило, программисты с опытом.\nЕсли вы в самом начале карьеры, и проблемы именно в том, что вы не можете привлечь HR-ов, то стоит предпринимать такие шаги:\nПроходить курсы программирования. Причем не один, а хотя бы несколько. И не параллельно, а последовательно, чтобы информация хорошо отложилась в голове. Если вы начинающий программист без опыта работы, но у вас есть в резюме сертификаты о прохождении курсов, то HR это обязательно оценит.\nПринимать участие в соревнованиях по программированию. Если получить одно из первых мест в крупном соревновании, то можно привлечь внимание рекрутеров крупных корпораций.\nЛучший программист — это не тот, кто в одиночку делает большие проекты. Это программист, который умеет работать в команде. А это не так-то просто, как кажется: здесь в цене soft skills. Если HR видит, что вы не умеете ладить с людьми, не настроены на позитив и не умеете находить компромисс при командной работе, то он вас скорее всего забракует.\nУлучшать резюме как самостоятельно, так и пользуясь услугами профессионалов — они объяснят тонкости оформления резюме и помогут расставить правильные акценты. Особенно это актуально в том случае, если нет опыта работы и резюме особо нечем заполнить.\nПосещайте конференции, митапы, дни карьеры, хакатоны — не только в качестве зрителя, но и в качестве участника. Обычно на таких мероприятиях присутствуют HR-ы из разных компаний. Либо они вас заметят, либо вы их.\n3\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nАндрей Никольский\n, \nдиректор по эксплуатации финансового супермаркета «Банки.ру»\nЕсли вам хочется, чтобы за вами охотились хедхантеры крупных технологических компаний вроде «Яндекса», Mail.ru или «Авито», то, на мой взгляд, сосредоточиться надо будет не только на навыках программирования.\nДля ясности: если ваше хобби — олимпиады по программированию и вы там занимаете призовые места, то у вас и так есть предложения о работе, дальше можно не читать.\nОчевидно, вы должны писать работающий код, разбираться в основных паттернах проектирования и иметь представление о ключевых алгоритмах, их сложности и применимости. Всё это не так уж сложно, требует прочтения пары актуальных книг по вашему языку и классических трудов Дональда Кнута.\nДальше — самое интересное: вы начинаете делать себе имя.\nПодумайте, в чём ваша сильная сторона.\nВы можете грамотно представить результаты своего труда?\nПретендуете на место лидера и чувствуете, что с вами команда сворачивает горы?\nВаш педагогический талант превращает «джуниора» в «синьора» за полгода?\nВы так любите программирование, что занимаете этим всё свободное время?\nОтветив для себя на эти вопросы, можно начинать думать в нужном направлении.\nПервый пункт даёт вам возможность заявить о себе на тематических конференциях и митапах. Хороший, насыщенный доклад, благосклонно принятый аудиторией, обязательно привлечёт к вам внимание рекрутеров, которые всегда присутствуют на таких мероприятиях.\nПосле какого-то количества успешных выступлений вас могут пригласить в программный комитет. Весомое имя в отрасли, репутация среди лидеров индустрии, и вуаля: лучшие офферы — у вас.\nВторой и третий пункты не требуется громко озвучивать на конференциях. Просто сослуживцы, которые потом переходят в другие места, рассказывают о вас новым коллегам. Так возникает репутация несколько другого плана, которая тоже может обеспечить интересную и ответственную работу.\nА любовь к программированию означает, что рано или поздно вы примкнёте к сообществу Open Source, начнёте изменять популярные и известные продукты и нарабатывать себе репутацию высококлассного специалиста (и высокий рейтинг на GitHub). Большинство крупных технологических компаний поддерживают собственные продукты с открытым исходным кодом и готовы предложить работу людям, которые помогают их развивать.\nНапоследок замечу, что работа в крупнейших мировых компаниях потребует от вас хорошего разговорного английского. Чем раньше вы начнёте вкладывать силы и время в этот навык, тем больше шансов на успех. И мозги развивает!\n28\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n28\nПовысить\nПонизить\nАнатолий Кадочников\n, \nинженер-программист компании ICL Services\nЯ думаю, что основа успеха в любой специальности — это интерес к делу. Поэтому для того, чтобы быть хорошим программистом, в первую очередь надо любить программировать. Это одновременно и мотивация, и «топливо» для постоянного роста, который просто необходим. ИТ-сфера очень активно развивается: одни технологии сменяют другие, появляются новые области применения и т. д. Нельзя один раз освоить какой-то набор знаний и больше ничем не интересоваться. Очень скоро такой программист теряет привлекательность на рынке труда в качестве специалиста. Поэтому огромную роль играет самообразование. Благо, что интернет сейчас позволяет передавать и получать знания в любой доступной форме — статьи, подкасты, видеообзоры и уроки.\nЕщё одна важная ступень на пути становления лучшим программистом — это умение работать в команде, делиться информацией, выслушивать критику. Бытует заблуждение, что программист — это одиночка, который целый день пишет код и ни с кем не общается. Так или иначе во время работы программист взаимодействует с другими программистами, будь это команда в проекте или свободное сообщество. Плюс к этому, конечным пользователем программного обеспечения как правило является человек и надо понимать, чего он хочет. Таким образом от умения взаимодействовать с людьми и понимать их желания напрямую зависит, будет ли программный продукт правильно выполнять возложенные на него задачи.\nВ качестве старта в области программирования могу посоветовать определиться с тем, чем хотелось бы заниматься. Попробовать запустить сайт, написать простую игру, разработать какой-то инструмент. Также будет полезно принять участие в проекте с открытым исходным кодом, разобраться в нём, предложить свои изменения — это сформирует навыки работы с чужим кодом. Список востребованных технологий и навыков всегда можно сформировать для себя, просмотрев текущие открытые вакансии на рынке труда. Очень хорошо, если удастся в самом начале карьеры устроиться работать на должность джуниора или стажёра в крупную компанию с командой опытных разработчиков и спокойно набираться опыта. К сожалению, это возможно не всегда по разным причинам. Тогда можно найти работу, где можно совмещать трудовые обязанности с программированием или заниматься написанием каких-то проектов в свободное время. В любом случае, имея за плечами хотя бы год активной разработки, найти вакансию по душе будет намного проще.\nЧто касается HR-ов крупных корпораций, то, мне кажется, тут всё просто. Надо проявлять себя в жизни сообщества, выступать на конференциях, писать статьи и делиться своим опытом, можно принять участие в разработке и развитии каких-нибудь open-source проектов. Всё это будет не только полезно для собственного развития, но ещё даст наглядное представление о признании достижений конкретного специалиста со стороны других программистов, тем самым повысив его привлекательность в глазах потенциальных нанимателей. \n6\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n6\nПовысить\nПонизить\nБорис Восканов\n, \nруководитель команды производительности продуктов Acronis\nИзучайте принципы, а не языки программирования\nВремя идёт, всё меняется, популярные некогда языки и методологии устаревают. Вот почему важно концентрироваться на базовых принципах, а не постоянно гнаться за модой. Наверное, один из способов — глубоко изучить как минимум два разных языка.\nУчаствуйте в open-source проектах\nУ open-source проектов много преимуществ:\nэто и опыт работы в распределённой команде;\nпочти всегда более зрелые практики разработки и ревью кода;\nвозможность попробовать себя в новой сфере и стеке технологий;\nопыт разработки продукта, которым пользуются реальные люди.\nДа, это потребует времени, но взамен даст бесценный опыт и заметно обогатит портфолио.\nУмейте говорить «Нет»\nЗрелого программиста от юного часто отличает именно это качество. Каждому программисту приходилось работать в режиме сжатых сроков, и зачастую под давлением руководства нам хочется взять на себя чуть больше, чем мы способны совершить. Важно понимать, что это лишь откладывает решение проблемы на будущее, создавая у всех ложные ожидания. Лучше сказать «нет» сейчас, и вместе попробовать найти решение, чем согласиться на невозможное и потом подвести себя и коллег.\nНе выполняйте задачу, решайте проблему\nУмный программист быстро и качественно решает поставленную ему задачу. Мудрый же программист разбирается, какую проблему пользователя или проекта должна решить та или иная задача, и в этом контексте ищет решения. Очень часто разработчик может найти более изящное решение, если полностью понимает детали.\nСтарайтесь работать с людьми сильнее себя\nЭто не всегда заметно, но нас формирует окружение. Всеми силами старайтесь окружить себя людьми, которые сильнее вас в тех сферах, где вы хотели бы развиваться, и не бойтесь спрашивать совета. Так, день за днём вы незаметно для себя будете впитывать опыт, который не всегда можно прочитать в книгах и статьях.\n43\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n43\nПовысить\nПонизить\nДенис Корепин\n, \nведущий разработчик ПО Тверского Технологического центра Accenture Russia\nУ каждого программиста своя мотивация и цель в построении карьеры. Однако не все программисты знают, какие качества отделяют их от долгожданного повышения, и как стать лучшим. Вот несколько простых, но работающих советов.\nЛюбите то, что делаете. Наверное, первое, что видишь в успешных сотрудниках — страсть к своей работе. Делая то, что мы любим, мы не просто выполняем какую-либо задачу, подобно роботам, а оставляем в коде частичку себя: можем часами сидеть и подбирать размеры отступов на сайте, редактировать и форматировать код, превращая серый набор строчек в произведение искусства, словно мы художники, которые пишут картины. Но зачастую не так просто найти вдохновение, благодаря которому работа становится по-настоящему интересной. Из этого вытекает следующий пункт.\nЭкспериментируйте. Если подойти к сотрудникам, которые сидят годами на одном месте, и узнать, что они хотели бы изменить в своей работе, чтобы она им понравилась, то вряд ли они смогут сформулировать чёткий ответ. И самая частая причина — это незнание. Незнание технологий, других проектов и, как следствие, незнание, из чего можно выбирать. Если по какой-либо причине вы замечаете в себе это качество, значит, пришло время для экспериментов. Попробуйте расширить глубину своих знаний: почитайте о современных технологиях, паттернах, посмотрите на смежные обязанности. Уверен, буквально за день можно кардинально перевернуть своё мнение о проекте. Вы можете улучшить свой проект, внедрив в него новые технологии или переквалифицироваться (вдруг вы устали от баз данных, и в вас проснулся UX-талант, или наоборот). Даже если вы нашли ту самую технологию, но применить её в текущем проекте не представляется возможным — переходите в проект с ней или примите участие в создании нового проекта.\nБудьте незаменимы. Давно прошли те времена, когда программист творил какую-то неизвестную магию. В наше время практически на любой вопрос можно найти ответ в интернете. Поэтому лучший программист будет не просто программистом. Быть тем человеком, который пишет код, не просто, и это понятно – мы учимся буквально каждый день на протяжении многих лет, чтобы в конечном счёте код стал продолжением наших мыслей. И сотрудников, которые разговаривают с системами на «ты», не так много. Однако, тех, кто не боится отвечать за себя, за коллег, или же за целый проект, ещё меньше. Если вы хотите, чтобы вас заметили, — выйдите из зоны комфорта и начните отвечать за себя, начав писать такой код, к которому не задаст вопросов даже самый опытный ревьювер. Начните отвечать за коллег, помогая им в решении ежедневных головоломок.\nНа какой бы вы позиции ни находились — вдохновляйтесь, находите самое интересное в своей профессии, помогайте коллегам и, конечно же, растите. И тогда вопросов о том, как перейти из средних в лучшие, у вас не останется!\n18\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n18\nПовысить\nПонизить\nМихаил Брычкин\n, \nруководитель разработки iBrush \nСуществует огромное количество списков «что должен прочитать джуниор/миддл/фулстек/и т. д. разработчик», в которых перечислены полезные книги, статьи и прочая техническая информация, которую действительно стоит знать. Но есть ещё некоторые вещи, которые нужно подтянуть, чтобы выделиться на фоне остальных кандидатов и упростить себе жизнь в целом.\nНужно уметь решать задачи, а не закрывать тикеты. Это утверждение близко по смыслу с известным «делать не равно сделать», но я подразумеваю несколько большее, чем просто доделывание задачи до формального результата. За каждой задачей в конечном счёте стоит какая-то проблема, которую требуется решить, и не всегда это вообще необходимо делать путём написания кода. Где-то предложить более подходящее решение, где-то настроить окружение, где-то вообще отговорить заказчика от этой затеи, но в конечном счёте решить проблему так, чтобы максимальное количество вовлеченных оказались довольны.\nДля предыдущего тезиса также крайне полезно умение взглянуть на задачу с других точек зрения, как бизнеса, так и пользователя. Обычно такое требование предъявляется к специалистам по QA, поскольку это их основная задача, но у программиста в данном случае есть преимущество: он может ещё на этапе получения задачи или обсуждения проекта увидеть проблемные или непродуманные места и вытащить их на свет до того, как на реализацию будут потрачены месяцы.\nПродолжая тему задач, хотелось бы озвучить ещё один важный навык — это умение эти самые задачи ставить. В большинстве компаний переход из middle- в senior-разработчика подразумевает не только изменение уровня сложности или спектра задач непосредственно по программированию, но и получение под своё руководство некоторого количества людей. И если заранее не тренироваться в постановке задач, то можно запросто забуксовать на этом месте, получая вагоны негатива и от менеджеров, и от команды. К счастью, этот навык тренировать проще предыдущих, ведь вся работа программиста — не что иное, как попытка поставить задачу очень тупому, но исполнительному работнику: компьютеру. Сам по себе это весьма обширный и многогранный вопрос. Насколько детально описывать задачу, где дать самому искать решение, где дать готовое и многие другие нюансы — всё это будет выясняться с опытом, но минимальное умение поставить задачу так, чтобы исполнитель в итоге сделал то, что нужно — это жизненно необходимое умение.\nЕщё один навык, который поможет программисту в работе и жизни — знание русского языка и в общем грамотная речь. Да, звучит странно. Вы же читаете этот текст и понимаете, что тут написано? Но количество людей, которые действительно грамотно пишут, а также способны последовательно и понятно донести свои мысли до аудитории, сильно меньше, чем количество людей, которые просто понимают русский язык.\nКогда я только начинал работать программистом, да и вообще изучать программирование, я был свято уверен, что без знания английского разработчиком не стать. Прошли годы, появилось множество учебных материалов на русском языке, и, как следствие, появилось множество разработчиков, которые не знают английского. Но я всё же до сих пор уверен, что английский язык для разработчика — обязательный пункт в списке навыков. Если вы не планируете уезжать за рубеж или работать на иностранную компанию, то не обязательно иметь британское произношение и читать Шекспира в оригинале, но уметь читать документацию, сообщения и обсуждения на английском, а также правильно задавать вопросы хотя бы в Google нужно уметь каждому.\nИтак, книги прочитаны, какие-то проекты сделаны, опыт есть, предыдущие пункты освоены в той или иной мере, что делать дальше? Пробовать. Брать и делать. Нельзя стать лучше, просто почитав книги или статьи, но не сделав ничего на практике. Нужно ставить эксперименты, ломать и чинить обратно проекты, совершать ошибки и учиться этого не повторять. Как нельзя научиться держать равновесие ни разу не упав, так же и не получится делать проекты хорошо ни разу не сделав плохо. Можно долго спорить о парадигмах, паттернах и подходах, но не попробовав их в деле и не набив шишек об углы, вы не сможете выбрать, что использовать в новой задаче. Так что из двух в общем одинаковых разработчиков я бы предпочел взять в команду того, который наступил на большее число граблей и при этом научился не наступать на них второй раз. В агентстве всегда есть возможность получить огромный опыт работы (а значит, и «граблей» тут много) над разными проектами и задачами. Поэтому попробуйте себя в агентстве, а потом уже никакие клиенты вам будут не страшны.\nПоследнее, что я бы хотел посоветовать разработчику — это обуздать своего внутреннего перфекциониста. В реальном мире прикладных задач обычно нет цели написать идеальный код за неидеальное время (потому что идеальное время выполнения большинства задач с точки зрения клиента — вчера). Лучшее, что может сделать программист: написать максимально понятный и поддерживаемый код, решающий поставленную задачу, за время, которое на эту задачу было выделено.\n17\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n17\nПовысить\nПонизить\nИван Новиков\n, \nпреподаватель Московской школы программистов, программист-стажер в Google\nЧтобы попасть на стажировку в большую компанию, нужно знать алгоритмы, то есть структуру данных. Если ты не знаешь базовые алгоритмы, связанные с графами (хотя бы мапы, сеты, какие-нибудь хэштеблы, связанные списки), тебе будет очень некомфортно.\nБлагодаря стефу и проектному опыту я хорошо понимаю, как работают системы. То есть, запуская свой сайт, я знаю, как работают все его части, начиная от HTTP-запроса до конечного бэкенда, который я написал. Когда ты приходишь в большую компанию, то пишешь не весь код, а только его часть — однако для этого необходимо понимать, как при этом это всё работает целиком.\n0\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nДмитрий Ульянин\n, \nвыпускник Московской школы программистов, работает в Яндексе\nВ программировании много разных сфер, в которых нужны совершенно разные навыки. Я сейчас разработчик в основном на C++. Мне важно глубоко знать язык, причём не 97 стандарт, а следить за нововведениями, не отставать от развития самого языка. Кроме этого, важно понимать, как это всё работает на низком уровне: в ОС, в процессоре и так далее. Всегда нужно следить за последними и самыми актуальными технологиями в своей сфере. В университете посещайте курсы не только по языку программирования, а также по разным фреймворкам и парадигмам разработки. Например, высоконагруженные системы, параллельное программирование и так далее. Универсального рецепта нет: развивайтесь как в глубину вашего направления, так и в ширину (по технологиям программирования).\n3\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nДенис Солонков\n, \nвыпускник Московской школы программистов, стажёр в Google\nВ моём случае сильно помогло олимпиадное программирование. Оно сильнейшим образом «вправляет» мышление, сильно меняет то, как ты вообще смотришь на задачи любой сложности, и учит их решать.\nДиплом олимпиады помог мне попасть в хороший вуз (по ЕГЭ вряд ли бы поступил), а там благодаря уже выработанному умению держать стресс и жёсткую нагрузку, смог выдержать программу и начать хорошо учиться.\nПо окончанию первого курса я подал заявку на летнюю стажировку в Google, прошёл отбор благодаря олимпиадам, и начал набираться опыта.\nСуммируя, надо уметь быстро разбираться в любых процессах, выдерживать психологическую нагрузку, и набираться практического опыта.\n3\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n3\nПовысить\nПонизить\nИлья Павлов\n, \nвыпускник Московской школы программистов, работает в Microsoft\nДля начала карьеры стоит хорошо выучить один язык и научиться решать на нём любые алгоритмические задачи. На собеседованиях в крупные компании на начальные позиции в основном спрашивают именно об этом — как в России, так и за рубежом. В тех же Google, Facebook и Microsoft больше ничего другого и не спрашивают. Стоит также знать матанализ / теорию вероятностей, потому что по жизни они в любом случае пригодятся.\nНачинайте работать там, куда вас возьмут. Поначалу многие компании даже не будут вас рассматривать из-за маленького резюме. Этого бояться не надо, надо просто накапливать опыт.\nОстальные нужные знания придут с опытом. Не бойтесь задавать вопросы на работе (но не такие, на которые можете ответить сами). Умейте быстро читать чужой код и искать в нём что-то, нужное вам. Пользуйтесь дебаггером, ищите похожие проблемы в поисковике. И конечно же, хорошо общайтесь с коллегами.\n9\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n9\nПовысить\nПонизить\nКирилл Власов\n, \nдиректор подразделения информационных технологий компании Schneider Electric\nНачинать карьеру в ИТ лучше всего ещё во время обучения. Многие вузы предоставляют старшекурсникам возможность участвовать в интересных ИТ-проектах и проходить практику в крупных технологических компаниях. Стажировки дают представление о том, как реально работает бизнес и какую роль в нём играют технологии. Кроме того, это хорошая возможность проявить себя и закрепиться в компании мечты или познакомиться с интересными техниками, которые используются в компаниях. Например, существует техника, когда программисты сменяются друг за другом — один работает над кодом 10–15 минут, а второй стоит у него за спиной и наблюдает за процессом. Таким образом они изучают код друг друга и проверяют ошибки. Не стоит бояться браться за сложные кейсы, потому что именно они нарабатывают ваш опыт.\nЕсли вуз не реализует программы стажировки, необходимо искать возможности вовне — как можно больше интересоваться трендами рынка, общаться с однокурсниками, преподавателями, одним словом, воспринимать вуз как площадку для нетворкинга, расширяя сеть будущих профессиональных контактов. Важно понимать, что знания, полученные в вузе — это только фундамент. Навыков работы на базовых языках программирования будет недостаточно, чтобы попасть в топовую компанию сразу после окончания учебного заведения. К тому же, ИТ-сфера настолько быстро развивается, что к моменту получения диплома ваши знания могут попросту оказаться устаревшими.\nЧтобы стать первоклассным программистом, необходимо очень много учиться, причём постоянно. В сфере информационных технологий большое количество самоучек, обладающих необходимыми компетенциями для работы на высокооплачиваемых должностях. Если вы планируете последовать примеру таких программистов, сконцентрируйтесь на современных и наиболее востребованных языках программирования. Например, можно заняться изучением low code programming (визуальным программированием) на различных платформах (мы используем OutSystems) или развивать себя в области robotic process automation (RPA) — технологии автоматизации бизнес-процессов, использующая программных роботов, имитирующих действия человека для выполнения рутинных задач. В нашей компании RPA сейчас активно развивается на платформе Blueprism. Также сейчас набирают популярность мобильные разработки, исследования в области больших данных, интернета вещей и машинного обучения. Мы считаем, что за этими направлениями будущее.\nВ процессе самостоятельного образования немаловажным будет участие в мероприятиях. Сегодня проходит множество различных форумов и конференций, где ИТ-гуру делятся знаниями и профессиональными советами. Для наработки опыта очень полезны хакатоны, они проводятся при поддержке крупных компаний, которые впоследствии внедряют предложенные командами решения в свои бизнес-процессы. Такой формат мероприятий становится всё популярнее. Например, в конце сентября в России состоялся самый крупный в мире хакатон — финал конкурса «Цифровой прорыв», где приняли участие более 3000 специалистов со всей страны. В таких мероприятиях в условиях жесткого временного ограничения (обычно это 36 или 48 часов), специалисты учатся создавать рабочие продукты, оттачивают свои цифровые компетенции, и, что немаловажно, получают опыт работы в команде.\nДля программистов сегодня большой проблемой является развитие soft skills, а ведь именно они помогают эффективно взаимодействовать с другими людьми. Эти навыки дают возможность лучше понимать бизнес-процессы, своих заказчиков или коллег. Современный программист должен отходить от представления о том, что он просто пишет код, дистанцировавшись от всего остального мира. Любой специалист — это в первую очередь член команды agile, команды DevOps. Да, в компании должен быть product owner, менеджер проектов, но нельзя забывать, что и программист тоже является членом этой команды, которая работает в постоянном контакте друг с другом и с заказчиком.\n5\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\n\n \nОлег Любимов\n, \nгенеральный директор компании Selectel\nИдеальный вариант — сформировать основу фундаментальных знаний в области computer science в самом начале карьеры, а потом выбрать вектор дальнейшего развития и идти в выбранном направлении, подстраиваясь под изменения рынка и требований, овладевая новыми технологиями и инструментами, а также развивая soft skills. Но такое бывает редко.\nЕсли это не ваш случай, то не всё потеряно. Кроме профессионального владения основными навыками для вашей специальности, большое значение имеет ваш кругозор и понимание, как устроен мир вообще и бизнес в частности.\nЧто ещё имеет значение: педантичное отношение к коду, чтение профессиональной литературы, умение и желание самостоятельно искать ответы на сложные вопросы, квалифицированный ментор, общение с командой единомышленников, участие в соревнованиях по программированию. Значимый проект в виде собственного сайта, open-source приложения или обучающей программы добавит смысла в ежедневную рабочую рутину.\nПомните, что HR-специалист не всегда может оценить в полной мере профессиональные способности кандидата, но всегда обратит внимание на его амбициозность, адекватность и мотивированность. Для любого профессионала, и программисты тут совсем не исключение, важны человеческие качества: доброжелательность, общительность и способность к самоиронии. Умение слаженно работать в команде, сопереживать и поддерживать коллег, признавать и исправлять ошибки. \n13\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n13\nПовысить\nПонизить\nЕлена Мишарина\n, \nруководитель отдела разработки в «Диджитал Дизайн»\nМогу сказать, что в первую очередь для нас важны способность мыслить аналитически и умение работать в команде, ответственность, здравый смысл и навыки тайм-менеджмента. При найме на такое мы уделяем внимание опыту работы соискателя, хотя, конечно, технический бэкграунд приветствуется. Технологии очень быстро меняются, и опыт работы в определённой области — не всегда залог успеха. Поэтому очень сложно посоветовать, что именно нужно выучить, чтобы стать востребованным специалистом. Сейчас важна обучаемость и целеустремленность, а также желание развиваться. Конечно, мы предоставляем сотрудникам множество инструментов развития, но если на этапе отбора мы не видим желания развиваться, то это может насторожить. Человек, работающий в сфере IT сегодня, должен посещать специализированные группы, смотреть онлайн-IT-конференции, читать блоги разработчиков для собственного развития, пробовать писать свои проекты.\nЕсли вы начинаете свой карьерный путь с нуля, то могу посоветовать начать работу в компании, где есть стажировки и которая предоставляет инструменты развития.\n8\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nСергей Смирнов\n, \nведущий разработчик информационных систем ГК «Нетрика»\nНа самом деле секрет успеха прост: если специалист способен выдавать качественный результат на постоянной основе, то он точно будет востребован на рынке труда. При этом понятие качества может включать много параметров — например удобство использования разработанных систем или соблюдение сроков работы.\nВ программировании, как и любой другой сфере, на первое место выходят увлечённость и энтузиазм, специалисты, которые «горят» своим делом, профессионально развиваются в свободное от работы время — а потому обладают большим практическим опытом.\nОднако умение хорошо программировать — не всегда главное. Ответственность, умение критически относиться к себе и своей работе ценятся выше: таким сотрудникам можно доверять, делегировать полномочия. И эти качества не зависят от уровня квалификации или числа отработанных лет — это заложено в способе мышления.\nНо есть и навыки, которые можно развивать — к примеру, умение «чувствовать задачу». Хороший специалист понимает, когда стоит углубиться в детали, а когда важнее просто оперативно решить вопрос. При проектировании новой системы можно стать перфекционистом и ещё на начальном этапе продумать все нюансы. А вот с «боевыми» задачами всё иначе: здесь важнее выполнять их своевременно, иногда в условиях ограниченных ресурсов.\n0\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n0\nПовысить\nПонизить\nМихаил Адигеев\n, \nруководитель отдела программных разработок и поддержки компании «ГЭНДАЛЬФ»\nЧтобы стать лучшим программистом (как, наверное, и в других профессиях тоже), надо научиться смотреть дальше своих конкретных задач. Вы можете выбрать развитие либо в технологическом направлении, либо уделять больше внимания бизнес-проблемам. Но в любом случае — полезно смотреть на задачу шире, чем требуется для её простого выполнения, и изучать смежные области.\nТакой взгляд позволит вам лучше окружающих понимать, куда движется тот или иной проект или в каком направлении развивается технология, и предлагать и реализовывать собственные новые идеи. На мой взгляд, это основное, что отличает лучшего программиста от «середнячка».\n16\nОтвет эксперта\n2019-11-04T12:07:49+03:00\n\nРейтинг полезности ответа: \n16\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, как стать лучше и привлечь внимание рекрутеров?\nЛюбите то, что делаете. Энтузиазм позволит вам развиваться за пределами работы и получать больше навыков.\nСледите за актуальными технологиями в вашей сфере.\nНе останавливайтесь на каком-то одном направлении/языке/технологии/etc. Расширяйте свои знания как вглубь, так и вширь.\nУчаствуйте в соревнованиях по программированию. Призовые места помогут привлечь к себе рекрутеров.\nРазвивайте soft skills: учитесь работать в команде, делиться информацией, просто общаться.\nНе бойтесь ответственности и тяжёлых задач.\nНаучитесь эффективно доносить свои мысли до других. Для практики можете, например, завести блог.\nУчаствуйте в разных митингах и конференциях. Но не только как слушатель, но и как докладчик. Хорошие доклады, принятые аудиторией, также привлекают внимание рекрутеров.\nРегулярно выделяйте время на обучение.\nПоработайте над резюме, особенно если у вас нет опыта работы и резюме толком нечем наполнить.\nНаучитесь смотреть на задачу с разных точек зрения, чтобы понимать, чего хочет бизнес и пользователь.\n100500\nЛучший ответ\n2019-11-04T12:07:49+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/hr-icon-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/GSOwknVO4Ic1-e1573040208761-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/46024_a96e76f4_lzCfXH4L_1569581743-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/8330_b31df6eb_tFww0bDw_1554813416-e1555159775637-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/12/rdtex_Komarov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/Sergej-Shirkin-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/me_373x373-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/512_6ebd99e0_aVswuQdE_1570088080-1-e1572680682798-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/2019-04-23-13.46.31-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/IMG_46442-e1572681516193-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/IMG_4402-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/novikov_440_440_2_80-e1572008510332-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Uljanin-e1572714936609-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2017/08/tmp-e1502644965522-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Pavlov-e1572715128626-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/Kirill-Vlasov_Schneider-Eelctric-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/18168_b33df754_GNNGQBOa_1572273668-e1572769027832-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/11/87283_dc200205_bvWusuNc_1572949769-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_green-150x150.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2015/03/gendalf-e1453733813312-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/video/composition-api-in-vue/?autoplay=1",
                "title": "Composition API во Vue 3 — плюсы, минусы и опыт использования",
                "created_date": "3 ноября 2019 в 13:19",
                "body": "Рассказывает Тихон Соколов\n1\nЗачем нужно новое API?\n2:40\n На Vue 2 можно делать всё, что угодно. Есть супер-замороченные интерфейсы, например CKEditor последней версии сделан на Vue. Есть дешборды, и online web applications, которые очень круто работают. Зачем радоваться новому API, если мы и так уже имеем всё?\n2\nПроблемы Options API\n3:18\n При проектировании сложных систем компоненты рано или поздно дорастают до некрасивого и неразборчивого состояния, потому что в существующем Options API сложно декомпозировать и отделять логику внутри компонента: логику представления от бизнес-логики и так далее.\n3:50\n Часто у компонентов должна быть общая логика, но текущие методы борьбы с copy-paste неэффективны. Есть mixin’ы, provide/inject, компоненты высшего порядка и некоторые другие инструменты, но у каждого из них есть значительные минусы. Компоненты высшего порядка усложняют читаемость и затрудняют понимание кода.\n5:17\n Блок функциональности для своей реализации может включать в себя и реактивные данные, и computed’ы, методы, вотчеры, чтобы работать. Эти куски кода разбросаны по компоненту, и когда нужно понять, что делает компонент, приходится искать по всему коду, что откуда вызывается, куда какие данные поступают. Это усложняет понимание компонента.\n3\nКак Composition API может решить эти проблемы?\n6:00\n Теперь можно взять кусок логики, взять относящиеся к нему реактивные данные, вотчеры, props, computed’ы, хуки, сгруппировать их внутри какой-то функции, то есть инкапсулировать их в какую-то функцию, и работать с ней вне контекста компонента. Такой функцией является новый хук setup().\n7:04\n Объяснение работы Composition API на примере HelloWorld.\n4\nПреимущества Composition API\n9:07\n Теперь всё, что требуется для реализации какого-то куска функциональности, можно отделить от компонента, а сам компонент разбить на несколько таких логических блоков, переиспользовать и так далее. В основе нового API два ключевых понятия — reactive() и ref(). reactive() — это некий аналог существующей опции data(), а ref() — это похожая функциональность, но для примитивов.\n5\nСравнение Options API и Composition API на примере простой игры\n11:25\n Reactangular birds — это игра с механикой Angry Birds, где нужно птичкой-ректангуляром поразить Vue. Как устроен код игры на Options API.\n14:07\n Вся магия происходит внутри setup-функции, где вызывается useBird, useCatapult, useTarget, и происходит сам Composition. В этой setup-функции наши зависимости заданы явно. Это упрощает чтение кода.\n18:03\n Как выглядит отрефакторенный Reactangular birds на Composition API? Абсолютно точно так же, и работает так же.\n18:30\n Новое API позволяет декомпозировать логику в компонентах, разбивая её на отдельные setup-функции, что позволит не нарушать принцип единственной ответственности, не копипастить код и тестировать код в отрыве от контекста компонента. Куски кода между собой имеют явные зависимости, можно выкинуть миксины, provide/inject и все эти страшные вещи. Плюс благодаря самой природе функций они легко типизируются, и это тоже сильно облегчает разработку.\n19:43\n Сейчас можно попробовать Composition API во Vue 2 версии с помощью плагина. В будущем можно будет писать компоненты с использованием исключительно Composition API, и в компиляции поставить специальный флаг, чтобы Options API не включался в бандл.\n20:44\n Сравнение альтернатив хукам. Аналогичная функциональность есть во всех современных компонентных фреймворках, и core team нигде не скрывает, что они вдохновлялись React Hooks. Во Vue Composition API хуки в среднем будут обрабатываться быстрее, чем хуки React-а, потому что во Vue они запускаются единственный раз во время инициализации, а в React — каждый раз при рендеринге. Плюс во Vue можно просто писать computed’ы, в React же нужно указывать список зависимостей computed’а вручную.\n6\nНедостатки Composition API\n22:41\n Когда core team выпустили первую версию RFC про Composition API, сообщество разработчиков отреагировало неоднозначно. Многие думали, что выкинут Options API, придётся переучиваться, выкидывать весь свой старый код на помойку. Core team пообещали не убирать Options API из 3-й версии. То есть теперь будет две альтернативы — Options и Composition API. Другие люди были недовольны, что эта идея похожа на уже существующую в React.\n24:58\n Более существенные недостатки: будет непривычно использовать вместо data() новые врапперы — ref() и reactive() — и не забывать их использовать.\n25:24\n Появляются некоторые детали. Например, если мы деструктурируем реактивный объект, то мы получаем нереактивные данные. Для этого вводится новый хелпер — toRefs().\n25:57\n Setup-функция может обращаться к каким-то props’ам, но при этом она не декларирует в одном месте, какие props ей нужны.\n26:23\n Проблемы с терминологией, потому что раньше под ref’ами подразумевались ссылки на какой-то элемент в DOM. Новое понятие подразумевает под собой некоторый реактивный примитив, который в том числе может быть и ссылкой на элемент DOM.\n27:00\n В одном из комментариев член core team пишет, что скорее всего старое Options API, всё-таки уберут в 4-й версии, но скорее всего если коммьюнити захотят что-то оставить, core team прислушается и не будут так делать.\n28:58\n Важно дать фидбек по изменениям: посмотреть roadmap, зайти в репозиторий vue-next, там очень много открытых пулл-реквестов, и во Vue 3 многое ещё не готово. Каждый может поучаствовать. Только убедитесь, что пулл-реквест, который вы отправляете, решает какую-то новую проблему, потому по словам людей из core team, часто прилетают пулл-реквесты на одну и ту же фичу.\n7\nЧто ещё интересного?\n30:10\n Большинство описанных проблем обещают смягчить или решить с помощью средств разработки. Vetur плагин для VS Code будет помогать с типизацией, Intellisense и новой системой реактивности.\n30:54\n Roadmap Vue 3. Релиз ждать в первом квартале 2020 года. Сроки не жесткие, если core team не будет успевать, то возьмут ещё время. Всё это можно мониторить онлайн.\n8\nЧто почитать, чтобы разобраться в теме?\n31:27\n Сам RFC с фидбеком от сообщества, подробностями, кейсами, комментариями.\n31:58\n Тред 2018-го года в Twitter, где Эван описывает, как он пришёл к тому, что нужно взять Hook’и из React и адаптировать под Vue, с аргументацией, с хейтерами, с драмой.\n32:42\n Развёрнутый коммент от члена core team, где он собрал кучу критического фидбека и развёрнуто на него ответил.\n9\nОтветы на вопросы\n33:48\n Как Composition API будет работать с массивами?\n34:58\n Как можно будет находить, что благодаря деструктуризации попало в объект?\n36:08\n Система реактивности будет в Composition API, а в Options API тоже всё через прокси будет работать?\n36:35\n Как работать с npm-пакетами, которые построены на Options API?\n37:12\n Приходилось ли работать с Vue и TypeScript? Есть ли какое-то сравнение class-component-decorator-а и Composition API?\n37:55\n Насколько удобно будет дебажить код с Composition API?\n39:22\n Можно ли систему реактивности повесить на property класса?\n39:50\n Как вынуть property класса и отправить в шаблон? Сохранит ли Object.property свою реактивную сущность?\nНе смешно? А здесь смешно: \n@ithumor\nJavaScript\n, \nФреймворки\nТакже рекомендуем:\nБесплатные материалы для программистов\nLocalStorage на пальцах\nОдин из наших читателей прислал статью с рассказом о HTML5 LocalStorage в браузерах. Передаём ему слово. \nПодборка книг по JavaScript для начинающих\nПишем полноценное приложение на React с нуля за час",
                "images": []
            },
            {
                "url": "https://tproger.ru/quiz/chto-eto-za-zhelezka/",
                "title": "Что это за железка? Угадайте устройство по его силуэту",
                "created_date": "1 ноября 2019 в 18:58",
                "body": "В этом тесте покажите, как круто вы шарите в железках. Попробуйте отгадать их все, а в конце узнаете, какое вы вычислительное устройство. Зачем? Не важно, погнали!\n\n\n\n\n\n\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Скоро загрузится, клянусь своей IDE!';\r\n        }, 5 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Ещё совсем немножко, прям милипусенько...';\r\n        }, 10 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Викторина загружается дольше, чем обычно: попробуйте потанцевать с бубном — отключить AdBlock и перезагрузить страницу :(';\r\n        }, 20 * 1000);\r\n    \n\n\n\nНачать тест\n\n\n\n\r\n        var quiz_data_stringify = \"\";\r\n        var quiz_data = JSON.parse(window.atob(quiz_data_stringify));\r\n        var quiz_template = decodeURIComponent(escape(window.atob('PCVxdWl6LnF1ZXN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHF1ZXN0aW9uLCBpLCBhcnIpIHslPgoKPGRpdiBjbGFzcz0icXVpel9pdGVtIiBpZD0icXVpel9pdGVtXzwlPXF1ZXN0aW9uLmlkJT4iIGRhdGEtbnVtPSI8JT1pJT4iIGRhdGEtaWQ9IjwlPXF1ZXN0aW9uLmlkJT4iPgoKICAgIDxkaXYgY2xhc3M9InF1ZXN0aW9uIj4KICAgICAgICA8JT1xdWVzdGlvbi50ZXh0JT4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImFuc3dlcnMiPgogICAgICAgIDwlcXVlc3Rpb24uYW5zd2Vycy5mb3JFYWNoKGZ1bmN0aW9uKGFuc3dlciwgbnVtLCBhcnIpIHslPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhbnN3ZXIiIGRhdGEtbnVtPSI8JT1udW0lPiIgZGF0YS1pZD0iPCU9YW5zd2VyLm9wdGlvbnMuaWQlPiI+CgogICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9Imljb24iIGNsYXNzPSJxdWl6X2ljb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InF1aXpfY29udHJvbCBhbnN3ZXJfPCU9cXVlc3Rpb24udHlwZSU+Ij5PPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnRlbGxvLWljb24iIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48L3NwYW4+CiAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFuc3dlcl90ZXh0IiBkYXRhLXJvbGU9ImFuc3dlcl90ZXh0Ij4KICAgICAgICAgICAgICAgIDwlPSBhbnN3ZXIub3B0aW9ucy50ZXh0ICU+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3IiPjwlPSBhbnN3ZXIub3B0aW9ucy5kZXNjciAlPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9InBlcmNlbnQiIGNsYXNzPSJwZXJjZW50Ij48c3BhbiBjbGFzcz0iaWNvbi1jaGFydC1iYXIiPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICA8JT1hbnN3ZXIucGVyY2VudCAlPiU8L3NwYW4+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8JX0pOyU+CgogICAgPC9kaXY+CgogICAgPGJ1dHRvbiBjbGFzcz0icXVpel9idXR0b24iIGRhdGEtcm9sZT0ibmV4dCIgZGF0YS1jdXJyZW50PSI8JT1pJT4iIGRhdGEtbmV4dD0iPCU9KGkrMSklPiI+0JTQsNC70YzRiNC1PC9idXR0b24+Cgo8L2Rpdj4KPCV9KTslPgoKCjwvZGl2Pgo=')));\r\n        var quiz_result_template = decodeURIComponent(escape(window.atob('')));\r\n        if (quiz_data.code_mode) {\r\n            var head = document.head || document.getElementsByTagName('head')[0];\r\n            var script = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.defer = true;\r\n            script.src = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.js?x84192';\r\n            head.appendChild(script);\r\n            link = document.createElement('link');\r\n            link.rel = 'stylesheet';\r\n            link.type = 'text/css';\r\n            link.href = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.css?x84192';\r\n            head.appendChild(link);\r\n        }\r\n    \n\n\n\n\nHardware\nТакже рекомендуем:\nВ чем разница между CPU и GPU?\nНовая жизнь дискет: что такое флопотрон и как его сделать\nКак работает процессор?\nЗнакомство с недорогим и функциональным микроконтроллером ESP8266: прошивка и пример использования",
                "images": []
            },
            {
                "url": "https://tproger.ru/devnull/halloween-scary-code-compilation/",
                "title": "Страшна, вырубай: хэллоуинская подборка кода, от которого волосы встают дыбом",
                "created_date": "31 октября 2019 в 19:18",
                "body": "Подборка с сайта \ngovnokod.ru\nisalpha()\n? Не, не слышал.\nbool IsBukva(char symbol)\r\n{\r\n    switch(symbol)\r\n    {\r\n        case'a':return 1;break;\r\n        case'b':return 1;break;\r\n        case'c':return 1;break;\r\n        case'd':return 1;break;\r\n        case'e':return 1;break;\r\n        case'f':return 1;break;\r\n        case'g':return 1;break;\r\n        case'h':return 1;break;\r\n        case'i':return 1;break;\r\n        case'j':return 1;break;\r\n        case'k':return 1;break;\r\n        case'l':return 1;break;\r\n        case'm':return 1;break;\r\n        case'n':return 1;break;\r\n        case'o':return 1;break;\r\n        case'p':return 1;break;\r\n        case'q':return 1;break;\r\n        case'r':return 1;break;\r\n        case's':return 1;break;\r\n        case't':return 1;break;\r\n        case'u':return 1;break;\r\n        case'v':return 1;break;\r\n        case'w':return 1;break;\r\n        case'x':return 1;break;\r\n        case'y':return 1;break;\r\n        case'z':return 1;break;\r\n        case'A':return 1;break;\r\n        case'B':return 1;break;\r\n        case'C':return 1;break;\r\n        case'D':return 1;break;\r\n        case'E':return 1;break;\r\n        case'F':return 1;break;\r\n        case'G':return 1;break;\r\n        case'H':return 1;break;\r\n        case'I':return 1;break;\r\n        case'J':return 1;break;\r\n        case'K':return 1;break;\r\n        case'L':return 1;break;\r\n        case'M':return 1;break;\r\n        case'N':return 1;break;\r\n        case'O':return 1;break;\r\n        case'P':return 1;break;\r\n        case'Q':return 1;break;\r\n        case'R':return 1;break;\r\n        case'S':return 1;break;\r\n        case'T':return 1;break;\r\n        case'U':return 1;break;\r\n        case'V':return 1;break;\r\n        case'W':return 1;break;\r\n        case'X':return 1;break;\r\n        case'Y':return 1;break;\r\n        case'Z':return 1;break;\r\n        default:return 0;\r\n    }\r\n}\n***\nПисать, почему этот код неок — всё равно, что объяснять смысл анекдота.\nKeyFactory keyFactory = new KeyFactory();\r\nKeyObj keyObj = keyFactory.getKeyObj(wParam);\r\nkeyObj.doStuff();\r\n\r\nclass VK_F11 extends KeyObj {\r\nboolean val;\r\npublic void doStuff() {\r\nval = !val;\r\n}\r\n}\r\n\r\nclass VK_F12 extends KeyObj {\r\nboolean val;\r\npublic void doStuff() {\r\nval = !val;\r\n}\r\n}\r\n\r\nclass KeyFactory {\r\npublic KeyObj getKeyObj(int param) {\r\nswitch(param) {\r\ncase VK_F11:\r\nreturn new VK_F11();\r\ncase VK_F12:\r\nreturn new VK_F12();\r\n}\r\nthrow new KeyNotFoundException(\"Key \" + param + \" was not found!\");\r\n}\r\n}\n***\nПереводим только самые актуальные языки: древнепрусский, нижнелужицкий, авестийский…\nfunction translate_a_name_of_the_winter_to_the_foreign_language(language: String): String;\r\n  begin\r\n    if      language = 'авестийский'    Result := 'zimō'\r\n    else if language = 'белорусский'    Result := 'зіма'\r\n    else if language = 'болгарский'     Result := 'зима'\r\n    else if language = 'верхнелужицкий' Result := 'zyma'\r\n    else if language = 'греческий'      Result := 'χειμώνας'\r\n    else if language = 'древнепрусский' Result := 'semo'\r\n    else if language = 'латинский'      Result := 'hiems'\r\n    else if language = 'латышский'      Result := 'ziema'\r\n    else if language = 'литовский'      Result := 'žiema'\r\n    else if language = 'македонский'    Result := 'зима'\r\n    else if language = 'нижнелужицкий'  Result := 'zyma'\r\n    else if language = 'осетинский'     Result := 'зымӕг'\r\n    else if language = 'польский'       Result := 'zima'\r\n    else if language = 'русский'        Result := 'зима'\r\n    else if language = 'санскрит'       Result := 'hima'\r\n    else if language = 'сербский'       Result := 'зима'\r\n    else if language = 'словацкий'      Result := 'zima'\r\n    else if language = 'словенский'     Result := 'zima'\r\n    else if language = 'талышский'      Result := 'зымыстон'\r\n    else if language = 'таджикский'     Result := 'зимистон'\r\n    else if language = 'украинский'     Result := 'зима'\r\n    else if language = 'хорватский'     Result := 'zima'\r\n    else if language = 'чешский'        Result := 'zima'\r\n  end;\n***\nКонференция f(by) 2020\n25 января в 09:00, Минск, 62–296 br\ntproger.ru\nСобытия и курсы на tproger.ru\nКак говорила Скарлетт О’Хара: «Я подумаю об этом завтра».\nvoid get_tomorrow_date( struct timeval *date )\r\n  {\r\n    sleep( 86400 ); // 60 * 60 * 24\r\n    gettimeofday( date, 0 );\r\n  }\n***\nКогда препод задал написать рекурсивную функцию, но факториал и Фибоначчи уже забрали, а тебе досталась сумма.\nint SUM(int A, int B)\r\n{\r\n\tif (0 == A) return B;\r\n\tif (0 == B) return A;\r\n\r\n\treturn (1 + (SUM(A, B - 1) + SUM(A - 1, B)) / 2);\r\n}\n***\nТо пиши понятные названия переменных, то не пиши…\nOnMouseMoveFunctionalTestVerticalSplitIndicatorExactlyOnTheLeftBorderOfTheFirstCellOnTheTheWeekViewAndGroupByResourceAndTwoResources\n***\nВсе эти ванильные дефайны с эмоджи — ерунда по сравнению с этим:\n#include\r\n#define _0000 0\r\n#define _0001 int\r\n#define _0010 a\r\n#define _0011 16\r\n#define _0100 b\r\n#define _0101 c\r\n#define _0110 printf\r\n#define _0111 \"%d\"\r\n#define _1000 d\r\n#define _1001 (\r\n#define _1010 )\r\n#define _1011 =\r\n\r\nint main()\r\n{\r\n_0001 _1000 _1011 _0011;\r\n_0001 _0010 _1011 _1000;\r\n_0001 _0100 _1011 _1001--_1000 _1010+++_1001++_1000 _1010;\r\n_0001 _0101 _1011 _0010>_0100?_0010:_0100>_0010?_0100:_0000;\r\n_0110 _1001 _0111, _0101 _1010;\r\ngetchar();\r\n}\n***\nА как вам рисование линий по пикселям с помощью функции которая предназначена для рисования линий?\nQPainter painter(this);\r\nint a1;\r\nint a2;\r\nint a3;\r\nint a4;\r\n//.......\r\nint a999;\r\nint a1000;\r\n\r\na1 = 1;\r\na2 = 1;\r\na3 = 1;\r\na4 = 1;\r\n//.......\r\na999 = 1;\r\na1000 = 1;\r\n\r\nwhile (a1 != 500)\r\n{         painter.drawLine(a1, a1, a1, a1); a1 ++; \r\n}\r\n\r\nwhile (a2 != 500)\r\n{         painter.drawLine(a2, a2, a2, a2); a2 ++; \r\n}\r\nwhile (a3 != 500)\r\n{         painter.drawLine(a3, a3, a3, a3); a3 ++; \r\n}\r\nwhile (a4 != 500)\r\n{         painter.drawLine(a4, a4, a4, a4); a1 ++; \r\n}\r\n//........\r\nwhile (a999 != 500)\r\n{         painter.drawLine(a999, a999, a999, a999); a999 ++; }\r\n}\r\nwhile (a1000 != 500)\r\n{         painter.drawLine(a1000, a1000, a1000, a1000); a1000 ++; }\r\n}\n***\nНа сладкое. Просто попробуйте понять, что делают эти две строчки кода.\nint i=8, a1, a2;\r\nfor (a1=a2=1; i>2; a1=(a2+=a1)-a1) i--;\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/pumpkin_icon-cover-icon-1.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/steamworks-matchmaking/",
                "title": "Интеграция своей игры в Steam: работа с лобби в Steamworks.NET",
                "created_date": "30 октября 2019 в 17:10",
                "body": "Мало кто из геймеров не слышал про Steam. Первое появление площадки приходится аж на 2002 г. На ней крупные издатели могли безопасно распространять игры.\nСпустя десяток лет появился Steam Greenlight, который дал возможность попасть на площадку не только крупным студиям, но и обычным инди-разработчикам. Пользователи сами выбирали, какие игры они хотят видеть на площадке. Но из-за появления массы второсортных игр такую систему пришлось закрыть. На место Greenlight пришел Direct. По словам разработчиков, такая система должна сделать процесс публикации упорядоченным, прозрачным и доступным для новых разработчиков со всего света.\nЗа почти два десятилетия Steam перестал быть просто площадкой цифрового распространения. В нём появилась внутренняя экономика, достижения, коллекционные карточки, инвентарь. Всё это необходимо для повышения вовлечённости игрока. Естественно, нужно было дать возможность разработчикам как-то интегрировать эти составляющие Steam в свои игры. Для этого был создан Steamworks.\nИстория Steam как многопользовательской платформы началась с CS 1.6. Мультиплеер всегда был одним из ключевых аспектов в процессе игры. Площадка даёт игрокам возможность связываться между собой по одноранговой сети (P2P), либо использовать выделенные игровые серверы. Для первого случая, естественно, необходим матчмейкинг — процесс объединения игроков в игровую сессию. Набор игроков происходит в лобби, где игроки могут обсудить различные игровые аспекты, выбрать персонажей и карту. Steamworks даёт исчерпывающее API для работы с матчмейкингом.\nПримечание\n Оригинальный Steamworks работает на C++. В этой же статье будет идти речь о C# — \nSteamworks.NET\n. Это полноценная обёртка официального Steamworks. У Steam есть \nполная документация\n для матчмейкинга.\nУстановка (для Unity3D)\nСкачайте из \nрепозитория Steamworks.NET\n актуальную версию SDK.\nПереместите всё содержимое в папку Assets.\nЗапустите проект в Unity3D. После запуска в корне проекта создастся файл \nsteam_appid.txt\n. В этом файле должен храниться ID вашего приложения в Steam. Если такового пока нет — можно использовать стандартный ID 480. Он принадлежит игре Spacewar.\nПерезагрузите Unity3D, чтобы изменения файла вошли в силу.\nОбратите внимание на наличие файла \nSteamManager.cs\n. Он выполняет несколько крайне важных функций. Если файла нет, то его всегда можно найти в репозитории.\nВведение\nКлючевую роль в Steamworks играют Callback и CallResult. Обратные вызовы позволяют игре асинхронно работать со Steam.\nCallback вызывается при каких-либо событиях в Steam. Это могут быть события получения сообщения в чате, изменение списка игроков лобби или даже открытие игрового оверлея. Рассмотрим следующий код, взятый с вики Steamworks.NET:\npublic class SteamScript : MonoBehaviour {\r\n\tCallback m_GameOverlayActivated;\r\n\r\n\tprivate void OnEnable() {\r\n\t\tif (SteamManager.Initialized)\r\n\t\t\tm_GameOverlayActivated = Callback.Create(OnGameOverlayActivated);\r\n\t}\r\n\r\n\tprivate void OnGameOverlayActivated(GameOverlayActivated_t pCallback) {\r\n\t\tif(pCallback.m_bActive != 0)\r\n\t\t\tDebug.Log(\"Оверлей Steam открыт\");\r\n\t\telse \r\n\t\t\tDebug.Log(\"Оверлей Steam закрыт\");\r\n\t}\r\n}\r\n\nВначале нужно создать экземпляр Callback. В данном случае это событие открытия/закрытия оверлея. Callback нужно инициализировать, привязав к нему функцию. Это стоит делать только убедившись, что Steam уже инициализирован: \nSteamManager.Initialized\n. Для этого лучше всего подойдёт метод \nOnEnable()\n, который вызывается сразу при старте игры.\nФункции будет передана переменная, содержащая результат события. Для каждого типа обратного вызова свой тип переменной.\nMiddle Unity3D Developer\nPlarium, Краснодар\ntproger.ru\nВакансии на tproger.ru\nCallResult очень похож на Callback. Разница в том, что CallResult является результатом вызова определённого метода. Это может быть, к примеру, результат создания лобби или подключения к нему. Рассмотрим код с вики:\npublic class SteamScript : MonoBehaviour {\r\n\tprivate CallResult m_NumberOfCurrentPlayers;\r\n\r\n\tprivate void OnEnable() {\r\n\t\tif (SteamManager.Initialized)\r\n\t\t\tm_NumberOfCurrentPlayers = CallResult.Create(OnNumberOfCurrentPlayers);\r\n\t}\r\n\r\n\tprivate void Update() {\r\n\t\tif(Input.GetKeyDown(KeyCode.Space)) {\r\n\t\t\tSteamAPICall_t handle = SteamUserStats.GetNumberOfCurrentPlayers();\r\n\t\t\tm_NumberOfCurrentPlayers.Set(handle);\r\n\t\t\tDebug.Log(\"Вызван метод GetNumberOfCurrentPlayers()\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void OnNumberOfCurrentPlayers(NumberOfCurrentPlayers_t pCallback, bool bIOFailure)\r\n\t\tif (pCallback.m_bSuccess != 1 || bIOFailure) {\r\n\t\t\tDebug.Log(\"Возникла ошибка при обработке  NumberOfCurrentPlayers.\");\r\n\t\telse\r\n\t\t\tDebug.Log(\"Количество игроков в игре: \" + pCallback.m_cPlayers);\r\n\t}\r\n}\r\n\nКак и в случае с Callback, тут сначала нужно создать экземпляр CallResult и инициализировать его. В методе \nUpdate()\n идёт проверка на нажатие пробела. По нажатию будет отправлен запрос на получение количества игроков. Как и в прошлом случае, после получения ответа вызывается указанный метод, которому будет передан результат.\nОбратите внимание, что при работе с CallResult в сигнатуре метода всегда будет \nbool bIOFailure\n.\nДля работы Callback и CallResult нужно циклически вызывать метод \nSteamAPI.RunCallbacks()\n.\nПримечание\n Вызов этого метода уже реализован в SteamManager.cs.\nПодготовка\nДля работы с матчмейкингом вам понадобятся некоторые структуры:\nstruct LobbyMetaData\r\n{\r\n    public string m_Key;\r\n    public string m_Value;\r\n}\r\n\r\nstruct LobbyMembers\r\n{\r\n    public CSteamID m_SteamID;\r\n    public LobbyMetaData[] m_Data;\r\n}\r\n\r\nstruct Lobby\r\n{\r\n    public CSteamID m_SteamID;\r\n    public CSteamID m_Owner;\r\n    public LobbyMembers[] m_Members;\r\n    public int m_MemberLimit;\r\n    public LobbyMetaData[] m_Data;\r\n}\r\n\nКаждое лобби имеет свои мета-данные: название карты или же режим игры. Нет каких-либо шаблонных данных — всё остаётся за разработчиком. Для работы с мета-данными понадобится структура \nLobbyMetaData\n. Она представляет собой стандартную пару ключ-значение.\nВ лобби каждый игрок представляет из себя структуру \nLobbyMembers\n, главным свойством которой является \nm_SteamID\n — уникальный ID пользователя Steam.\nСтруктура \nLobby\n описывает непосредственно лобби, а точнее — самые необходимые свойства, такие как:\nуникальный ID лобби;\nID владельца лобби;\nсписок игроков в лобби;\nмаксимальное количество игроков в лобби;\nмета-данные лобби.\nТакже потребуются некоторые экземпляры Callbacks и CallResult, а именно:\nCallResult m_LobbyEnterCallResult; // При входе в лобби\r\nCallResult m_LobbyMatchListCallResult; // При получении списка лобби\r\nCallResult m_LobbyCreatedCallResult; // При создании лобби\r\nCallback m_LobbyChatMsgCallResult; // При получении сообщения в лобби\r\nCallback m_LobbyChatUpdateCallResult; // При изменении списка игроков в лобби (когда какой-либо игрок входит в лобби или выходит)\r\nCallback m_LobbyDataUpdateCallResult; // При обновлении мета-данных лобби\nИ как полагается, стоит инициализировать все обратные вызовы и создать для них соответствующие методы:\nvoid OnEnable()\r\n{\r\n    if (!SteamManager.Initialized)\r\n        return;\r\n\r\n    m_LobbyEnterCallResult = CallResult.Create(OnLobbyEnter);\r\n    m_LobbyMatchListCallResult = CallResult.Create(OnLobbyMatchList);\r\n    m_LobbyCreatedCallResult = CallResult.Create(OnLobbyCreated);\r\n    m_LobbyChatMsgCallResult = Callback.Create(OnLobbyChatMsg);\r\n    m_LobbyChatUpdateCallResult = Callback.Create(OnLobbyChatUpdate);      \r\n    m_LobbyDataUpdateCallResult = Callback.Create(OnLobbyDataUpdate);\r\n}\r\n\r\nvoid OnLobbyEnter(LobbyEnter_t pCallback, bool bIOFailure)\r\n{\r\n    // При входе в лобби...\r\n}\r\n\r\nvoid OnLobbyMatchList(LobbyMatchList_t pCallback, bool bIOFailure)\r\n{\r\n  // При получении списка лобби...\r\n}\r\n\r\nvoid OnLobbyCreated(LobbyCreated_t pCallback, bool bIOFailure)\r\n{\r\n    // При создании лобби...\r\n}\r\n\r\nvoid OnLobbyChatMsg(LobbyChatMsg_t pCallback)\r\n{\r\n    // При получении сообщения в лобби...\r\n}\r\n\r\nvoid OnLobbyChatUpdate(LobbyChatUpdate_t pCallback)\r\n{\r\n    // При изменении списка игроков в лобби...\r\n}\r\n\r\nvoid OnLobbyDataUpdate(LobbyDataUpdate_t pCallback)\r\n{\r\n    // При обновлении мета-данных лобби...\r\n}\r\n\nПолучение списка лобби\nЧтобы получить список существующих лобби, используйте:\nm_LobbyMatchListCallResult.Set(SteamMatchmaking.RequestLobbyList());\nПосле получения ответа вызовется метод \nOnLobbyMatchList\n. Методу передаётся только одно число — количество лобби. Его можно взять из переменной \npCallback.m_nLobbiesMatching\n.\nВнимание\n Steamworks может вернуть в списке не более 50 лобби.\nПосле получения списка лобби их неплохо было бы отобразить. Перебор списка лобби будет выглядеть так:\nfor (int i = 0; i < pCallback.m_nLobbiesMatching; i++)       \r\n    RenderLobby(SteamMatchmaking.GetLobbyByIndex(i));\r\n\nВам нужно будет создать какой-нибудь метод отображения списка лобби (\nRenderLobby\n), который будет принимать ID лобби:\nLobby lobby = new Lobby();\r\nlobby.m_SteamID = steamIDLobby; // ID, который передавался методу\r\nlobby.m_Owner = SteamMatchmaking.GetLobbyOwner(steamIDLobby);\r\nlobby.m_Members = new LobbyMembers[SteamMatchmaking.GetNumLobbyMembers(steamIDLobby)];\r\nlobby.m_MemberLimit = SteamMatchmaking.GetLobbyMemberLimit(steamIDLobby);     \r\n\r\nint DataCount = SteamMatchmaking.GetLobbyDataCount(steamIDLobby);\r\n\r\nlobby.m_Data = new LobbyMetaData[DataCount];\r\nfor (int i = 0; i < DataCount; i++) // Получение всех мета-данных лобби\r\n{\r\n    bool lobbyDataRet = SteamMatchmaking.GetLobbyDataByIndex(steamIDLobby, i, out lobby.m_Data[i].m_Key, \r\n        Constants.k_nMaxLobbyKeyLength, out lobby.m_Data[i].m_Value, Constants.k_cubChatMetadataMax);\r\n            \r\n    if (!lobbyDataRet){\r\n        Debug.LogError(\"Ошибка при получении мета-данных лобби\");\r\n        continue;\r\n    }\r\n}\r\n//\r\n// Отображение лобби в списке...\r\n//\nПотом нужно дать возможность пользователю выбрать лобби, к которому он захочет подключиться, либо создать своё.\nФильтр списка лобби\nSteamworks даёт возможность отфильтровать возвращаемый список по некоторым категориям.\nВнимание\n Фильтр нужно устанавливать перед вызовом \nRequestLobbyList()\n.\nВначале можно указать максимальное количество возвращаемых лобби. Чем меньше количество — тем быстрее обработается результат. Сделать это можно функцией \nSteamMatchmaking.AddRequestLobbyListResultCountFilter(max_count);\n.\nДальше есть несколько типов фильтров (все они находятся в классе \nSteamMatchmaking\n):\nAddRequestLobbyListDistanceFilter\n — задаёт расстояние, в пределах которого нужно искать лобби (исходя из IP пользователя). Принимает \nELobbyDistanceFilter\n.\nAddRequestLobbyListFilterSlotsAvailable\n — оставляет только те лобби, в которых доступно указанное количество свободных слотов.\nAddRequestLobbyListNearValueFilter\n — сортирует лобби по степени удалённости значения от указанного. Таких фильтров можно указать несколько. Первый будет иметь больше всего влияния на сортировку, последний — меньше всего.\nAddRequestLobbyListNumericalFilter\n — задаёт числовой тип сравнения.\nAddRequestLobbyListStringFilter\n — задаёт строковый тип сравнения.\nТри последних фильтра сравнивают/сортируют лобби по их мета-данным.\nНапример, после создания лобби вы выбираете какую-либо локацию. Название локации нужно будет сохранить в мета-данных лобби под ключом \nmap_name\n. Остальные пользователи смогут отфильтровать список лобби, в которых значение мета-данных \nmap_name\n будет тем, которые они выставят. Таким образом игрок сможет найти лобби с той локацией, которую он захочет.\nПодключение к лобби\nЧтобы присоединиться к существующему лобби:\nm_LobbyEnterCallResult.Set(SteamMatchmaking.JoinLobby(LobbyID));\nПосле удачного подключения к лобби будет вызван метод \nOnLobbyEnter\n. У всех же остальных участников лобби будет вызван метод \nOnLobbyChatUpdate\n.\nСоздание своего лобби\nЧтобы создать собственное лобби, используйте метод:\nm_LobbyCreatedCallResult.Set(SteamMatchmaking.CreateLobby(ELobbyType.k_ELobbyTypePublic, 4));\nМетод \nCreateLobby\n принимает два параметра. Первый — тип видимости лобби (по приглашению/для друзей/открытое); второй — максимальное количество игроков. В лобби может быть до 250 игроков, хотя на практике — от 2 до 5.\nПосле удачного создания лобби будет вызван метод \nOnLobbyCreated\n.\nПребывание в лобби\nСкорей всего, в лобби вам нужно будет отображать список игроков и чат. Для этого потребуются некоторые методы. К примеру, чтобы получить \nSprite\n, содержащий аватар пользователя, используйте метод:\npublic static Sprite GetUserAvatar(CSteamID ID)\r\n{\r\n    Texture2D original = null;\r\n    uint width, height;\r\n\r\n    int image = SteamFriends.GetLargeFriendAvatar(ID); \r\n\r\n    bool IsValid = SteamUtils.GetImageSize(image, out width, out height);\r\n\r\n    if (IsValid)\r\n    {\r\n        byte[] data = new byte[width * height * 4];\r\n\r\n        IsValid = SteamUtils.GetImageRGBA(image, data, (int)(width * height * 4));\r\n        if (IsValid)\r\n        {\r\n            original = new Texture2D((int)width, (int)height, TextureFormat.RGBA32, false, true);\r\n            original.LoadRawTextureData(data);\r\n            original.Apply();\r\n        }\r\n    }\r\n\r\n    Texture2D flipped = new Texture2D((int)width, (int)height);\r\n\r\n    int x = (int) width, y = (int) height;\r\n\r\n    for (int i = 0; i < x; i++)\r\n        for (int j = 0; j < y; j++)\r\n            flipped.SetPixel(j, x - i - 1, original.GetPixel(j, i));\r\n\r\n    flipped.Apply();\r\n\r\n    return Sprite.Create(flipped, new Rect(0f, 0f, original.width, original.height), Vector2.zero);\r\n}\r\n\nПри этом разрешение аватара будет 128×128 пикселей.\nЧтобы получить собственный Steam ID используйте \nSteamUser.GetSteamID()\n. Для получения своего имени — \nSteamFriends.GetPersonaName()\n. Если нужно получить имя другого пользователя — \nSteamFriends.GetFriendPersonaName(PlayerID)\n.\nОтправка сообщений в лобби\nSteamworks даёт возможность обмена информацией в лобби. Это может быть уведомление о готовности какого-нибудь игрока, смена персонажа либо банальное получение сообщений в чате. В любом случае вам понадобится следующий метод:\nvoid SendData(string data)\r\n{\r\n    byte[] bytes = System.Text.Encoding.Default.GetBytes(data);\r\n    SteamMatchmaking.SendLobbyChatMsg(current_lobby_id, bytes, bytes.Length + 1);\r\n}\r\n\nОбратите внимание, что переменную \ncurrent_lobby_id\n вы должны обновлять самостоятельно при создании собственного лобби либо подключении к существующему.\nПосле получения сообщения у всех пользователей (в том числе и у отправителя) вызовется метод \nOnLobbyChatMsg\n.\nНеплохим решением будет создание объекта данных, который будет иметь определённый тип (сообщение в чате, изменение готовности игрока и т. д.). Для отправки данных нужно будет его сериализовать в строку (например JSON) и отправить всем остальным через \nSendData\n. При получении такого сообщения нужно будет десериализовать сообщение в объект, определить его тип и обработать. Тогда \nOnLobbyChatMsg\n будет начинаться примерно так:\nvoid OnLobbyChatMsg(LobbyChatMsg_t pCallback)\r\n{\r\n    CSteamID SteamIDUser; // ID отправителя\r\n\r\n    byte[] Data = new byte[4096]; // Максимальный размер сообщения\r\n    EChatEntryType ChatEntryType;\r\n    int ret = SteamMatchmaking.GetLobbyChatEntry((CSteamID)pCallback.m_ulSteamIDLobby, (int)pCallback.m_iChatID, out SteamIDUser, Data, Data.Length, out ChatEntryType);\r\n\r\n    string data = System.Text.Encoding.Default.GetString(Data);\r\n    //\r\n    // Дальнейшая обработка data...\r\n    //\r\n}\nИзменение мета-данных лобби\nКак говорилось ранее, мета-данные нужны для хранения какой-либо игровой информации о лобби: название карты, режим игры, минимальный уровень и т. д. Изменять мета-данные может только владелец лобби. Для быстрой проверки владения лобби можно использовать такой метод:\npublic bool IsLobbyOwner() => SteamUser.GetSteamID() == current_lobby_owner;\nДля создания или изменения мета-данных используется этот метод:\nSteamMatchmaking.SetLobbyData(current_lobby_id, key, value);\nКак понятно из кода, метод \nSetLobbyData\n работает по стандартной схеме ключ-значение. Для всех остальных участников лобби есть отдельный аналогичный метод \nSetLobbyMemberData\n.\nКак только данные будут отосланы у всех клиентов вызовется метод \nOnLobbyDataUpdate\n. Новые игроки, которые только вошли в лобби, будут получать сразу новые значения мета-данных.\nПримечание. Перед отправкой данных происходит небольшая задержка. Несколько изменённых подряд мета-данных будут объединены и отправлены одним пакетом.\nЧтобы удалить мета-данные, используйте:\nSteamMatchmaking.DeleteLobbyData(current_lobby_id, key);\nНе смешно? А здесь смешно: \n@ithumor\nUnity\n, \nРазработка игр\nТакже рекомендуем:\nКонечный автомат: теория и реализация\nКак научиться разрабатывать игры: подробная блок-схема\nКак быстро написать игру для Android на Unity\nЯзыки программирования, на которых были написаны популярные компьютерные игры — пять вдохновляющих примеров",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/steam_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/what-are-python-speed-limits/",
                "title": "Наперегонки со временем: на что способен Python в однопоточных вычислениях?",
                "created_date": "29 октября 2019 в 16:12",
                "body": "Валерий Голенков, разработчик из компании Sibedge\nЯзыки программирования изначально проектируются для решения определённых групп задач, и каждый по-своему удобен и уникален. Известный долгожитель, язык C, используется в разработке системного программного обеспечения. C#, детище компании Microsoft, незаменим при написании десктопных приложений для Windows, а старичок PHP по-прежнему полезен в работе с бэкендом. Неужели за десятилетия существования программирования не было попыток создать единый, универсальный язык, подобный кольцу всевластия, которое правит всеми?\nК сожалению, всё не так просто. Как не существует универсального закона Вселенной, так не существует и языка, способного эту Вселенную описать. Каждый язык программирования, спроектированный с прицелом на решение определённого набора задач, в чём-то сильно уступает остальным языкам. Где проходят границы применимости языков? В поиске ответа на этот вопрос некоторые программисты осуществляют интересные эксперименты. Об одном из таких опытов пойдёт речь чуть ниже.\nРазработчик Валерий Голенков из компании Sibedge более 10 лет пишет приложения на разных языках. Однажды знакомый попросил его помочь с объёмным расчётом систем уравнений для научного проекта. Валерий решил попробовать решить задачу при помощи языка Python, который, согласно \nисследованиям IEEE Spectrum\n, занимает первое место в рейтинге популярности среди программистов, а также активно используется для научных расчётов в составе пакета Anaconda.\nСлишком много данных\nВот так выглядят исходные системы уравнений:\nПусть вас не пугает массивность систем — даже начинающий программист сможет перевести эти формулы в код. Но здесь, прямо как в старом анекдоте, есть один нюанс: каждое последующее вычисление функций зависит от предыдущего. Это значит, что распараллелить процесс не получится и считать всё придётся последовательно. Ситуация усугубляется ещё и тем, что значение функций нужно рассчитать на временном отрезке протяжённостью в 10 дней с частотой в 1 наносекунду. Ядерная физика — это вам не шутки. 1 миллиард вычислений в секунду по четырём значениям с плавающей точкой и 864 триллиона вычислений в общей сложности.\nDevOps/Linux-инженер\n«КРОК», Москва, от 100 000 до 250 000 ₽\ntproger.ru\nВакансии на tproger.ru\nВсе эти вычисления требуются для изображения различных временных участков на графике, что позволит учёным оценить поведение системы. Назревает вопрос: как системе управления базами данных не захлебнуться от такого огромного потока информации? Решение было найдено быстро. Раз системы меняются по очереди, в базу можно сохранять только пограничные значения режимов, при необходимости рассчитывая промежуточные данные на ходу. При таком подходе процесс можно будет частично распараллелить, передавая на потоки отдельные временные промежутки.\nПервые расчёты\nКак пелось в одной небезызвестной песне: «В жизни важен первый шаг». Таким шагом на пути к решению нашей задачи является черновой вариант программы, созданный для примерной оценки времени расчёта. В нём системы уравнений реализованы как функции языка (в листинге ниже приведён фрагмент с расчётом второй системы). На вход они получают четыре рациональных числа (x, y, z, t), а обратно возвращают три (x, y, z).\ndef calculate_pause(data: Tuple4float) -> Tuple3float:\r\n\tx, y, z, t = data\r\n\texp_lmbt = exp(-Consts.L * t)\r\n\ty_n = y * exp_lmbt\r\n\tz_n = z + y_n * (1 - exp_lmbt)\r\n\r\n\treturn x, y_n, z_n\r\n\nНачальные значения функций, длительность расчёта и прочие константы будем хранить во внешнем файле формата JSON и загружать его при запуске в статическое поле класса настроек с помощью статического же метода. Для удобства упростим обращение к полям в классе настроек при помощи метакласса. В функции \nmain\n создадим основной цикл с управляющей переменной \nmode\n. Эта переменная будет хранить информацию о том, по какой системе в данную итерацию считать значения функций. Здесь же производится вызов расчёта функций. Easy!\nclass MetaSettings(type):\r\n    \"\"\"\r\n    Поиск параметра по названию\r\n    \"\"\"\r\n\tdef __getattr__(cls, item):\r\n   \t ...\r\nclass Settings(metaclass=MetaSettings):\r\n\tconf = {}\r\n\r\n\t@staticmethod\r\n\tdef load(filename=config_path):\r\n   \t \"\"\"\r\n   \t Загружает настройки из JSON\r\n   \t \"\"\"\r\n   \t...\r\n\r\nfor t in arange(t0, t_max, Settings.disc):\r\n    x, y, z = mode_functions[current_mode]((x, y, z, t))\r\n    current_mode_length -= Settings.disc\r\n\r\n    if current_mode_length <= 0:\r\n   \t current_mode = Mode.IMPULSE if current_mode == Mode.PAUSE else Mode.PAUSE\r\n   \t current_mode_length = mode_lengths[current_mode]\r\n\nСчитает наша программа отлично, но медленно. На обработку отрезка в \n0.1 секунды\n уходит \n338.19 секунд\n реального времени. Внезапно наступает осознание того, что до конца расчёта десятидневного отрезка руководитель проекта может не дожить. Ведь окончания процесса ему придётся ждать более \n90 лет\n. Не будем изобретать машину времени, а вместо этого начнём оптимизировать программу.\nНачинаем оптимизацию\nПоработаем со структурами и алгоритмами. Когда накидываешь код вслепую, обычно рассматриваешь структуры с точки зрения удобства их использования. В нашем случае — это хранение всех настроек программы в модифицированном классе \nSettings\n. Однако, если в Python нужен быстрый доступ к некоторым настройкам, лучше рассмотреть вариант их раздельного хранения в структурах с быстрым доступом. Например, определённые константы для расчёта можно сохранить в \nnamedtuple\n — immutable (read-only или неизменяемом) контейнере, или использовать самодельный класс с \n__slots__\n как mutable (изменяемый, расширяемый). Причём второй в некоторых случаях лучше первого, так как специфика \n__slots__\n разрабатывалась для экономии памяти.\nЧто это такое? Это статическое поле класса, в котором содержится список его атрибутов. Визуально просто, но сложно внутри. Если в классе содержится это поле, то все описанные атрибуты класса помещаются CPython в массив фиксированного размера, обращаться к которому будет намного быстрее. Минус такого подхода — больше вы не сможете присваивать другие параметры объектам данного класса. Но в нашем случае скорость важнее.\nclass Foo:\r\n    __slots__ = ['a', 'b']\r\n\r\nboo = Foo()\r\nboo.a, boo.b = 1, 2\r\nboo.c = 2 # AttributeError\r\n\r\nFoo = namedtuple('Foo', ['a', 'b'])\r\n\r\nboo = Foo(1, 2)\r\nboo.b = 3 # AttributeError\r\n\nМы активно используем в функциях класс \nSettings\n для получения констант расчётов. Давайте вынесем все необходимые константы в структуру \nnamedtuple\n, которую мы и будем передавать функциям в качестве аргумента вместо класса \nSettings\n.\nConsts = namedtuple('Consts', ['L', 'F', 'S1', 'S2', 'S3'])\r\n\r\n@classmethod\r\ndef get_consts(cls):\r\n    return Consts(cls.L, cls.F, cls.S1, cls.S2, cls.S3)\nЧто в итоге нам это дало? Продолжительность расчёта отрезка в \n0.1 секунды\n сократилась до \n215 секунд\n. А это уже всего\n 58 лет\n. Закончить эксперимент желательно до выхода на пенсию, поэтому продолжаем играть в оптимизацию.\nМеньше вызовов\nЗадумывались ли вы над тем, как часто вызываются наши функции? В CPython каждый вызов влечёт за собой обращение к методу \n__call__\n объекта функции, который требует времени интерпретатора для запуска. При каждом таком обращении интерпретатор выделяет на стеке место для аргументов, определяет тип функции, выполняет её, а затем очищает стек. На первый взгляд этот набор рутинных операций не кажется таким уж «балластом». Но в нашем случае он выполняется каждую итерацию цикла, что влечёт за собой колоссальные временные затраты.\nПостараемся сократить количество вызовов функций Python в циклах. Для этого перенесём часть цикла внутрь функций: теперь каждая функция производит расчёт не на одну итерацию, а на несколько, вплоть до того момента, когда значения \nx\n, \ny\n и \nz\n потребуется начать считать уже по другой системе уравнений. Раз уж мы стараемся уменьшить объём хранимых расчётных данных, сохраняя лишь пограничные значения, то и функциям достаточно возвращать только последние из них.\ndef calculate_pause(input_dat: Tuple3float, consts: Constants, ranges: Tuple3float) -> Tuple3float:\r\n\tx, y, z = input_dat\r\n\r\n\ty0, z0 = y, z\r\n\tfor t in arange(*ranges):\r\n    \texp_lmbt = exp(-consts.L * t)\r\n    \ty_n = y0 * exp_lmbt\r\n    \tz_n = z0 + y_n * (1 - exp_lmbt)\r\n    \ty, z = y_n, z_n\r\n\treturn x, y, z\nВ это сложно поверить, но время расчёта отрезка продолжительностью в \n0.1 секунды\n резко сократилось до \n25.04 секунд\n! Всего-то \n7 лет\n нужно подождать. Однако если приложить дополнительные усилия, можно добиться ещё более впечатляющих результатов.\nЛокальные переменные\nВоспользуемся ещё одной хитростью. Несмотря на то, что мы добились хороших результатов при использовании \nnamedtuple\n, это ещё не значит, что больше тут оптимизировать нечего. Ради дополнительного прироста скорости имеет смысл извлечь константы (из \nnamedtuple\n) в локальные переменные, ведь это убирает ещё одну функцию-посредника (\n__getitem__\n) при обращении к константам.\ndef calculate_pause(input_dat: Tuple3float, consts: Constants, ranges: Tuple3float) -> Tuple3float:\r\n\tx, y, z = input_dat\r\n\tL = consts.L\r\n\r\n\ty0, z0 = y, z\r\n\tfor t in arange(*ranges):\r\n    \texp_lmbt = exp(-L * t)\r\n    \ty_n = y0 * exp_lmbt\r\n    \tz_n = z0 + y_n * (1 - exp_lmbt)\r\n    \ty, z = y_n, z_n\r\n\treturn x, y, z\r\n\nИ снова уменьшение времени с 25.04 до \n20.56 секунд\n. Конечно, кому-то может показаться, что в сравнении с грамотным проектированием вызовов из предыдущего шага, сокращение на пять секунд не такое впечатляющее. Да только вот при длительных расчётах эти пять секунд могут превратиться в день, два, а то и в целый год! При текущей оптимизации наш расчёт будет длиться менее \n6 лет\n!\nОт интерпретатора к компилятору\nPython — это стандарт языка, по которому существуют его отдельные реализации на C, Java и других языках. Есть даже такой необычный вариант, как Python на Python, или PyPy («ПайПай»). Но это уже не просто интерпретатор, а полноценный JIT-компилятор, на который портированы популярные библиотеки и фреймворки вроде NumPy, SQLAlchemy и Django. Благодаря тому, что байт-код компилируется в машинный код и исполняется процессором, работает это всё ощутимо быстрее, чем на CPython. Попробуем взять наш код и запустить его через PyPy. Что же получилось? Время расчёта интервала в \n0.1 секунды\n снизилось аж до \n3.29 секунд\n! Меньше \n1 года\n понадобится, чтобы завершить процесс.\nЕсли PyPy даёт такой впечатляющий прирост к скорости, то почему разработчики не используют этот компилятор повсеместно? На то есть две причины. Во-первых, он поддерживает далеко не все библиотеки. А во-вторых, для операционных систем Windows существует только 32-разрядная версия компилятора, а это значит, что и библиотеки-зависимости тоже требуются 32-разрядные.\nМожно ещё быстрее\nС помощью всевозможных ухищрений нам удалось достичь впечатляющих результатов. Но есть ещё один способ значительно ускорить расчёт. И способ этот, как ни смешно, — переписать программу на языке C++. Таким образом мы сможем рассчитывать интервал в \n0.1 секунды\n всего за \n0.44 секунды\n, а на весь процесс уйдёт \n44 дня\n.\nИтоги эксперимента\nБез оптимизаций\nКонстанты в namedtuple\nСокращение вызовов\nЛокальные переменные\nPyPy\nC++\n338.19\n215\n25.04\n20.56\n3.29\n0.44\nВ ходе оптимизации нам удалось повысить скорость расчёта \nболее чем в 100 раз\n. И всё же использование низкоуровневого языка C++ в нашем случае всё равно оказалось более эффективным. Делаем вполне предсказуемый вывод: Python не подходит для объёмных однопоточных вычислений. Нужно всегда помнить о рамках применимости языка и грамотно выбирать инструменты для решения той или иной задачи. Оптимизация и поиск обходных путей — очень увлекательный процесс. Но время и силы можно потратить и с большей пользой.\nНе смешно? А здесь смешно: \n@ithumor\nPython\n, \nОптимизация\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nИспользование регулярных выражений в Python для новичков\nБот для Telegram на Python: от первой строчки кода до запуска на Heroku\nPython GUI: создаём простое приложение с PyQt и Qt Designer",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-11-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Golenkov-1-e1572251211713-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1500px\" viewBox=\"0 0 1500 179\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/01.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"447px\" viewBox=\"0 0 447 140\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/02.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1069px\" viewBox=\"0 0 1069 390\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/03.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/quiz/creating-modern-infrastructure-dataline/",
                "title": "Контейнеры и кластеры: сделайте модную инфраструктуру в тесте от Tproger и DataLine",
                "created_date": "29 октября 2019 в 11:19",
                "body": "Как сейчас тестируют и разворачивают веб-проекты? Какие решения принимать при масштабировании проекта? Когда настраивать всё самому, а когда брать готовое решение «под ключ»? Вместе с экспертами из \nDataLine\n ищем ответы на эти и другие инфраструктурные вопросы в небольшом тесте.\nДисклеймер\n Мы знаем, что решения в реальном мире зависят от множества факторов. В этом тесте вам нужно выбирать самые трендовые варианты.\n\n\n\n\n\n\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Скоро загрузится, клянусь своей IDE!';\r\n        }, 5 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Ещё совсем немножко, прям милипусенько...';\r\n        }, 10 * 1000);\r\n\r\n        setTimeout(function() {\r\n            quiz_dont_load.style.display = 'block';\r\n            quiz_dont_load.innerHTML = 'Викторина загружается дольше, чем обычно: попробуйте потанцевать с бубном — отключить AdBlock и перезагрузить страницу :(';\r\n        }, 20 * 1000);\r\n    \n\n\n\nНачать тест\n\n\n\n\r\n        var quiz_data_stringify = \"\";\r\n        var quiz_data = JSON.parse(window.atob(quiz_data_stringify));\r\n        var quiz_template = decodeURIComponent(escape(window.atob('PCVxdWl6LnF1ZXN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHF1ZXN0aW9uLCBpLCBhcnIpIHslPgoKPGRpdiBjbGFzcz0icXVpel9pdGVtIiBpZD0icXVpel9pdGVtXzwlPXF1ZXN0aW9uLmlkJT4iIGRhdGEtbnVtPSI8JT1pJT4iIGRhdGEtaWQ9IjwlPXF1ZXN0aW9uLmlkJT4iPgoKICAgIDxkaXYgY2xhc3M9InF1ZXN0aW9uIj4KICAgICAgICA8JT1xdWVzdGlvbi50ZXh0JT4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImFuc3dlcnMiPgogICAgICAgIDwlcXVlc3Rpb24uYW5zd2Vycy5mb3JFYWNoKGZ1bmN0aW9uKGFuc3dlciwgbnVtLCBhcnIpIHslPgoKICAgICAgICA8ZGl2IGNsYXNzPSJhbnN3ZXIiIGRhdGEtbnVtPSI8JT1udW0lPiIgZGF0YS1pZD0iPCU9YW5zd2VyLm9wdGlvbnMuaWQlPiI+CgogICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9Imljb24iIGNsYXNzPSJxdWl6X2ljb24iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InF1aXpfY29udHJvbCBhbnN3ZXJfPCU9cXVlc3Rpb24udHlwZSU+Ij5PPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnRlbGxvLWljb24iIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48L3NwYW4+CiAgICAgICAgICAgIDwvc3Bhbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFuc3dlcl90ZXh0IiBkYXRhLXJvbGU9ImFuc3dlcl90ZXh0Ij4KICAgICAgICAgICAgICAgIDwlPSBhbnN3ZXIub3B0aW9ucy50ZXh0ICU+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3IiPjwlPSBhbnN3ZXIub3B0aW9ucy5kZXNjciAlPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXJvbGU9InBlcmNlbnQiIGNsYXNzPSJwZXJjZW50Ij48c3BhbiBjbGFzcz0iaWNvbi1jaGFydC1iYXIiPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICA8JT1hbnN3ZXIucGVyY2VudCAlPiU8L3NwYW4+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8JX0pOyU+CgogICAgPC9kaXY+CgogICAgPGJ1dHRvbiBjbGFzcz0icXVpel9idXR0b24iIGRhdGEtcm9sZT0ibmV4dCIgZGF0YS1jdXJyZW50PSI8JT1pJT4iIGRhdGEtbmV4dD0iPCU9KGkrMSklPiI+0JTQsNC70YzRiNC1PC9idXR0b24+Cgo8L2Rpdj4KPCV9KTslPgoKCjwvZGl2Pgo=')));\r\n        var quiz_result_template = decodeURIComponent(escape(window.atob('')));\r\n        if (quiz_data.code_mode) {\r\n            var head = document.head || document.getElementsByTagName('head')[0];\r\n            var script = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.defer = true;\r\n            script.src = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.js?x84192';\r\n            head.appendChild(script);\r\n            link = document.createElement('link');\r\n            link.rel = 'stylesheet';\r\n            link.type = 'text/css';\r\n            link.href = 'https://cdn.tproger.ru/wp-content/themes/bliss/assets/plugins/prism/prism.css?x84192';\r\n            head.appendChild(link);\r\n        }\r\n    \n\n\n\n\nDevOps\n, \nВеб-разработка\n, \nПартнёрский материал\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Korabl_ishodnik-2-880x308.jpg",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/experts/is-go-worth-learning/",
                "title": "Стоит ли изучать Golang и если да, то как — отвечают эксперты",
                "created_date": "28 октября 2019 в 14:32",
                "body": "Go сравнительно молодой язык, и многие программисты, как новички, так и опытные, могут сомневаться в целесообразности его изучения. Стоит ли его изучать и если да, то как? Узнаем у экспертов.\nЕвгений Потапов\n, \nгенеральный директор ITSumma\nВ настоящее время, Go — один из самых популярных языков программирования, применяющийся как в web-разработке, так и в системном программировании. Его главные преимущества: строгая типизация, широкие возможности стандартной библиотеки языка (работа с HTTP, HTML, JSON…), а также высокая производительность.\nЗначительная часть ПО, связанная с современными web-архитектурами, написана на Go: Docker, Kubernetes, Prometheus… Также Go нашел своё применение в разработке микросервисных приложений как язык, который позволяет быстро и удобно писать отдельные компоненты распределённой системы.\nНачать обучение этому языку мы, естественно, рекомендуем с самого известного туториала: \na Tour of Go\n. Затем выбор огромный — существует множество литературы, интернет-порталов, сообществ… Но не забывайте: лучший учебник — это исходный код. 🙂 \n29\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\n Рейтинг полезности ответа: \n29\nПовысить\nПонизить\nАртем Арефьев \n, \nведущий разработчик компании MediaSoft\nНа данный момент Go является одним из тех языков, которые стремительно набирают популярность. Этот язык относительно молодой, но, несмотря на это, он очень хорош. Он прекрасно сочетает в себе лаконичность и хорошую производительность, что позволяет создавать высоконагруженные приложения в меньшие сроки.\nКонечно, у него есть свои недостатки, но в своём большинстве они не очень критичные:\nЛично мне не очень нравится обработка ошибок. В отличие от привычного использования try/catch во многих языках, в Go постоянно приходится делать так:\n\nfunc openFile() (*os.File, error) {\r\n     f, err := os.Open(\"filename.ext\") \r\n     if err != nil {\r\n          log.Fatal(err)\r\n          return nil, err\r\n     } \r\n     return f, nil\r\n}\r\n\nА затем обрабатывать этот \nerr\n во всех функциях, вызывающих \nopenFile\n. Хотя наверняка найдутся и те, кому подобная обработка ошибок придётся по вкусу. 🙂\nБолее серьёзным недостатком, на мой взгляд, является далеко не самая удобная работа с зависимостями из-за отсутствия в Go централизованного репозитория с пакетами. Существуют инструменты, упрощающие работу с зависимостями, но всё же это менее удобно, чем работа с пакетными менеджерами других языков.\nМожно вспомнить ещё некоторые недочёты Go, но все они перекрываются его достоинствами:\nИсходный код компилируется в бинарный файл, что значительно повышает производительность вашего приложения. Также это ОЧЕНЬ удобно при деплое приложения — нет нужды предварительно устанавливать необходимые зависимости, достаточно просто перенести исполняемый файл на вашу площадку и запустить его.\nGo довольно прост для изучения — он имеет понятный синтаксис и хорошую документацию, которая читается без большого труда и не оставляет после себя много вопросов.\nОсобенно хочется выделить многопоточность в Go — она великолепна! Горутины (goroutines) и каналы (channels), инструменты Go для работы с потоками несут в себе одновременно легкость и практичность, а разработчику они дарят, в основном, только положительные эмоции. 🙂\nЕсли вы хотите изучать Go, то для начала вам обязательно нужно ознакомиться с материалами на официальном сайте. Также существует много других ресурсов, где рассказывается об основах языка, но в большинстве случаев там вы обнаружите всё то же самое, что и на официальном сайте, разве что написано это будет другим языком. Будет не лишним прочесть книги по Go, в которых можно увидеть примеры построения приложений. Дальнейшее обучение происходит ровно так же, как и с любым другим языком — ставьте для себя сложные и интересные задачи, гуглите, можете попробовать переписать ваше приложение, скорость работы которого вас смущает, на Go.\nЯ думаю, что стоит потратить своё время на изучение Go. Он востребован, о чём говорит большое количество вакансий для Go-разработчиков. Также я заметил, что многие компании частично переходят, например, с Python на Go в целях повышения производительности. Так что, если вы устроитесь разработчиком на Python, то не исключено, что вы столкнетесь с Go. 🙂 Плюс ко всему — разработкой Go занимается компания Google, что в каком-то смысле даёт веру в дальнейшее успешное развитие языка.\n30\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n30\nПовысить\nПонизить\nИльназ Гильязов\n, \nэксперт курса «Профессия веб-разработчик» университета digital-профессий Нетология\nЯзык программирования Go имеет смысл изучать как начинающим специалистам, так и разработчикам с опытом работы.\nЕсли вы начинающий разработчик, то Go прекрасно подойдёт для старта:\nв нём простой и немногословный синтаксис;\nстрогие и единообразные правила написания кода;\nвам не нужно заучивать сотни хитроумных вариаций написания того же самого кода, но с более коротким синтаксисом.\nФактически, за достаточно короткое время вы получаете промышленный инструмент для реализации своих идей. В первую очередь мы говорим о бэкенде (серверная часть приложений) — если это совпадает с вашими потребностями, то обязательно попробуйте.\nЕсли вы программист с опытом, то изучать Go можно как минимум по двум причинам:\nЭтот язык приносит некоторые концепции и подходы, позволяющие нам эффективнее строить и саму разработку, и работу с конкурентностью. Это связано с тем, что задача современного софта — большое количество сетевых операций, желательно в неблокирующем режиме (если мы говорим о бэкенде). Сами же концепции не новы, например идея легковесных потоков, которые в Go называются goroutines, существует достаточно давно. Эти идеи находят отражение и в других языках (корутины в Kotlin), поэтому к ним стоит присмотреться.\nВсё больше компаний используют Go для миграции с так называемых традиционных языков для оптимизации своих сетевых приложений, поэтому вы можете перенять этот опыт и добиться снижения расходов, увеличения производительности и т. д.\nКак и где изучать Go\nИнформация устаревает достаточно быстро, поэтому книги я рекомендую только текущего года выпуска, либо те, которые освещают основы языка, как и видео-уроки. Если хочется узнать, как всё происходит на самом деле, то самое лучшее — это живые курсы от практиков. Да, это будет стоит денег, и курсы курсам рознь по уровню качества и охвата, но за короткий период вы получите концентрированную выжимку информации и практические навыки.\nНачать стоит с базовых вещей: основы синтаксиса и стандартной библиотеки, а затем уже решать практические задачи с использованием СУБД, веба и всего остального.\nПри этом у Go есть свои преимущества и недостатки.\nПреимущества\n: простой синтаксис, богатая стандартная библиотека, производительность, продуманные решения в части конкурентности, развёртывания, тестирования.\nНедостатки\n: иногда не хватает возможности написать что-то короче («продвинутых конструкций»), не хватает ряда возможностей в самом языке (generic’и), но их обещают добавить.\nНе стоит думать, что Go — это «убийца всех языков». Ни Java, ни C++, ни остальные языки никуда не исчезнут, но у Go своя ниша: системные приложения, утилиты автоматизации, сетевые сервисы и бэкенд.\nНа рынке труда в вакансиях на Go достаточно часто пишут «желание изучить и перейти на Go», т. е. специалистов не хватает и компании готовы доучивать их самостоятельно.\nИз задач в больших компаниях наиболее частая — это перевести часть сервисов с другого языка на Go, с целью сделать процессы быстрее/производительнее/меньше потреблять железа. Поэтому работа точно будет интересной, т. к. задачи оптимизации заставляют вас прокачивать различные навыки: нагрузка, мониторинг и т. д. В небольших и среднего размера компаниях, как я уже говорил, это бэкенд. \n25\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n25\nПовысить\nПонизить\nВасилий Ерешко\n, \nразработчик в компании «Примавера»\nЕсли вы планируете своё профессиональное будущее в бэкенд-разработке, то язык Go изучать стоит однозначно.\nЛучше всего начинать с книги «Язык программирования Go» от авторов языка, а также онлайн-туториала «\nA tour of go\n». Если опыта программирования нет вообще, неплохо ещё будет посмотреть курс от Mail.ru на Coursera.\nПреимущества языка заключаются в простоте изучения, мощном встроенном инструментарии, строгой типизации языка, быстрой компиляции, мощном и очень простом параллелизме. В двух словах на этом языке можно быстро разработать прототип и запустить его в эксплуатацию, и если всё хорошо — очень долго не думать об оптимизации и масштабировании, потому что компиляция в машинный код изначально обладает весьма похвальной производительностью.\nНедостатки в основном кроются в излишней простоте языка, но это обещают исправить в следующих версиях.\nНа рынке труда Go является одним из самых востребованных языков для бэкенд-разработки и популярность его растёт год от года. В настоящее время даже IT-тяжеловесы, такие как Mail Group или Yandex, постепенно переводят свою инфраструктуру на Go. \n20\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n20\nПовысить\nПонизить\nАлександр Пантелеев\n, \nразработчик в Kodix Auto\nGo язык молодой и его будущее неоднозначно. Это будет ясно в ближайшие три года. Закрепится ли он в своей нише или останется одним из многих. Если вы не знакомы с программированием в принципе, то выбрать лучше что-нибудь более фундаментальное.\nВ настоящее время специалисты, знающие PHP и Go, востребованы на рынке.\nПривязываться к языку — дилетантство. Хороший программист знает несколько языков и легко учит новые. Если фундаментальные знания разработки у специалиста крепкие, он может писать хорошо на любом языке. Поэтому начинающим программистам следует скорее определяться с направлением деятельности: web, native, mobile, micro и т. д. Изучить однозначного лидера в направлении, а потом задумываться о других языках. \n5\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nИван Новиков\n, \nпреподаватель Московской школы программистов, программист-стажер в Google\nТри главных преимущества Go, которые объясняют его популярность: простота, стандартная библиотека и то, что он даёт возможность для параллельного, или конкурентного, программирования. Go был разработан в Google как альтернатива С и С++. Язык задумывался как компилируемый язык, не требующий интерпретатора (как, например, Python). Его можно собрать у себя на компьютере под практически любую архитектуру (MILS или ARM), отправить на сервер и запустить. У Go высокая скорость и простой синтаксис, который может выучить за один месяц даже начинающий.\nЯзык Go достаточно читаем. В библиотеке есть некоторые «фишки», которые можно использовать в работе над разными проектами. Там есть всё, что связано с сетями, благодаря чему можно не использовать API LINUX. На Go написано много современных вещей: Docker, Project Mobi,система кластеризации Kubernetes, система мониторинга Prometheus, много консольных утилит. У языка хорошая поддержка параллельных вычислений.\nЕщё одно преимущество — пакетный менеджер. У Go есть система автодокументирования кода, внутренний профилировщик, внутренняя система написания тестов, то есть всё то, что в других языках программирования нужно было бы добавлять.\n\nСейчас Go очень популярен: на нём мало кто умеет писать, а вакансий — много. Go является пятым официальным языком в Google после Python, Java, С++ и JavaScript.\nGo используют такие IT-корпорации, как Яндекс, ВКонтакте, Mail, Avito. Это красивый, быстрый и удобный язык, который позволяет писать сложные программы.\n33\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n33\nПовысить\nПонизить\nНикита Меркулов\n, \nLead Software Engineer в EPAM\nGo — очень дружественен к новичкам, но моё мнение — лучше иметь и другие технологии в запасе. И вот почему: Go — это, что называется, opinionated stuff — дизайн языка идёт на достаточно серьёзные ограничения, и зачастую выбор принимается не сообществом, а разработчиками самого языка. И понять причину, почему то или иное решение принято, может оказаться нелегко, если опыт не позволяет найти примеры из прошлого. Многие решения в дизайне языка приняты для того, чтобы максимально избежать двусмысленности и неопределённости, и по-настоящему это можно оценить только тогда, когда уже есть какой-то опыт.\nНа мой взгляд, Golang — это, если позволите, новый Java. Это вполне себе зрелый язык программирования для написания enterprise-приложений. Многих коллег с ООП-бэкграундом смущает отсутствие классов как таковых, однако это не мешает пользоваться знакомыми практиками, SOLID например. Сейчас ситуация такова, что если вы видите в проекте Golang, то с вероятностью 99 % это значит, что Go взяли на борт ради микросервисов. В первую очередь потому, что «microservices is new black», хотя существуют и другие причины. Например, многие широко используемые инструменты уже написаны на Go: Docker, Kubernetes, HashiCorp projects (Consul, Vault и т. д.). Однако я знаю компании, которые вполне обоснованно выбрали Go в качестве языка программирования, и при этом разрабатывают решения с монолитной архитектурой.\nНачать изучение Go стоит с ресурсов «\nTour of go\n» и «\nGo by example\n». Если вы не против прочитать книгу, то «Язык программирования Go» за авторством Алана Донована и Брайана Кернигана вам в помощь. После этого рекомендую зайти на \nофициальный блог Go\n и \nблог Дейва Чейни.\n Многие вопросы отпадут, если вы начнете своё знакомство с этими ресурсами со статей «\nErrors are values\n» и «\nFunctional options\n».\nЧто стоит изучить помимо самого Go? Помимо самых стандартных вещей в духе реляционных баз данных, настоятельно рекомендую познакомиться с Docker, Swagger, gRPC. Docker вам понадобится почти 100 % (это утверждение в целом справедливо и не для Go-проектов). А вот со Swagger, gRPC и прочими подобными контрактами ситуация чуть интересней. В Go нет больших фреймворков в духе Spring/RoR, есть нишевые фреймворки, которые существенно облегчат ту или иную задачу, не более. Однако здесь на помощь приходит кодогенерация. Помимо генерации всяких enum-ов, вы можете сгенерировать как клиент, так и сервер, используя Swagger, protobuf или GraphQL, то есть генератор выступает в роли фреймворка. Вам останется только имплементировать сами хэндлеры (Handler), так называемые обработчки. Это позволяет уделять больше внимания коммуникации приложений, не фокусируясь на возможностях и недостатках языках. Это не серебряная пуля, конечно, но работает достаточно хорошо. Имплементировать свой суперклассный zero-allocation-роутер — это всегда весело, но куда веселей поднимать программы.\nЧто касается ситуации на рынке труда: пару лет назад 8 из 10 вакансий по Go были от криптостартапов, общее число вакансий не впечатляло. Сейчас Golang-вакансий гораздо больше, но почти всегда требуется опыт работы с другими языками программирования — как раз по причине переписывания с языка X на Go. Мой личный топ вспомогательных языков – PHP, Java, Ruby. Можно встретить и чисто Go-вакансии, их появляется всё больше, что не может не радовать.\nGolang относительно молодая технология, потому мир enterprise с опаской принимает её, но мне кажется, это неминуемо произойдёт.\n50\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n50\nПовысить\nПонизить\nАртем Галонский\n, \nтехнический директор «БюроБюро»\nИзучать Go определённо стоит. Этот молодой, современный язык сочетает высокую производительность с большим количеством инструментов для веб-разработки (Go создавался с учётом актуальных тенденций в этой области), поэтому он отлично подходит для создания высоконагруженных и сложных веб-проектов.\nОдно из главных преимуществ Go — высокая скорость при умеренном потреблении ресурсов. Инструменты многопоточности — горутины — эффективно используют вычислительную мощность многоядерных архитектур, значительно повышая скорость выполнения процессов.\nGo хорошо подходит для командной разработки: у него минималистичный синтаксис, строгий подход к форматированию кода и множество удобных линтеров, помогающих стандартизировать и упорядочивать код, что упрощает взаимодействие разработчиков в проекте. А ещё Go достаточно лаконичный, и это повышает темпы работы, так как для создания приложения требуется банально меньше символов.\nНемаловажно и то, что этот язык сейчас достаточно популярен, у него большое развитое сообщество, и в сети много информации о решении самых различных задач на нём.\nGo нельзя назвать сложным, но в силу своей специфики он может вызвать затруднения у некоторых разработчиков. Тем, кто до этого писал на скриптовых языках, скажем, на PHP, в Go многое покажется непривычным, а некоторые вещи, например горутины, потребуют существенно изменить свой взгляд на написание кода. Также могут возникнуть трудности у программистов, которые не привыкли к языкам со статической типизацией.\nИзучение Go стоит начать с его спецификации на официальном сайте (она, к слову, довольно компактная и содержит много примеров), после чего можно подобрать учебник в соответствии со своим уровнем. Книг по Go очень много, есть варианты как для начинающих, так и для продвинутых разработчиков. А для дальнейшего освоения языка на практике можно использовать связку «курсы по Go + параллельная разработка своего пет-проекта».\n7\nОтвет эксперта\n2019-10-28T14:32:34+03:00\n\nРейтинг полезности ответа: \n7\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, стоит ли учить Go и если да, то как?\nЕсли вы не занимаетесь или не собираетесь заниматься бэкендом или системным программированием, то, наверное, лучше изучить что-нибудь другое. Кроме того, если вы только начинаете заниматься программированием, то Go, возможно, будет не лучшим выбором в качестве первого языка, так как во многих вакансиях требуется знание дополнительного языка, чтобы переписать проект с него на Go. А так, если вы занимаетесь бэкендом, вам нравятся лаконичные и производительные языки, то вы по адресу. К тому же, вакансий с Go становится всё больше, а хороших специалистов не так много.\nРазобраться с основами языка помогут такие ресурсы, как «\nTour of go\n» и «\nGo by example\n». Книг по Go хватает как для начинающих, так и для продвинутых разработчиков; можете обратить внимание на «Язык программирования Go» от авторов языка. Также не будет лишним посетить \nофициальный блог Go\n и \nблог Дейва Чейни\n. Ну и не забывайте про практику, само собой.\n100500\nЛучший ответ\n2019-10-28T14:32:34+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nGo\n, \nОбучение программированию\n, \nЯзыки программирования\nТакже рекомендуем:\nБесплатные материалы для программистов\nХочу научиться программировать на Python. С чего начать?\nРассказываем, что нужно выучить в первую очередь, где брать знания и интересные задачи для тренировок. \nИсчерпывающий список книг для знакомства с C++\nБесплатные онлайн-игры, которые обучат вас программировать",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-9-cover-icon-1.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/11/Evgenij-Potapov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/45000_75175b2a_g8vrmK9G_1570365589-e1571999383640-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/08/Gilyazov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/88579_3b5fa8f6_akXenNEp_1569427068-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/88512_20e9c2bd_XMO33nyK_1569329855-e1570001481881-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/novikov_440_440_2_80-e1572008510332-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Nikita-Merkulov-e1572080103727-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/45000_f6b9baf3_aIiAeQbz_1564674170-e1565198753510-150x150.jpg"
                ]
            }
        ]
    },
    {
        "page": 3,
        "url": "https://tproger.ru/page/3/",
        "posts": [
            {
                "url": "https://tproger.ru/articles/floppotron-what-is-it-and-how-to-make/",
                "title": "Новая жизнь дискет: что такое флопотрон и как его сделать",
                "created_date": "27 октября 2019 в 14:32",
                "body": "Многие ли помнят флоппи-диски? История похоронила гибкие носители ещё в 90-х. Единственное, что осталось от них — это дизайн иконки «Сохранить». Дискеты не могли идти в ногу с технологиями — объёмы программ и данных стремительно увеличивались. 2,88 МБ данных, которые помещались на стандартные 3,5-дюймовые дискеты, стало не хватать. Потребители перешли на оптические носители. Спустя десятилетия пользователи забыли о дискетах, а флоппи-дисководы стали чем-то вроде посуды в серванте. Но только не для польского инженера Павла Задрожняка. В далёком 2011 году он собрал устройство, состоящее из двух флоппи-приводов и назвал его соответствующе — «Floppotron». На нём он «сыграл» Имперский Марш. Ролик завирусился и Павел двинулся дальше.\nВ 2016 году инженер представил миру вторую версию своего музыкального инструмента. Его комплектация стала более внушительной: 64 флоппи-дисковода, 8 жёстких дисков и 2 сканера. На своём YouTube-канале Павел исполнил более сотни популярных песен.\nОн вдохновил многих людей. Кто-то собирал несложные флопотроны из нескольких приводов, а кто-то пробовал извлекать звуки из более нестандартных для флопотрона устройств. Например, канал \nDevice Orchestra\n создаёт мелодии с помощью платёжных терминалов, зубных электрощёток и даже паровых очистителей.\nFloppotron v2 — детище польского инженера Павла Задрожняка\nПринцип звучания\nВ флоппи-приводах, сканерах или же платёжных терминалах источник звука один — шаговый двигатель. В случае с флоппи-приводом он перемещает считывающую головку. При работе двигателя издаётся звук. Изменяя скорость шагового двигателя можно изменять частоту извлекаемого звука, т. е. ноты. Как правило, последовательность этих нот достаётся из midi-файла.\nУправление флоппи-приводом\nУ привода два разъёма — один для питания («mini-molex») и второй для управления (FDD). Запитывается дисковод сразу от 5В и 12В. Отличным решением будет использовать компьютерный блок питания. При работе с ним не забудьте замкнуть контакт PS_ON с контактом COM, чтобы \nвключить его\n. Однако, подойдёт любой другой БП с такими же напряжениями. Главное, чтобы хватало выходного ампеража.\nРазъём «mini-molex» имеет два контакта земли посередине и контакты 12В и 5В по бокам. Контакт 12В расположен слева и нередко с его стороны имеется «ключ», не дающий присоединить штекер не той стороной.\nХоть разъем FDD имеет \nпугающее количество контактов\n, оттуда понадобится всего два — 18 и 20.\n18 контакт называется «Stepper Direction», и по нему устанавливается направление движения пишущей головки. 20 контакт называется «Step Pulse» и он уже непосредственно «толкает» шаговый двигатель.\nПомимо этого нужно разрешить работу двигателя. Для этого нужно замкнуть на землю 12 контакт разъёма «Drive Select B». Это можно сделать либо джампером (перемычкой) между этим контактом и нижним (11 — землёй), либо непосредственно присоединить 12 контакт к проводу земли. Варвары же могут попросту загнуть этот контакт вниз, чтобы тот соприкасался с нижним контактом.\nСхема подключения к флоппи-приводу\nКонтроллер\nУправлять флопотроном можно со всего, что только можно запрограммировать: Arduino, Raspberry, STM. Подойдут даже обычные микроконтроллеры AVR или PIC. Главное, чтобы контроллер работал на 5-вольтовой логике, иначе нужно будет использовать конвертер логических уровней. В этой статье будет использоваться самая популярная модель платформы Arduino — Uno.\nКоммутация\nДля простого флопотрона кроме самих флоппи-дисководов и контроллера понадобятся только соединительные провода. Всего к приводу должно идти 5 проводов: 2 управляющих, 12В, 5В и земля.\nПодключение проводов к флоппи-приводу\nОбратный конец управляющий проводов будет подключаться к Uno. Остальные же провода (т. е. шины питания) нужно будет подключить к блоку питания. Если дисководов не слишком много, отличным решением будет подключить их через клеммный зажим. Провода от дисководов будут вкручиваться с одной стороны, провода от блока питания — с другой. В таком случае всегда можно будет без труда запитать новые дисководы, ничего при этом не распаивая.\nОдин из способов подключения питания флоппи-приводов\nДополнительными проводами нужно отвести шину питания 5В и землю и подключить их к пинам платы Uno.\nКоммутация проводов с платой Uno\nПрограммная часть\nЕсли вы решили использовать Arduino, то в первую очередь нужно установить Arduino IDE. Также стоит помнить, что для работы с клонами Arduino нужно установить соответствующий драйвер CH340G. Обо всём этом можно почитать \nв нашей статье\n.\nВначале стоит проверить флоппи-приводы на работоспособность. Для этого можно запрограммировать контроллер на какие-нибудь простые операции. Например такие:\nint step = 2, direct = 3; // Управляющие пины\r\n\r\nvoid setup() {\r\npinMode(step, OUTPUT);\r\npinMode(direct, OUTPUT);\r\n}\r\n\r\nvoid loop() {\r\nfor(int i = 0; i < 80; i++){ //Прогоняем считывающую головку по всей длине\r\ndigitalWrite(step, HIGH);\r\ndelay(10);\r\ndigitalWrite(step, LOW);\r\n}\r\n\r\ndigitalWrite(direct, !digitalRead(direct)); // Меняем направление движения\r\n}\nЭтот скетч должен заставить флоппи-привод, подключённый к первому каналу (2 и 3 пин), двигать считывающую головку равномерно по всей рабочей длине. Как только головка подходит к концу, направление движения инвертируется и цикл повторяется.\nПосле того, как вы проверите все приводы, можно приступить к созданию программной части для флопотрона или просто использовать уже готовое решение.\nMoppy — продвинутый контроллер для флопотрона. Он состоит из двух частей: прошивки для Arduino, которая непосредственно управляет флоппи-приводами, и компьютерной программы, которая посылает команды на контроллер по USB-кабелю.\nСкачиваем последний релиз программы. Первый архив содержит скетч для Arduino, второй — программу для ПК.\nПримечание\n Для работы прошивки нужна библиотека «TimerOne». Её можно найти в Менеджере Библиотек. Для этого откройте Скетч→Подключить Библиотеку→Управлять Библиотеками. Через поисковую строку открывшегося Менеджера Библиотек можно найти необходимую библиотеку «TimerOne».\nПосле установки библиотеки прошивка готова к работе. Осталось выбрать порт, к которому подключена Uno, и прошить её.\nПервый привод подключается к 2 и 3 пину платы («Stepper Direction» и «Step Pulse» соответственно). Следующий привод к 4 и 5, потом к 6 и 7 и так далее. К Uno можно подключить до 9 приводов (до пина A5). После подключения всех флоппи-приводов можно включать блок питания.\nВоспроизведение\nВ папке с программой для ПК нужно запустить файл bin/MoppyControlGUI.bat. В открывшемся интерфейсе важны только два окна: окно выбора файла и окно выбора порта.\nОстаётся лишь выбрать порт, к которому подключена Uno, загрузить midi-файл и нажать на кнопку воспроизведения. Однако, это не весь функционал Moppy. В этой программе, к примеру, можно воспроизводить звук напрямую от midi-устройств.\nХоть флоппи-приводы и способны извлекать из себя звук, их громкости хватает не всегда. Эту проблему можно решить двумя способами. Первый — дублирование одного midi-канала несколькими приводами. В таком случае флопотрон обретёт тембр для каждого канала. Второй же способ более экономичен — каждый привод можно поставить на какой-нибудь резонатор. Подойдёт обычная картонная коробка. В таком случае громкость даже от одного привода значительно увеличится.\nОткуда брать midi-файлы?\nЕсть несколько источников:\nНайти готовый midi-файл нужной песни. Однако, шанс того, что файл сразу подойдёт для флопотрона, очень мал. Скорее всего, его нужно будет редактировать.\nСпециальные программы для midi-файлов. Например MidiEditor. В ней вы сможете как создать новый файл, так и отредактировать существующий (поменять местами или объединить дорожки).\nНотный редактор. Например Guitar Pro. Для него есть множество готовых композиций, которые с лёгкостью можно экспортировать в midi-файл. Обратите внимание, что каждый канал в midi-файле соответствует отдельному подключённому флоппи-приводу. Обычно к одной нотной дорожке в Guitar Pro подвязываются сразу два канала. Привязку каналов к дорожкам, естественно, можно редактировать.\nИспользовать готовые midi-файлы, созданные специально для флопотрона. Например в \nэтом репозитории\n, или в документах \nэтой группы\n.\nНе смешно? А здесь смешно: \n@ithumor\nDIY\n, \nHardware\nТакже рекомендуем:\nБот для Telegram на Python: от первой строчки кода до запуска на Heroku\nВ чем разница между CPU и GPU?\nЧто это за железка? Угадайте устройство по его силуэту\n«Хочу как Дуров»: пишем простой мессенджер",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/floppy_disk_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200px\" viewBox=\"0 0 1200 675\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/floppotronv2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"858px\" viewBox=\"0 0 858 620\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/floppotron-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"857px\" viewBox=\"0 0 857 641\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/floppotron1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"855px\" viewBox=\"0 0 855 642\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/floppotron2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"859px\" viewBox=\"0 0 859 642\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/floppotron3.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/pornhub-web-developer-interview/",
                "title": "Интервью с веб-разработчиком Pornhub",
                "created_date": "25 октября 2019 в 14:28",
                "body": "Перевод статьи \n«Interview with a Pornhub Web Developer»\nРассказывает Дэвид Уолш\nНеважно, как вы относитесь к порнографии, нельзя отрицать влияние сайтов для взрослых на развитие web-индустрии: от возможностей видео-плееров в браузере до продвижения рекламы через WebSocket так, чтобы блокировщики рекламы не могли её обнаружить. Нужно быть изобретательным, чтобы внедрять инновации на передовой Интернета.\nНедавно мне посчастливилось взять интервью у веб-разработчика крупнейшего ресурса для взрослых — Pornhub. Я хотел узнать о технологиях, о том, как можно улучшить Web-API, да и в целом — каково работать над сайтом для взрослых.\nХочу заметить, в индустрии видеосервисов для взрослых очень высокая конкуренция, поэтому на несколько вопросов разработчик Pornhub не мог ответить, и я уважаю решение компании хранить свои профессиональные секреты.\nСайты для взрослых отображают много графического контента. Используете ли вы в процессе разработки много плейсхолдеров изображений и видео? Насколько сильно отличается контент и UX при разработке от конечного продукта?\nМы фактически не используем плейсхолдеры при разработке. В конечном счёте важен код и функциональность, интерфейс же уже нам привычен.\nПрим. ред.\n Используются уже готовые и отработанные компоненты и классы для вёрстки.\nСначала мы, конечно, столкнулись с кривой обучения, но мы все привыкли к этому довольно быстро.\nКогда дело доходит до потоковых трансляций и рекламных сценариев третьих лиц, как вы имитируете такие важные, динамические ресурсы во время разработки сайтов и функций?\nВ разработке плеер разбит на две части. Основная часть — плеер реализует функции и запускает события (разработка ведётся методом clean room design). При интеграции на сайтах мы хотим запускать сторонние скрипты и рекламу так, чтобы мы могли находить проблемы как можно раньше. В особых случаях мы работаем с рекламодателями напрямую, чтобы вручную запускать события, которые обычно могут запускаться случайно.\nНа среднестатистической странице Pornhub есть как минимум одно видео, а также реклама в гифках, несколько превью и стримов. Как вы измеряете эффективность страницы и поддерживаете её как можно более эффективной? Любые трюки, которыми вы можете поделиться?\nМы используем несколько измерительных систем:\nнаш плеер сообщает нам показатели о производительности воспроизведения видео и общем использовании;\nсторонняя система RUM для общей производительности сайта;\nскрытые экземпляры сервиса WebpageTest для тестирования скриптов в доступных дата-центрах AWS. Мы используем это в основном для отслеживания того, что могло происходить в определённый момент. Это также позволяет просматривать «водопад» всех данных от разных источников и поставщиков.\nЯ предполагаю, что самая важная и сложная функция фронтенда — это видеоплеер. От размещения рекламы перед видео, выделения наиболее ярких моментов видео, изменения скорости воспроизведения и других функций. Как вы поддерживаете его производительность, функциональность и стабильность?\nУ нас есть специальная команда, работающая строго над видеоплеером. Её первоочерёдной задачей является постоянный мониторинг производительности и эффективности. Для этого мы используем практически всё, что нам доступно: браузерные инструменты измерения производительности, тесты веб-страниц, метрики и т. д. Стабильность гарантируется тщательным тестированием перед любым обновлением.\nСколько человек в этой специальной команде? Сколько вообще разработчиков фронтенда в команде?\nЯ бы сказал, учитывая размер продукта, что команда небольшая.\nЗа время работы на сайтах для взрослых, какие изменения фронтенд-тенденций вы заметили? Какие новые Web API сделали вашу жизнь проще?\nЯ определённо видел много нововведений и улучшений в мире фронтенда.\nОт простого CSS до использования LESS и Mixins, гибкой грид-системы с медиа-запросами и тегами изображений, чтобы приспособиться к различным разрешениям и размерам экрана.\n\njQuery и jQueryUI постепенно уходят, поэтому мы возвращаемся к более эффективному объектно-ориентированному программированию в Vanilla JS. Фреймворки также очень интересны в некоторых случаях.\n\nНам нравится новый API IntersectionObserver, очень полезен для более эффективного способа загрузки изображений.\n\nМы также начали внедрять Picture-in-Picture API, чтобы размещать плавающее видео на некоторых наших страницах, главным образом для получения пользовательских отзывов об этой идее.\nЗаглядывая вперед, есть ли какие-либо Web API, которые вы бы хотели изменить, улучшить или даже создать?\nЕсть некоторые, которые мы хотели бы изменить: Beacon, WebRTC, Service Workers и Fetch.\nBeacon: некоторые проблемы с iOS во время некорректной работы с событиями pageHide;\nFetch: нет прогресса загрузки и способа перехватывать запросы;\nWebRTC: слои Simulcast ограничены даже для совместного использования экрана, если разрешение недостаточно велико;\nService Workers: выполнение вызовов navigator.serviceWorker.register не перехватывается никаким обработчиком события Fetch в сервисном воркере.\nПоследние несколько лет WebVR совершенствуется — насколько он полезен в его нынешнем состоянии и сколько сил сайты для взрослых вкладывают в поддержку VR-контента? Имеет ли тактильный отклик свою роль в WebVR на ваших сайтах?\nСейчас мы только исследуем WebXR и то, как наилучшим образом адаптироваться к возникающим сценариям использования пространственных вычислений. Как крупнейшей платформе, нам необходимо поддерживать создателей контента и пользователей, какой бы опыт они ни хотели получать от нашего контента. Мы всё ещё исследуем, каким должен быть контент и платформы в этих новых средах.\nМы стали первой крупной платформой, поддерживающей виртуальную реальность, компьютерное зрение и виртуальных актёров, и будем продолжать продвигать новые технологии и open web.\nС таким большим количеством разных типов медиа и контента на каждой странице какие есть нюансы при использовании сайта на компьютере или смартфоне?\nФункциональность ограничена в основном операционной системой и браузером. iOS против Android — прекрасный пример, когда речь идёт о совершенно разном доступе и наборе функций.\nНапример, некоторые мобильные устройства iOS не позволяют нам использовать собственный видеоплеер в полноэкранном режиме, заставляя использовать предустановленный QuickTime. Это необходимо учитывать при разработке новых идей. Android, с другой стороны, даёт нам полный контроль, и мы можем перевести наши функции в полноэкранный режим.\nЕщё один пример — адаптивный стриминг в HLS: IE и Edge требовательны к качеству потока HLS и нам нужно препятствовать передаче видео с наиболее высоким качеством, в противном случае видео будет постоянно заикаться и артефачить.\nКакова минимальная поддержка браузеров у порносайтов, на которых вы работаете? Поддержка Internet Explorer прекращена?\nМы очень долго поддерживали IE, но недавно прекратили поддержку всего, что старше IE11. Вместе с этим мы также перестали работать с Flash для видеоплеера. Мы ориентируемся в основном на Chrome, Firefox и Safari.\nМожете ли вы немного рассказать о стеке типичного сайта для взрослых? Сервер и/или фронтенд? Какие библиотеки вы используете?\nБольшинство наших сайтов используют следующие технологии в качестве основы:\nNginx;\nPHP;\nMySQL;\nMemcached и/или Redis.\nПри необходимости используются и другие технологии вроде Varnish, ElasticSearch, NodeJS, Go, Vertica.\nДля фронтенда мы используем в основном ванильный JavaScript. Мы постепенно избавляемся от jQuery и только начинаем играть с фреймворками, в основном с Vue.js.\nДля человека со стороны сайты для взрослых очень похожи между собой: множество предпросмотров видео, подгруженного видеоконтента, участников стримов и рекламы. Какие отличительные особенности делают сайты для взрослых уникальными?\nМы прилагаем все усилия, чтобы придать каждому бренду уникальность на разных уровнях: библиотека контента, UX и наборы функций, а также множество различных алгоритмов.\nПеред тем как подать заявку и пройти собеседование с вашим нынешним работодателем, что вы думали о работе на сайтах для взрослых? Были ли у вас какие-либо сомнения? Если да, то как вы себя успокоили?\nМеня это никогда не беспокоило, в конце концов задача была очень привлекательной. Сама мысль о миллионах людей, взаимодействующих с функциями, над которыми я работал, была очень мотивирующей. И реализовать это удалось быстро: в первый же раз, когда то, над чем я работал, было использовано на сайте, я был очень горд собой и сказал всем моим друзьям зайти и посмотреть. Тот факт, что порно никогда не умрёт, гарантирует стабильность работы.\nРабота над сайтом для взрослых может восприниматься не так, как работа на местную веб-студию. Столкнулись ли вы со стигмой, рассказав друзьям, родственникам и знакомым о том, над чем вы работаете? Были ли сомнения, говорить людям о своей работе или нет?\nЯ очень горжусь тем, что работаю над этим продуктом. Те, кто рядом со мной, знают и восхищаются этим. Это всегда удивительный источник разговоров или шуток и это интересно.\nОтличается ли рабочая атмосфера на PornHub от других проектов?\nАтмосфера здесь очень расслабленная и дружелюбная. Я не замечаю каких-то серьёзных различий в отношении культуры труда по сравнению с другими агентствами, за исключением того, что здесь она намного более развита, чем в компаниях, где я работал до этого.\nС какими командами вы как фронтенд-разработчик работаете наиболее тесно? Какие способы ежедневного взаимодействия наиболее распространены?\nВ равной степени мы работаем с бэкенд-разработчиками, тестировщиками и продакт-менеджерами. Большую часть времени мы просто подходим друг к другу и разговариваем. Также очень распространено общение в чате (MS Teams). Дальше в ход идёт e-mail.\nИ, наконец, есть ли что-то, чем вы хотели бы поделиться как фронтенд-разработчик сайта для взрослых?\nЭто захватывающий опыт — быть частью того, как пользователи взаимодействуют с таким широко используемым продуктом. Мы находимся на передовой трендов и больших изменений технологий веб-разработки, что делает работу интересной и сложной.\nНе смешно? А здесь смешно: \n@ithumor\nВеб-разработка\nТакже рекомендуем:\nКак работает CSS Flexbox: наглядное введение в систему компоновки элементов на веб-странице\nПростыми словами о «фронтенде» и «бэкенде»: что это такое и как они взаимодействуют\nБесплатные материалы для программистов\nLocalStorage на пальцах\nОдин из наших читателей прислал статью с рассказом о HTML5 LocalStorage в браузерах. Передаём ему слово. ",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/pornhub_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-can-startupts-attract-people/",
                "title": "Промокоды и никакого тестового задания: как стартапам конкурировать с корпорациями в битве за разработчиков",
                "created_date": "24 октября 2019 в 18:21",
                "body": "Екатерина Королькова, HR-менеджер по работе с отделом разработки Instamart\nО том, как стартапы борются за лучших разработчиков и почему не надо бояться обучать своих специалистов, рассказала Екатерина Королькова, HR-менеджер по работе с отделом разработки Instamart.\nПолтора года назад в команде Instamart было всего 7 человек. Сейчас их уже 30, а через два года отдел вырастет до 80 сотрудников.\nInstamart развивает технологическую платформу для онлайн покупок с полок магазинов, поэтому, в первую очередь, заинтересована в разработчиках. Чтобы получать лучшие кадры, стартап развивает свой HR-бренд и активно работает над самим процессом найма, ищет новые инструменты для взаимодействия с кандидатами и персоналом.\nКто нужен\nВ компании постоянно открыты вакансии фронтенд-разработчиков и специалистов по Ruby. При этом, когда необходимо закрыть какую-то позицию, нет единого шаблона, в котором бы прописывались основные требования к кандидату. В каждом отдельном случае HR-специалист выясняет, какие технические навыки и soft skills нужны именно сейчас. Под конкретные задачи создаётся список компетенций, которых ожидают от кандидата.\nТребования к кандидатам у Instamart довольно жёсткие: мы, например, не готовы брать на работу человека, который обладает лишь 30 % запрашиваемого набора навыков. У разработчика должна быть хорошая база, желателен опыт работы не менее трёх лет. Кандидат должен уметь логически рассуждать, быть мотивированным и готовым постоянно учиться чему-то новому.\nСобеседование без шаблонных вопросов\nСобеседования в Instamart проходят всего в два этапа: общение с HR-специалистом и техническое интервью. Правда, иногда бывает необходимо собрать рекомендации по кандидату, если речь о руководящей позиции.\nНа первом этапе разговор с кандидатом проходит по телефону или Skype в удобное для него время. Главное здесь — это выяснить мотивацию, понять, нацелен ли человек на развитие. Получается довольно приятный разговор, в котором никто не задаёт дурацкий вопрос: «Кем вы себя видите через пять лет?» Ведь главные ошибки HR — это ничего не дающие запросы и отсутствие минимальных представлений о технологиях разработки. Какой разработчик всерьёз воспримет человека, не отличающего Java от JavaScript?\nДальше разработчик может задать свои вопросы. И тут начинаются типичные ошибки самих кандидатов. Например, когда после долгого монолога рекрутера кандидат задаёт первый и единственный вопрос — о территориальном расположении компании. Конечно, нет ничего плохого в том, чтобы заранее понять, сколько времени будет занимать дорога на работу, но, во-первых, эта информация всегда есть в описании, а во-вторых, хочется видеть в первую очередь заинтересованность и мотивацию кандидата.\nДругие специалисты вообще не очень настроены на общение с HR-ом и хотят сразу перейти на стадию технического интервью, хотя первый этап собеседования очень важен, и его тоже нужно пройти успешно. Если кандидат по какой-то причине не подходит, я стараюсь в течение одного-двух дней дать ему обратную связь. Это очень важно, так как человек навсегда запоминает компанию, в которой ему обещают перезвонить и не делают этого.\nЧем быстрее, тем лучше\nПеред вторым этапом — техническим собеседованием — HR-специалист передаёт всю информацию о кандидате тим-лидам или CTO, которые будут проверять уже hard skills.\nМы не даём тестовые задания кандидатам. На первых порах оно использовалось, как и везде, но потом было принято решение от него отказаться. Дело в том, что, если высылать тест после первого этапа, многие разработчики не захотят его выполнять и просто откажутся от дальнейшего взаимодействия с компанией. Потому что у опытных разработчиков задания вызывают скуку, тем более неоплачиваемую. А если представить, что соискатель обходит не одну компанию, то количество впустую потраченного времени на тестовые задания может составлять уже дни и даже недели.\nЕсли же тест просят выполнить после второго собеседования, то у кандидатов возникнет вопрос, почему эти навыки не были проверены непосредственно во время технического интервью. Кроме того, есть риск, что тестовое задание кандидат сделает не сам, а с чьей-то помощью. Правда, бэкенд-разработчиков мы можем попросить написать SQL-запрос для того, чтобы посмотреть на логику рассуждений человека.\nСвоим преимуществом Instamart видит скорость принятия решения: готова ли компания взять человека на работу или нет. Были случаи, когда кандидат приезжал на собеседование в 10 утра, а в 2 часа дня уже получал оффер. Если нет вопросов, всё понятно с мотивацией и навыками, зачем тянуть?\nВ случае отказа кандидату отправляется развёрнутый ответ с перечислением всех пунктов, по которым он мог бы поработать над своими навыками. Это важно для технических специалистов, которым важно совершенствоваться постоянно, ведь в реалиях постоянно меняющихся технологий остановка в профессиональном развитии фатальна.\nПромокод и технический сайт\nНайти хорошего разработчика на рынке нелегко, а ведь ещё приходится конкурировать с крупными корпорациями за лучшие кадры. Для этого команда сервиса придумала несколько нестандартных подходов.\n\nВ рамках специальной программы поощрения после успешного прохождения всех ступеней собеседования разработчик получает от нас не только оффер, но и промокод на скидку при заказе товаров через Instamart. Это позволяет повышать лояльность к бренду внутри компании.\nКроме того, проведя опросы в чатах для разработчиков, мы выяснили, что специалистам важно, чтобы у предполагаемого работодателя был свой специальный технический сайт, где рассказывалось бы о компетенциях работающих сотрудников, стеке, который применяется. Instamart запустил и развивает такой портал, где мы показали технический радар для простой навигации по технологиям, которые использует компания.\nДух стартапа как инструмент привлечения сотрудников\nЧто во все времена помогает пиарить компанию среди потенциальных сотрудников? Конечно же, то, что Instamart — это стартап. Для каких-то кандидатов это минус, но для многих — большой плюс. Работая в крупной компании, многие специалисты часто не видят конкретного результата своего труда, те продукты, над которыми они работают долгие месяцы, могут быть даже не запущены и отправлены «на полку».\nВ стартапе же всегда можно видеть развитие своего решения и нет необходимости годами делать одно и то же. Разработчики могут заниматься абсолютно разными вещами, учиться выполнять задачи быстро. Это драйв, это жизнь!\nУ специалистов Instamart больше знаний о работе смежных отделов, чем у их коллег в больших корпорациях. Они могут общаться напрямую, например, с маркетологами, что помогает сделать конечный продукт более качественным.\nУ нас был один случай, когда кандидат сначала не принял оффер сервиса, а пошёл работать в один из крупнейших банков. А через месяц он написал, что хотел бы всё-таки выбрать Instamart, так как столкнулся с ужасной бюрократией на новом месте работы, когда ему не могли две недели выдать доступы.\nМеняю фронтенд на бэкенд и наоборот\nСамая важная часть нашей HR-стратегии — это внутреннее обучение разработчиков. Каждый сотрудник может повысить свою квалификацию, освоить новые технологии, которые в компании могут пока не использоваться. После того как специалист приступил к работе, директор по технологиям или team lead разрабатывает для него индивидуальный полугодовой учебный план. В нём указывается список литературы и курсов, на которые стоит обратить внимание. У каждого сотрудника есть социальный пакет на 25 тыс. рублей, который можно потратить, в том числе и на обучение.\nПройдя его, специалист сразу же может использовать все полученные знания в работе, тем самым повысив свой грейд, а значит и зарплату.\nInstamart не боится вкладывать в обучение своих сотрудников. По этому поводу в компании даже бытует такая шутка: «Не боитесь, что научите людей, а они от вас уйдут? Нет, мы боимся, что они ничему не научатся и останутся». Компания должна давать возможность своим сотрудникам развиваться, поскольку именно стагнация, в первую очередь, приводит к недовольству текущим местом работы.\nНе смешно? А здесь смешно: \n@ithumor\nHR\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-6-cover-icon-2.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Ekaterina-Korolkova-e1572250844853-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/infoq-2019-trends/",
                "title": "Как дела у Go и так ли популярен Python, как кажется — тренды языков программирования",
                "created_date": "24 октября 2019 в 11:18",
                "body": "Адаптированный перевод статьи \n«Programming Languages InfoQ Trends Report - October 2019»\nКлючевые моменты\nПоявился Elixir — функциональный язык общего назначения с поддержкой многопоточности. Запускается на виртуальной машине Erlang. В текущем отчёте находится в категории инновационных.\nНабирают популярность предметно-ориентированные языки, созданные для работы с инфраструктурой и облачными технологиями. Это такие инструменты, как \nBallerina\n и \nPulumi\n. Авторы отчёта также отметили язык \nDark\n, который не был включён в тренды только потому, что находится на стадии беты. Rust перешёл из категории инновационных в категорию осваиваемых. Авторы InfoQ считают, что причина этому — инструменты для работы с инфраструктурой и манипуляций плоскостями данных, такие как \nHabitat\n и \nLinkerd 2.0\n. Facebook для разработки собственной криптовалюты использует именно этот язык.\nPython продолжает набирать популярность, в основном благодаря тому, что его используют для анализа и обработки данных и обучения программированию.\nSwift для iOS перешёл в категорию раннего большинства, вероятно, из-за популярности iOS в качестве среды для приложений. Kotlin показывает схожий прогресс.\nВ семействе .NET особый интерес вызывает .NET Core 3. Инструмент пока находится в категории инновационных, но имеет все шансы догнать .NET Core 2. А вот Visual Basic попал в категорию отстающих.\nМнения\nПортал InfoQ опубликовал выдержки из обсуждений команды редакторов и специалистов, на основе которых и был сформирован октябрьский отчёт. Приводим их с сокращениями.\nАбель Аврам, старший преподаватель кафедры информатики и автоматизации Политехнического университета Тимишоары\nJetBrains \nопубликовала результаты исследования «Состояние экосистемы разработчиков 2019» (\nThe State of Developer Ecosystem 2019\n), где по результатам опроса 7 000 разработчиков пришла к следующим выводам:\nJava — самый популярный основной язык программирования;\nJavaScript — наиболее часто применяемый язык;\nGo — самый перспективный язык;\nPython — самый изучаемый язык.\nGo начал с доли в 8 % в 2017 году и в настоящее время достиг 18 %. Кроме того, больше всего разработчиков (13 %) указали Go в качестве языка, который хотели бы освоить.\nStackOverflow \nотмечает\n, что в 2019 году Python обошёл Java по рейтингам и остаётся вторым самым любимым после Rust.\n \nАртур Касалс, исследователь, работающий в области искусственного интеллекта и многоагентных систем\nХотя применение Rust всё ещё несколько ограничено и сам язык рассматривается больше как альтернатива C++, появление новых библиотек и использование этого языка крупными компаниями делают его потенциальным кандидатом в категорию осваиваемых языков.\nElixir набирает популярность на родине, в Бразилии. Его использует как минимум один крупный стартап, Movile.\n \nДилан Шиман, генеральный директор SitePen и сооснователь Dojo\nGo пока находится на стадии освоения. У языков жизненный цикл протекает куда медленнее, чем, например, у фреймворков, и Go ещё не достиг стадии повсеместного применения. Elixir и Elm, по моему мнению, также находятся на стадии освоения.\nSwift уже можно отнести к категории повсеместно используемых языков, вероятно, потому что это самый удобный инструмент для разработки приложений для iOS.\nТакже значительную популярность в последние годы набрали облачные IDE, \nCodeSandbox и StackBlitz. Они предоставляют широкий спектр возможностей как для браузерного редактирования, так и для интеграции с локальными инструментами разработки.\n \nЧарльз Хамбл, главный редактор InfoQ\nНе думаю, что Pony продвинулся дальше категории инновационных, как это ни печально. Мне нравится этот язык, несмотря на то, что я нахожу его систему типов довольно сложной. И я думаю, над ним проделана впечатляющая работа, однако вокруг языка пока сформировалось слишком маленькое сообщество.\nЯ всё больше слышу о Dark, хотя он всё ещё на стадии беты. В контексте ориентированных на инфраструктуру языков я нахожу это интересным.\nДумаю, на .NET Core сосредоточены серьёзные усилия. Стоит перенести этот инструмент из инновационных в осваиваемые. Полагаю, при выходе .NET Core 3 стоит выделить его в отдельную ветвь и поместить в инновационные.\nF# похоже повторяет судьбу Clojure для JVM. Выглядит довольно неплохо, но я не вижу серьёзного развития, как, впрочем, и упадка.\n \nВернер Шустер, специалист по информационным технологиям из Wolfram\nДумаю, Jython мёртв. Последний раз, когда я проверял сайт, он уже не обновлялся несколько лет, а в текущем состоянии он даже и рядом не стоял с Python 3.x.\nЯзыки для инфраструктуры: похоже на новый тренд слияния некоторых новых языков и развёртывания.\nPulumi и подобные — Typescript;\nBallerina;\nUnison Language\n — новый функциональный язык от разработчиков Scala/Haskell, но без монад. Пока ещё слишком рано его оценивать;\nDark Language\n — пока нет в публичном доступе.\nПока непонятно, к чему это может привести. Это слияние может оказаться просто неудачной веткой развития, а может стать первым шагом к новым фичам языка. Возможно, лет через 15 мы будем считать такой подход настолько же естественным, как использование подпрограмм.\nМожет быть, мы сейчас видим новое будущее wasm- программирования (браузер, сервер с WASI и тому подобное), а также новое возрождение нативных языков (serverless, с использованием виртуальных машин и контейнеров). Такой подход уменьшит привлекательность JVM/байткода и позволит всем просто использовать нативные версии языков (канонические версии, разрабатывавшиеся десятилетиями). Уточню — сказанное выше не касается нативных языков JVM, таких как Clojure, Scala, Kotlin и т.п.\n \nБен Эванс, ведущий инженер и специалист по технологии JVM в New Relic, Inc.\nПохоже, большинство фанатов языка Elixir предпочитают его в основном из-за новизны и/или потому что у них так называемая «аллергия на Java» (обычно вызванная тем, что платформе уже больше 10 лет), но… Я не видел ничего на этом языке, что нельзя было довольно просто реализовать с помощью JVM (пусть даже немного больше повозившись) — при этом JVM гораздо лучше интегрирована с библиотеками.\n \nДастин Шульц, ведущий программист, автор Pluralsight и популяризатор технологий\nНичего не имею против Python (мне даже нравится на нём писать), но я думаю, стоит отметить что, несмотря на популярность, его на самом деле редко используют в коммерческих целях. Я редко вижу большое, развёрнутое коммерческое приложение, написанное исключительно на Python. С него часто начинают, но потом переключаются на что-то более производительное.\n \nДжонатан Аллен, ведущий разработчик в KPMG и ведущий редактор InfoQ по .NET\nЕсли спросить у сообщества, у F# есть две проблемы:\nслабая поддержка от Microsoft;\nупор сделан на совместимость с C# в ущерб простоте использования;\nон становится всё сложнее и сложнее, прямо как любят специалисты по информатике. Однако преподаватели F# сосредоточены на обучении людей, далёких от программирования и просто нуждающихся в скриптовом языке. Излишняя сложность затрудняет работу.\nТакже я думаю, что C# 8 быстро перейдёт в категорию осваиваемых. Люди просили обнуляемые ссылочные типы… Честно говоря, со времён .NET 1.\nНе смешно? А здесь смешно: \n@ithumor\nЯзыки программирования\nТакже рекомендуем:\nБесплатные материалы для программистов\nКакой язык программирования лучше выбрать первым для изучения новичку?\nХочу научиться программировать на Python. С чего начать?\nРассказываем, что нужно выучить в первую очередь, где брать знания и интересные задачи для тренировок. \nНа какие языки программирования и технологии точно не стоит тратить время\nПодборка языков программирования и технологий, на которые, по мнению наших экспертов, точно не стоит тратить время. ",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-15-cover-icon-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1797px\" viewBox=\"0 0 1797 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/pic1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1800px\" viewBox=\"0 0 1800 1012\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/pic2-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_blue-1-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_yellow-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_green-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_red-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_mint-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_yellow-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_blue-1-150x150.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/expert_man_green-150x150.png"
                ]
            },
            {
                "url": "https://tproger.ru/experts/native-or-crossplatform/",
                "title": "Натив или кроссплатформа — что выбрать начинающему мобильному разработчику? Отвечают эксперты",
                "created_date": "21 октября 2019 в 16:45",
                "body": "Казалось бы, вот у нас кроссплатформенная разработка, которая даёт возможность создавать универсальные приложения для разных платформ. Написал приложение быстрее, сразу везде выпустил — profit! И никакая нативная разработка не нужна. Или всё-таки нужна? О нюансах обоих подходов к разработке мобильных приложений мы спросили у наших экспертов.\nАлексей Анастасьев\n, \nтехнический директор ГК «CиДиСи» (CDC)\n«Мобильный разработчик» — широкое понятие. Разработчик, реализующий части мобильной операционной системы, — это тоже мобильный разработчик. И если цель стать именно таким разработчиком, то начинать надо вообще с изучения C++, мобильной операционной системы и «железа» мобильных устройств.\nЕсли имеется в виду разработчик, реализующий пользовательские мобильные приложения, то начинать надо с нативной разработки.\nПочему так? Нативная разработка позволяет лучше и глубже изучить возможности конкретных операционных систем (и приложений для них) и мобильного «железа».\nЕсли далее будет выбран вариант развития в области кроссплатформенной разработки (что вполне возможно), то полученные знания наверняка пригодятся, они будут являться полезной «базой» для развития.\nС точки зрения пользователя нативная разработка однозначно выигрывает. Нативные приложения работают быстрее, интерфейс в них отзывчивее и привычнее для пользователей конкретной мобильной операционной системы, они лучше используют аппаратные возможности устройств, лучше работают в офлайне, менее «глючные».\nИзначальная идея кроссплатформенной разработки — это сокращение трудозатрат разработчика. Коротко её можно выразить так: «Сделал один раз, работает на чём угодно». Идея хорошая и верная (с точки зрения разработчика), но есть вопросы по качеству. В любой универсальности изначально заложен компромисс, и область мобильной разработки — не исключение.\nПри выборе типа разработки для конкретной задачи, разработчику необходимо оценить: насколько этот компромисс допустим. Есть ряд задач, где использование кроссплатформенной разработки будет вполне оправданно, например в тестовых проектах, мобильных версиях сайтов, играх с использованием фреймворков типа Unity 3D.\nПри этом для проектов, решающих мобильные задачи бизнеса (с высокой нагрузкой, необходимостью поддержки офлайн-режима, направленных на долгосрочное развитие), нативная разработка видится единственным оптимальным (а для некоторых задач и единственно возможным) вариантом.\nПри этом основными недостатками нативной разработки является время разработки (его требуется больше) и необходимость наличия разноплановых ресурсов (разработчиков на разных нативных языках программирования). Есть способы нивелировать эти недостатки — например, использовать для разработки какую-либо платформу мобильных приложений (класса MEAP), позволяющую создавать нативные приложения.\n13\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n13\nПовысить\nПонизить\nДмитрий Рогов\n, \nдиректор по технологическому развитию ИТ-компании «АйДи – Технологии управления»\nЛюбая кроссплатформенная библиотека или фреймворк базируются на тех же нативных механизмах, на которых реализуется непосредственно нативная разработка. Просто в случае кроссплатформенных решений рабочие процессы строятся так, чтобы «сгладить углы» в плане приведения интерфейса конечного решения к некоему единому знаменателю.\nКак правило, универсализм не всегда является ответом на задачу создания рабочего мобильного решения: разработчик работает тем качественнее, чем глубже понимает механизмы устройства различных процессов изнутри, что называется, «под капотом».\nПоэтому я бы рекомендовал начать свой путь в мобильной разработке с изучения нативного подхода.\nТакже, вполне рабочей моделью будет одновременное освоение базовых элементов двух подходов, ничего невыполнимого в такой задаче обучения на начальном этапе нет. Например, такой сценарий может оказаться вполне реализуемым и перспективным: начать работу в кроссплатформенной парадигме, а параллельно самостоятельно или с помощью коллег изучать, какие нативные возможности существуют для разработке текущих решений и как их можно применять на практике.\nВ таком случае проще добиться комплексного понимания, как работает процесс мобильной разработки в принципе, что называется в сквозном ключе. Это полезно ещё и потому, что любая, даже самая продвинутая универсальная платформа отстаёт по своим возможностям от нативной: производители железа и мобильных ОС часто работают сообща и постоянно наращивают возможности итоговых решений — возможности платформ мобильной разработки, в особенности кросс-платформенных решений, неизбежно отстают.\nНовинки в сегменте мобильных устройств появляются на рынке постоянно, некоторые из них значительно опережают время – возьмите Samsung и его разработку аппарата с гнущимся экраном: очевидно, что ввиду радикально иного фронтенда существующие платформы разработки к таким вещам не готовы.\nКак раз здесь и выручат глубокие знания платформ нативных: компенсировать естественное отставание от железа и ОС сможет только разработчик с глубоким, системным знанием мобильной разработки, то есть — нативных платформ. Только такой специалист сможет наращивать функциональность своего решения для новейших мобильных устройств на базе не совсем передовых платформ разработки, доступных на настоящий момент.\nКроссплатформенная разработка отлично подходит для прототипирования, быстрого теста идеи и т. д. Как только речь заходит о создании по-настоящему фундаментальных продуктов, разработчик неизбежно приходит к необходимости глубокого изучения базовых элементов процесса, то есть нативной разработки. \n11\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nАндрей Антропов\n, \nдекан факультета iOS-разработки GeekUniversity, образовательного портала GeekBrains\nКраткий ответ: если нет опыта в программировании — то, конечно, нужно выбирать нативную разработку. Кроссплатформенная разработка хороша для специалистов, которые переходят из смежных сфер в мобильную разработку. Например, если вы работаете frontend-разработчиком, с хорошим знанием JavaScript при помощи фреймворка React Native (созданного на основе фреймворка React) вы можете быстро и безболезненно попробовать освоить мобильную разработку. Аналогично .NET-разработчику легче будет освоить фреймворк Xamarin.\nКроссплатформенная разработка выгодна и заказчику — легче найти одну команду разработчиков, которые по общему образцу разработают приложение сразу под две платформы.\nПреимущества очевидны, но в чём же недостатки мультиплатформенной разработки?! Считается, что чем сложнее и тоньше функциональность в мобильном приложении, тем сложнее, а то и вовсе невозможно его реализовать кроссплатформенными средствами — это зачастую и перевешивает все плюсы универсальных средств. В моём опыте есть несколько крупных компаний, которые с ростом своего приложения вынуждены были отказаться от кроссплатформенности в пользу нативой разработки. Таким образом для маленьких проектов и, возможно, фриланс-задач достаточно общих решений, а для больших проектов лучше подойдут нативные.\nСпрос на обе сферы достаточно высокий, но на нативную разработку несколько выше: по запросу Swift на hh.ru в России — 369 ваканский, Kotlin — 397, React Native — 111, Flutter — 13 Xamarin — 18. Но будьте уверены, хороший специалист в любой сфере без работы не останется.\n18\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n18\nПовысить\nПонизить\nПавел Новиков\n, \nтимлид Android-разработки в компании «МойОфис»\nДля начала важно отметить, что любое мобильное приложение состоит из нескольких слоев:\nUI — то, что видит пользователь;\nбизнес-логика — то, ради чего написано приложение;\nпрочие платформенные компоненты — работа с сетью, базами данных и другими компонентами системы, которые используются бизнес-логикой.\nВ зависимости от конкретного приложения размер компонентов на этих слоях может сильно отличаться. Например, приложение для чтения новостей какого-нибудь сайта будет сильно отличаться от VPN-клиента.\nСаму разработку можно разделить на три вида: нативную, полностью кроссплатформенную и гибридную.\nНативная разработка\nВ нативной разработке все три слоя написаны с использованием одного набора инструментов. Поэтому они могут взаимодействовать друг с другом без каких-либо дополнительных сложностей.\nПреимущества нативной разработки:\nиспользуются стандартные для платформы инструменты, библиотеки и подходы;\nвокруг каждой платформы сформировано большое сообщество;\nприложения не ограничены ничем в рамках платформы.\nГлавным недостатком является то, что одинаковую логику нужно писать для каждой платформы отдельно.\nПолностью кроссплатформенная разработка\nЭтот вид разработки перекрывает основной недостаток нативной: все три слоя создаются один раз для всех платформ. Яркими примерами являются ReactNative (RN) от Facebook, Flutter от Google и Xamarin от Microsoft.\nГлавное преимущество: большая часть логики действительно пишется один раз.\nНедостатки:\nсо временем всё равно может понадобиться углубиться в детали конечной платформы;\nприложения могут выглядеть и вести себя «неестественно» для платформы;\nиспользуются нестандартные с точки зрения платформы языки: JavaScript для RN, Dart для Flutter и C# для Xamarin;\nвы как разработчик становитесь зависимы не только от конечной платформы, но и от промежуточной.\nГибридная разработка\nЭтот тип разработки сочетает оба предыдущих подхода. Слой бизнес-логики строится в виде «переносимого» компонента, а UI и платформенная интеграция создаётся с помощью стандартных инструментов. Существует несколько языков для написания общей логики: C/C++ (зрелое и мощное решение), KotlinNative (очень активно развивается) и JavaScript (наименее распространено).\nПреимущества:\nнативными остаются наиболее подходящие для этого компоненты;\nобщая логика создаётся один раз.\nНедостатки:\nесли общий компонент будет создавать мобильная команда, то необходимо получать экспертизу в ещё одном языке;\nесть накладные расходы на интеграцию кросс-платформенных компонентов.\nС какого типа разработки лучше начать?\nДля того, чтобы ответить на этот вопрос, нужно понять, какого рода проекты вы хотите создавать. Небольшие проекты могут быть чисто кроссплатформенными и это будет полностью оправдано. Тут я бы советовал присмотреться к Flutter.\nНо сегодня я бы начал именно с нативной разработки. Во-первых, большинство проектов сегодня создаётся именно нативным. Это значит, что у вас будет больше возможности менять проекты/компании. Во-вторых, со временем можно будет перейти к гибридной кроссплатформенной разработке. Это позволит расти в технических вопросах.\n10\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n10\nПовысить\nПонизить\nСтепан Ермилов\n, \nруководитель мобильной разработки IT-компании MediaSoft\nПо моему мнению, лучше всего начинать с натива, а потом, если сильно захочется, освоить один или несколько кроссплатформенных инструментов. Исключением может быть разве что разработка игр, так как они в основном пишутся на Unity, а это кроссплатформенный движок.\nЕсли говорить о преимуществах нативной разработки, то для программиста она означает меньшее количество препятствий и большее количество различных инструментов для работы. Также у него будет больше источников информации для решения сложных вопросов, возникающих в процессе создании приложения, — не секрет, что для нативной разработки в интернете в разы больше советов и подсказок, чем для кроссплатформенной.\nДля конечного пользователя нативная разработка означает, что в приложении будут привычные, предсказуемые интерфейсы и паттерны поведения — при условии, что приложение написано по всем гайдам.\nКроссплатформенному приложению не всегда удаётся полностью соответствовать гайдам обеих платформ, и это может создать для разработчика и пользователя дополнительные трудности. Простейший пример — ситуация с кнопкой «Назад»: в Android она присутствует практически на всех экранах, в то время как в iOS её нет. Если сделать кроссплатформенное приложение без этой кнопки, часть Android-пользователей может испытать дискомфорт.\nСтоит также сказать про различия в стоимости разработки. Если проект несложный, то выбор кроссплатформенной разработки позволяет сэкономить бюджет, так как вы, по сути, разрабатываете не отдельные продукты для разных платформ, а один для всех. Но если проект разрастается, то весы начинают склоняться в другую сторону, и нативная разработка может оказаться выгоднее.\nЧто касается скорости работы приложений, то кроссплатформенные продукты работают медленнее. Например, те, что основаны на web-технологиях, имеют в качестве прослойки браузер, что значительно замедляет работу приложения.\n8\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n8\nПовысить\nПонизить\nВладислав Мельников\n, \nпрограммист группы разработки карты рассрочки «Совесть»\nВыбор кроссплатформенного или нативного подхода зависит фактически от двух факторов: характера мобильной разработки, которым вы лично хотите заниматься, или запроса работодателей, с которыми вам интересно сотрудничать. Так, например, если рассмотреть Upwork (платформа по поиску удалённых специалистов на проекты и задачи), то можно заметить явный перевес по предложениям в сторону Xamarin и React Native. Преимущества тут очевидны: это дешево, быстро и позволит реализовывать проекты сразу на все платформы. Однако, если рассматривать крупные IT-компании с поиском сотрудников in house, то существенный упор наблюдается в сторону нативной разработки, несмотря на то что этот тип требует больше времени и стоит дороже.\nВ нашей компании мы ставим в приоритет и выбираем нативную разработку, потому что она позволяет дизайнерам и разработчикам создавать более плавный, интуитивно понятный UX/UI. Кроме того, нативная разработка даёт более гибкий контроль над системными функциями. \n7\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n7\nПовысить\nПонизить\nЕвгений Камышанов\n, \nLead Software Engineer в EPAM\nЕсли хочется стать именно мобильным разработчиком, то ответ очевиден: надо выбрать любую из нативных сред разработки и налегать на Objective-C/Swift для iOS или Java/Kotlin для Android. В этом случае к вашим услугам все возможности системы, можно управлять практически каждым нюансом.\nЕсли есть просто желание написать программу, которая будет работать в том числе и на телефонах, то можно сильно не задумываться и выбрать то, к чему больше лежит душа или в чём есть какой-то заметный опыт: C++, React Native, Xamarin или пятьсот тысяч JS-фреймворков для кроссплатформенной разработки. Или вообще продолжить делать свои [адаптивные] веб-сайты.\nЯ, признаться, довольно скептически отношусь к самой идее кроссплатформенной разработки на таких разных (и расходящихся) платформах, как Android и iOS. Никто из вендоров не любит «неверных» разработчиков, пытающихся усидеть на двух стульях одновременно. Все пытаются привязать программистов к инструментам и окружению, и никакой тенденции к сближению в обозримом будущем ожидать не приходится. Что там говорить, Apple в этой гонке отказался даже от OpenGL, самой кроссплатформенной из всех библиотек после Curl, но зато теперь у них есть свой собственный Metal, который делает вроде бы то же самое, только лучше и другим языком.\nС другой стороны, очень часто мобильная разработка — это создание двух выглядящих одинаково приложений для какого-нибудь сетевого сервиса. Заказчики не всегда готовы платить за два продукта, которые на вид совершенно неотличимы, поэтому спрос на технологии кроссплатформенной разработки существует и, надо признать, довольно высокий. Программисты тоже не прочь сэкономить, особенно если мобильное приложение продать хочется, учить Swift/Kotlin никакого желания нет, зато JS/C# уже есть на кончиках пальцев.\nРазумеется, кроссплатформенная разработка несёт с собой массу неочевидных нюансов. Все универсальные решения вынуждены строить замки на песке: либо опираясь на сложные и хрупкие технологические решения (как Xamarin), либо на мобильные движки JavaScript, как React Native. При этом платформенные вендоры и не думают поддерживать ни одно из решений, и каждое обновление нативного SDK — большая головная боль для любого кроссплатформенного фреймворка. Не говоря уже о таких специфических для конкретной системы особенностях, как доступ к камере, кейчейну или даже банальной галерее фотографий, которые каждый пытается обходить с разной степенью успешности. Разработчики, выбравшие универсальный путь, оказываются в заложниках у своего фреймворка, и часто разработка, обещавшая существенную экономию, превращается в борьбу с граблями.\nТакже часто в кроссплатформенных решениях принято жертвовать тем, что обозначается термином user experience (UX): многие фреймворки пытаются использовать элементы управления, максимально обобщенные для обеих систем, и почти всегда это решение одинаково неудобно для всех. Или тормозит. Или выбивается из общего стиля. Или расходует батарейку. Продолжите список сами.\nОсобняком стоят кроссплатформенные приложения, ядра которых пишутся на низком уровне, максимально общем для всех операционных систем: на языках типа C/С++. В этом случае принято обобщать использование кода, обслуживающего бизнес-логику, а интерфейс пишется для каждой платформы отдельно. В идеале можно было бы избежать дублирования критически важной части приложения, и при этом сохранить пользовательский опыт, характерный для каждой платформы. Однако в реальной жизни всё сложнее. Например, Dropbox несколько лет подряд пытались жить с низкоуровневым ядром, но в итоге отказались по многим причинам, и теперь счастливы с нативными платформенными приложениями. Интересующихся отсылаю к любопытной их \nстатье\n на эту тему.\nПо моему мнению, экономия на кроссплатформенных фреймворках всегда иллюзорна. Наверное, в некоторых тривиальных проектах, где приложение — это просто версия основного сайта, супер-оптимизированная для мобилки, обобщенный подход работает. В остальных случаях вы рискуете повторить судьбу Dropbox. Мой совет — если хотите быть мобильным девелопером, вкладывайте усилия в изучение платформы. Они всегда окупятся, даже если вам придётся участвовать в кроссплатформенном проекте.\n41\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n41\nПовысить\nПонизить\nДенис Воронин\n, \nстарший разработчик программного обеспечения Тверского технологического центра Accenture\nРынок мобильных приложений активно развивается, соответственно растёт набор технологий для их разработки. Инструментов, которыми можно воспользоваться, довольно много.\nДля нативной разработки на платформе Android существует Java или обёртка над JVM — Kotlin. Для iOS можно использовать Objective-C или обёртку над ним — Swift. Всё это — ООП-языки, которые многое унаследовали от Smalltalk и C.\nДля кроссплатформенной разработки сейчас используют Flutter от Google, для которого нужно будет знать Dart. Или же React Native от Facebook.\nДля начинающего мобильного разработчика, скорее всего, определяющим фактором будет его прошлый опыт и знание языков. Если в основе его набора инструментов лежит Java, он гораздо быстрее сможет познать мир мобильной разработки через Android-платформу, используя тот же Java или Kotlin.\nПри этом Objective-C для iOS-разработки взял многое от Smalltalk, как и Java, поэтому при желании можно сделать выбор и в пользу iOS. Но стоит учитывать, что разработка под Android может происходить на Windows или Linux, но для iOS необходима MacOS X. А вот для JavaScript-разработчика со знанием React, очевидно, самым быстрым путем будет React Native. Также как для Dart-разработчиков выбор будет в пользу Flutter.\nПосле того, как начинающий разработчик получит представление, что из себя представляет мобильная разработка, какие минусы и плюсы даёт выбранный путь, он решит для себя, работать ли с каким-то одним подходом, либо решать задачи с помощью кроссплатформенных решений.\nВ этом подходе есть свои плюсы: кроссплатформенный метод даёт возможность выпускать проект в продуктивную среду чуть быстрее, задействуя меньшее количество ресурсов. Кроме того, он проще в обслуживании. Но в нём есть и очевидные минусы как для разработчика, так и для пользователя. Например, разработчику не нужно знать нативные технологии, но гайдлайн платформы необходимо учитывать, так как приложение, написанное по гайдлайнам iOS, будет вызывать сложности у пользователей Android и наоборот.\nКроссплатформенные приложения не могут достичь того же уровня интеграции в устройство, как нативные. То есть, если в приложении идёт речь о взаимодействии с устройством, например с камерой, календарем или использованием вычислительных мощностей устройства, то добиться этого проще, используя нативный подход, и это будет быстрее и производительнее.\nРазрабатывая кроссплатформенное приложение, специалистами учитываются возможности фреймворка, который налагает ограничения. Стоит также учесть, что для разработки продукта на нативных технологиях, необходимы специалисты под каждую платформу.\nПодводя итог, можно сказать, что кроссплатформенный подход подойдет для простых приложений, не требующих глубокой интеграцией с устройством, а также для быстрой разработки прототипа сложного проекта для нескольких платформ. Там, где необходима серьёзная интеграция и безопасность данных, выбор будет в пользу нативных технологий. \n11\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nРенат Сарымсаков\n, \nразработчик мобильного приложения FL.ru\nОднозначного ответа на этот вопрос нет. Всё зависит от целей. Часто в команде разработки какой-то конкретной компании выбирают что-то одно. Например, хотят работать только на iOS-устройствах. Выходит, что ваша цель — изучить досконально платформу Objective-C, Swift.\nЕсли работаете на фрилансе или есть цель охватить минимальными средствами максимальное количество устройств, ориентируйтесь на кроссплатформенную разработку в случае ориентира на мобильные решения или работе фронтендером.\nКаковы основные преимущества и недостатки мобильной нативной и кроссплатформенной разработки? Нативная разработка сама по себе дорогая, потому что компании нужно инвестировать в две команды — iOS и Android. Для простых приложений, скорость разработки на Flutter / React Native выше.\nЗато плюс в том, что инфраструктура уже сформирована и понятна. Вы получаете доступ к любым ресурсам устройства и можете заниматься разработкой под умные часы, авто и прочее.\nКроссплатформенная разработка — тоже крутая вещь. Но пока не сильно развита на IT-рынке труда в России. Толковых специалистов — по пальцам пересчитать. Инфраструктура фреймворков молода, но ситуация постепенно меняется к лучшему. Такая разработка даёт возможность сразу писать под несколько устройств. Даже если вы пишете на Flutter, например, он легко интегрируется с нативным кодом. \n11\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n11\nПовысить\nПонизить\nАлексей Прядко\n, \nтехнический руководитель проекта департамента разработки ПО компании «Рексофт»\nКроссплатформенная разработка нацелена на быстрый результат и существенную экономию бюджета — пишем один код под все устройства. Её сферы применения — это либо решение для внутреннего пользования, где юзабилити продукта не так важно, а главенствующую роль играет функциональность, либо создание быстрого «пилотного» проекта, когда нужно заказчику показать принцип или идею приложения. Кроме того, если нет точного понимания, на устройстве с какой операционной системой будут смотреть ваш прототип, именно кроссплатформенная разработка — это выход. Однако нужно заранее понимать, что все устройства имеют разную архитектуру, поэтому физически на одном только кроссплатформенном коде качественное приложение выполнить практически невозможно. В сложных сценариях потребуется написание нативного кода. Кроме того, в силу своей специфики кроссплатформенная разработка несёт в себе издержки, не позволяющие приложению быть максимально эффективным. Это и понятно, в данном случае промежуточный кроссплатформенный код должен транслироваться под каждую из платформ, что делает приложение более «тяжёлым» за счет того, что помимо функционального кода в нём содержится среда его выполнения.\nЕсли же мы говорим о коммерческом продукте для конечных клиентов, то вам ничего не остаётся, как применять нативную разработку. Именно она в полной мере позволяет добиться создания эргономичных приложений с правильно и красиво перелистывающимися экранами, всплывающими окнами и формами, красивой анимацией, и уж тем более корректным взаимодействием с платформой и специфичными службами Google или Apple. По опыту скажу, что в ходе проекта заказчик всегда начинает улучшать функциональность и юзабилити приложения, добавлять новые опции и т. д. Поэтому даже если проект стартует в кроссплатформенной среде, впоследствии развитие продолжается под каждую платформу отдельно. \n13\nОтвет эксперта\n2019-10-21T16:45:06+03:00\n\nРейтинг полезности ответа: \n13\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, какой подход к разработке стоит выбрать?\nВсё зависит от задачи. Если вам нужно написать прототип приложения для нескольких платформ или мобильную версию сайта, то можно посмотреть в сторону кроссплатформенных фреймворков. С их помощью вы, скорее всего, быстрее напишете приложение, чем в случае с нативной разработкой, особенно если работать на фреймворке, похожим на ваш привычный инструмент, например React Native.\nС другой стороны, универсальность кроссплатформенных приложений должна чем-то компенсироваться. Где-то всплывает «неродной» элемент интерфейса, где-то хуже происходит взаимодействие с системой, где-то проседает скорость работы и т. д. Несмотря на то, что нативная разработка требует больше ресурсов, многие компании предпочитают именно её, так как на выходе получается более стабильный и нативно выглядящий продукт.\nВ связи с этим, если вы только начинаете заниматься мобильной разработкой, то лучше будет заняться сначала нативной разработкой. Для неё можно найти больше информации в Интернете, вы получите более глубокое понимание возможностей платформы и вам не будут мешать отдельные нюансы кроссплатформенной разработки. Более того, если вы в дальнейшем решите заняться кроссплатформенной разработкой, полученные знания вам точно не помешают.\n100500\nЛучший ответ\n2019-10-21T16:45:06+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nМобильная разработка\n, \nСоветы\nТакже рекомендуем:\nКак начать разрабатывать под Android\nАдаптивная верстка: что это и как использовать\nКак разрабатывать на Python под Android\nПрограмма минимум: что должен знать начинающий C# программист",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-5-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/89807_005337f4_33zzkncH_1571408431-e1571500370142-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/08/D.Rogov-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/73473_561d5046_aGjVJVgL_1570464189-e1571400975210-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/28150_989ccf98_cKSsbmUq_1569836630-e1571401708250-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/45000_297bfab8_zIH6WzNs_1570696764-e1571402298314-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/vl.melnikov-e1571403384720-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Evgenii-Kamyshanov_1-e1571403674763-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/photo_2019-10-15_16-55-43-e1571403970663-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/74743_f042304e_ax25BKJN_1571132119-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/89124_b711bce2_tZHaAumF_1570630034-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/code-review-a-la-google/",
                "title": "Code review — как это делать в стиле Google?",
                "created_date": "19 октября 2019 в 15:47",
                "body": "Адаптированный перевод статьи \n«How to do a code review»\nРано или поздно для каждого программиста настаёт время отвлечься от собственного кода и оценить чужой. Осознав неизбежность этой работы, вам нужно будет решить, как цензурно выразить всё, что вы думаете о рецензируемом коде. Мы расскажем, как с этой задачей справляются в Google.\nСтандарты\nГлавная цель code review в Google — постоянно совершенствовать кодовую базу. Соответственно, если вы делаете обзор на код, являющийся частью большого проекта, — подумайте в первую очередь не о сиюминутных решениях, а о том, как это повлияет на весь проект в перспективе. Есть два аспекта, которые вам придётся отбалансировать.\nДилемма обозревателя\nС одной стороны, разработчику нужно предоставить возможность развиваться. Если вы честно скажете, что он наваял полный бред, который не пойдёт в кодовую базу ни под каким видом, вы можете лишить его всякого желания работать над улучшением кода.\nВ то же время нужно придерживаться стандартов качества кодовой базы проекта. Иногда кажется, что немного костылей и просто не слишком хорошего кода — не так уж и страшно, но такие вещи имеют свойство накапливаться.\nГлавное правило\nЗапомните, именно вам предстоит найти баланс, позволив кодерам развиваться, и в то же время не пожертвовав качеством кода.\nОтсюда главное правило: даже если сам код, с вашей точки зрения, не идеален и не полностью соответствует стандартам вашей компании, его нужно добавить в базу, если вы уверены, что он улучшит проект.\nЕстественно, из этого правила бывают исключения. Например, если предложенный код добавляет фичу, которая определённо не нужна в проекте, от одобрения надо отказаться, как бы хорош ни был сам код.\nНаставничество\nОставляйте комментарии, делитесь своим опытом, в перспективе это улучшит код, который достанется вам от этого разработчика в будущем. Однако следует разделить указания, обязательные к выполнению и общие рекомендации. В Google советуют использовать для последних префикс «Nit:» (от слова \n«\nnitpicking», придирка)\n. Не обязательно обозначать рекомендации именно так, это просто общеупотребительный способ.\nПринципы\nФакты и данные важнее личного мнения и персональных предпочтений.\nСтиль кода должен соответствовать принятому в вашей команде. Если какой-то момент не оговорён — оставляйте его на усмотрение кодера.\nАрхитектура кода должна соответствовать принципам, лежащим в основе проекта. Если есть несколько способов решить задачу — выбирайте тот, который соответствует этим принципам. Если есть несколько равно эффективных вариантов — оставьте выбор за автором кода.\nМожно попросить автора согласовать стиль кода с текущей кодовой базой, если это не ухудшит общего качества.\nРазрешение конфликтов\nВ случае разногласий с кодером постарайтесь найти вариант, устраивающий обоих. В первую очередь обратитесь к чётко прописанным стандартам проекта. Возможно, будет лучше обсудить проблему при личной встрече или по видеосвязи.\nЕсли это не помогает, стоит расширить дискуссию, вовлекая других членов команды, тимлида, эксплуатационников и инженеров. Не допускайте, чтобы вашего решения приходилось ждать слишком долго из-за разногласий с кодером.\nЧто нужно проверить в рецензируемом коде\nОбщая структура. Как код вписывается в ваш проект.\nФункциональность. Способен ли код полностью удовлетворить поставленные задачи.\nУдобство. Интуитивность UI и соответствие его общему стилю.\nМногопоточность. Рецензируемый код не должен конфликтовать с другими элементами кодовой базы при многопоточном выполнении. То же касается и внутренних конфликтов кода.\nПростота. Код не должен быть слишком громоздким. Максимально упрощаем, но не в ущерб качеству и функциональности.\nПерспектива масштабирования. Возможно, в коде могут быть реализованы некоторые возможности, востребованные в будущем, сообщите об этом разработчику.\nНаличие тестов (модульные, интеграционные и так далее). Внимательно изучите их структуру.\nПреемственность разработчиков. Все переменные, поля, функции, вообще все объекты и элементы в коде должны иметь ясные, однозначные имена. Комментарии к коду ясно и чётко объясняют, зачем нужен каждый элемент. Обратите внимание, вопрос «зачем это» важнее вопроса «что это».\nСоответствие стандартам. Код должен соответствовать стандарту стиля и быть должным образом документирован.\nПроверьте каждую строчку кода, рассмотрите весь код в контексте проекта. Удостоверьтесь, что он способствует улучшению кодовой базы. Ну и не забудьте поблагодарить разработчика за интересные решения.\nПоследовательность действий при рецензировании кода\nОцените, имеют ли смысл предложенные изменения.\n Возможно, кодер пытается улучшить фичу, от которой ваш проект собирается избавиться. Направьте его усилия в нужное русло.\nИзучите главную часть рецензируемого кода.\n Если затрудняетесь выделить эту главную часть, спросите разработчика. Найдя какие-то недостатки, немедленно сообщите автору кода. Переходить к изучению деталей кода до исправления основных недочётов нет смысла, вполне вероятно, что впоследствии эти детали значительно изменятся.\nИзучите остальную часть кода\n. Ориентируйтесь на логическую последовательность действий и проверьте каждый файл, возможно, сначала имеет смысл разобрать модульные тесты, чтобы иметь представление о том, какие именно изменения планирует внести разработчик.\nСкорость подготовки code review\nЧем чреваты медленные code review?\nУменьшается скорость работы всей команды. Как цепь не сильнее самого слабого звена, так и команда не быстрее самого медленного её участника.\nВ Google считают, что обозреватель, появляющийся раз в несколько дней с ворохом комментариев, вызывает раздражение и жалобы разработчиков. В компании считают, что гораздо эффективнее незамедлительно реагировать на каждый апдейт от кодера, предлагая пусть и небольшие, но положительно влияющие на качество кодовой базы изменения.\nЧем сильнее вы затягиваете с code review — тем сильнее желание добавить код в базу «как есть», а это чревато ухудшением общего качества.\nКак быстро нужно делать code review?\nВ идеале стоит приступать сразу после получения кода. Постарайтесь уложиться в один рабочий день. Учитывайте часовой пояс разработчика.\nЕдинственное исключение из этого правила — если вы сконцентрированы на другой задаче. Переключение займёт слишком много времени. \nПостепенно вы сможете увеличить скорость работы. Но не делайте это в ущерб качеству.\nРабота с большими объёмами\nПопросите разработчика разбить код на несколько небольших фракций, с каждой из которых можно быстро справиться. Если это невозможно, постарайтесь как можно быстрее прислать хотя бы общие рекомендации по улучшению. Разработчик не должен простаивать.\nЭкстренные ситуации\nИногда дела обстоят так, что скорость становится основным фактором, ради которого приходится жертвовать качеством. В вашем проекте такие ситуации должны быть чётко обозначены. В качестве образца можете свериться с \nгайдом\n Google.\nКак писать комментарии во время рецензирования\nБудьте благожелательны. Вы с разработчиком на одной стороне баррикад. Рецензируйте код, а не кодера.\nНе будьте императивны, поясняйте свои рекомендации и указания. Это поможет разработчику лучше понять и выполнить их.\nОбъясните, чего вы хотите, но не делайте работу за кодера. Как правило, он всё же может сделать её лучше. Помните, разработчику нужно дать возможность развиваться. Опять же, не в ущерб качеству. Ищите баланс.\nПредложите разработчику попробовать упростить код, а если это невозможно — добавить подробные комментарии.\nРабота с возражениями\nРазработчики могут быть не согласны с вашими указаниями. Эти люди работают непосредственно с кодом, так что задумайтесь, возможно, в их возражениях есть резон? Если же вы уверены в своей правоте, попробуйте донести свои аргументы до собеседника. Всегда оставайтесь корректны и внимательно изучайте доводы разработчика.\nНе поддавайтесь на уговоры из разряда «сабмить сейчас, доделаю потом». Возможно, доделает. Но, как правило, нет.\nА вот общие жалобы на излишнюю придирчивость имеет смысл пропускать мимо ушей. Придерживайтесь стандартов, принятых в вашем проекте и требуйте того же от других.\nНе смешно? А здесь смешно: \n@ithumor\nGoogle\n, \nДля продвинутых\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nИгра от Google, в которой можно отточить свои хакерские навыки\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/code_review_icon-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/video/how-to-program-a-game-in-cpp/",
                "title": "Видеоуроки по созданию игры на C++",
                "created_date": "18 октября 2019 в 16:52",
                "body": "Нашли для вас серию видео, в которой автор по шагам рассказывает, как написать свою игру на C++. Эти уроки не требуют каких-то продвинутых знаний, но базовые представления о программировании приветствуются.\nУрок 0 — Введение и подготовка\nВ этом уроке автор расскажет, как пишутся игры. Также вы загрузите компилятор и напишите простой helloworld в Visual Studio, чтобы всё было готово для разработки игры.\nСмотреть урок 0\nСоздание игры от идеи до продвижения после релиза\ntproger.ru\nУрок 1 — Окна и указатели\nЗдесь вы перейдёте к первому шагу на пути к игре: созданию окон. К концу урока у вас всё будет готово для отображения графики в окне.\nСмотреть урок 1\nУрок 2 — Графика\nВ этом уроке вы узнаете, как написать программу для отрисовки фигур на экране. Также по ходу дела автор объяснит некоторые важные вещи вроде того, что такое буфер и зачем он нужен, что есть куча и стек, как запросить у Windows больше памяти и не только.\nСмотреть урок 2\nУрок 3 — Ввод, движение и время\nЭтот урок про то, как создать систему ввода. Вы узнаете, как сохранять состояния кнопки, чтобы легко определять, нажата она или нет. Также речь зайдёт о том, как можно заставить игрока двигаться пока нажата клавиша и как сделать этот процесс независимым от частоты кадров.\nСмотреть урок 3\nУрок 4 — Геймплей, столкновения, улучшение передвижения\nВ этом уроке вы займётесь геймплеем игры. Вы добавите элементы вроде игроков, мяча и арены, а затем разберётесь, как заставить объекты двигаться и как обрабатывать их столкновения.\nСмотреть урок 4\nУрок 5 — Вражеский ИИ, подсчёт очков, завершаем геймплей\nИз этого урока вы узнаете, как создать систему подсчёта очков. Также вы создадите ИИ противника и узнаете некоторые важные вещи об ИИ в играх.\nСмотреть урок 5\nУрок 6 — Завершаем игру\nВ последнем уроке вы завершите игру. Вы реализуете меню, систему отрисовки текста и немного отполируете результат.\nСмотреть урок 6\nУловки в играх: как разработчики заставляют вас чувствовать себя классным\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nC++\n, \nРазработка игр\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nИсчерпывающий список книг для знакомства с C++\n5 популярных IDE для программирования на C++\nБесплатные материалы для программистов",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-3-cover-icon-1.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/industrial-developer-croc/",
                "title": "Чем разработчику заняться в промышленности: компьютерное зрение, машинное обучение, IoT",
                "created_date": "17 октября 2019 в 16:15",
                "body": "Сергей Стрелков, директор по разработке программного обеспечения «КРОК»\nИногда от новостей складывается впечатление, что большинство технологических усилий человечества направлены на новые смартфоны и приложения внутри них. К счастью, я много общаюсь с командами из крупнейших предприятий России и потому знаю: для серьёзного и полезного дела новые технологии тоже применяются, и весьма активно. Хочу рассказать, какие IT-решения сейчас востребованы в промышленности и как можно своими руками их протестировать (спойлер: нет, в КРОК для этого устраиваться необязательно).\nБезопасность\nОфисные сотрудники могут только позавидовать тому, как на предприятиях заботятся о здоровье. Без несчастных случаев и аварий на производстве завод работает как часы, вот промышленники и стремятся к нулевым показателям по простоям, задержкам и, конечно, избегают травматизма и смертности.\nКак этого добиться? Только тотальным и бескомпромиссным контролем. Чтобы не просто пьяных не пускали — даже с похмельным «выхлопом» на объекте никого не было. И чтобы без допуска никто не лез на высоту, а все операции чётко соответствовали регламентам.\nДля этих целей у главного инженера и других руководителей устанавливается специальный интерфейс, где, как в компьютерной игре, визуализируется общая обстановка и события, на которые нужно обратить внимание. Плюс показатели самочувствия сотрудников вплоть до определения уровня стресса. Чуть что не так — пожалуйте в медпункт, проверьте сердце и давление. И везде алкотестеры: на входе, у станков, у электрощитов. Потому что, увы, некоторые герои любят «взбодриться» в обеденный перерыв.\nОдна из самых важных задач — перенесение аналоговых рабочих процессов в цифровую логику программ. А потом ИИ сможет оптимизировать распределение задач: раздавать наряды для оптимальной загрузки станков, учитывая навыки сотрудников, правильно выстраивать процедуры и так далее. А в случае аварии он направит людей к нужным выходам, чтобы избежать жертв из-за паники. Параллельно он будет собирать информацию с умных датчиков, устанавливая по горячим следам причины проблем.\nЭффективность производства\nПро оптимизацию станков силами ИИ мы уже сказали. Ещё есть умная мониторинговая система, которая по звуку определяет, что мотору скоро понадобится ремонт. В отличие от Васильича из автосервиса, эта система реально может диагностировать электродвигатель или другую сложную машину по её шумам. В результате предприятие переходит к модели обслуживания по потребности, что, во-первых, дешевле, а во-вторых, страхует от неожиданностей. Уже сейчас РЖД таким образом ремонтирует вагонные колесные пары.\nНемало усилий направлено и на расширение способностей каждого рабочего. Человек надевает очки дополненной реальности и видит перед собой инструкцию по обращению с техникой. Или может взять в руки сошедшую с ленты деталь, а компьютер оценит, не отправить ли продукт в брак. Это пока в будущем, а из того, что уже вошло в практику — обучение персонала в виртуальной среде, когда они могут в тех же VR-очках побегать по заводу, запомнить, где находится каждый вентиль и что делать в разных ситуациях. Когда завод запустят, сотрудникам нужно будет гораздо меньше времени, чтобы освоиться.\nРоботы\nЭти технологии по сути объединяют в себе два предыдущих раздела. Когда человеку не стоит или не хочется лезть в какую-то зону, он берёт в руки пульт и отправляет вместо себя дрона. Не обязательно летающего: беспилотники устанавливаются на колёсную или гусеничную базу, есть плавающие, лазающие, катающиеся образцы.\nЛично мы самими роботами не занимаемся, но зато разработали софт, чтобы один оператор мог контролировать целые группировки дронов. Можно создавать маршруты, программировать сценарии, всячески автоматизировать работу. Как это используется в реальной жизни?\nОдни компании мониторят состояние растянутых на километры объектов (если мы говорим, например, о трубопроводе). Тепловизоры и прочие специальные штуковины позволяют, например, увидеть утечку и отправить сигнал обслуживающей бригаде.\nДругие предприятия отправляют дроны в карьеры, где они обследуют стенки и сообщают о проблемах. Во время взрывных работ беспилотники позволяют вовсе убрать людей из опасной зоны, не жертвуя при этом эффективностью операций.\nВ агропромышленном комплексе дроны летают над полями: ищут больные растения, обезвоженные участки и всё такое прочее. Есть даже системы для автоматического сбора урожая.\nИ, разумеется, задачи в части аварий и чрезвычайных ситуаций — это актуально всегда и везде. Здесь у нас целая серия пилотных проектов для нескольких производств. До боевого внедрения технологий остаётся 3–5 лет.\nМашинное зрение и всё, что придет в голову\nУмные камеры работают на множестве участков. Причём многие проекты начинаются, когда заказчик делится своей «болью», а наши инженеры ему говорят: «А почему бы не…». Вот примеры.\nКак контролировать усталость водителей большегрузов и защищать их от бандитов в пути? Ставим в кабину умную камеру, чтобы следила за состоянием человека. Комплекс датчиков собирает данные о движении машины и сигнализирует о внезапных событиях вроде открытия дверей фургона, появления попутчиков (или попутчиц).\nКак следить за поведением персонала и доступом в закрытые зоны? Система машинного зрения на ходу снимает людей и ведёт их по объекту. Тут работает не только распознавание лица, но и анализ дополнительных параметров вроде походки.\nКак обеспечить проверку грузов на крупном объекте вроде порта или промышленного склада? Дрон облетает контейнер, проверяет его на повреждения (трещины, коррозию и так далее). В некоторых портах уже есть краны, которые не берут груз, пока дрон не составит и не проанализирует его модель.\nКак проконтролировать стройку на удалённом объекте? Ставим систему, которая в режиме 24/7 считает, сколько привезли материалов, сколько человек реально было на стройплощадке и сколько времени они работали, а сколько — играли в домино. Всё это можно наложить на BIM-модель и соотнести с экономическими показателями.\nХотите попробовать эти решения в деле? Участвуйте в хакатоне КРОК\nТеперь о том, что я анонсировал в начале — как это всё можно пощупать. 16–17 ноября в Москве у нас в КРОК пройдет финал промышленного хакатона ProHack 4.0. Это хакатон с реальными задачами от таких промышленных компаний, как Сибур, ФосАгро, УралХим, Газпром Нефть, Норникель и другие. Задачи такого же плана, что и описанные выше. Например, оптимизировать работу системы вентиляции на предприятии, чтобы она работала не 100% времени, а только если в помещении есть люди. Все задачи хакатона можно посмотреть \nздесь\n.\nА на днях пришла \nбомбическая задача\n от крупного агрохолдинга: детектирование/устранение случаев придавливания поросят свиноматкой. Из описания задачи:\nВ свинокомплексе на небольшой площади (в станке) находится свиноматка, которая недавно опоросилась и кормит родившихся поросят. Свиноматка кормит поросят с момента опороса до 26–дневного возраста. Станок исключает повороты свиноматки, позволяя ей лишь лежать или стоять. Проблема в том, что бывают ситуации, преимущественно на первой неделе после опороса (когда поросята еще недостаточно осторожны), когда свиноматка ложится на пол и случайно придавливает поросёнка. Часть поросят при этом получают несовместимые с жизнью повреждения, а часть можно спасти, если в течение короткого промежутка времени освободить их из-под тела свиноматки.\nЭту и другие задачи участники хакатона попробуют решить с помощью настоящих рабочих инструментов от ведущих мировых вендоров. Мы предложим им высокоскоростной фреймворк Exonum (Bitfury), российскую платформу Мастерчейн, набор промышленных решений от Cisco: инструменты для индустриального Wi-Fi, построения сети LoRaWAN, IoT-платформу Cisco Kinetic, видеонаблюдение Cisco VSM. Пергам поделится своими наработками в области детектирования газов на промышленных объектах.\nПроверить свои гипотезы и апробировать разработанные прототипы вы сможете с помощью гибкой и масштабируемой «песочницы» на основе платформы КРОК Облачные сервисы.\nЗаявить команду на хакатон можно до 1 ноября. Финал — 16-17 ноября в Москве. Основная часть задач уже опубликована \nна сайте хакатона\n.\nНаша цель — доказать, что современная промышленность может сильно выиграть от IT-решений. А эксперты-участники смогут глотнуть свежего воздуха, себя показать и других посмотреть.\nЕсли есть вопросы про хакатон, про IT в промышленности — пишите в комментарии или на \nsstrelkov@croc.ru\n.\nУвидимся!\nИнтернет вещей\n, \nКарьера\n, \nКомпьютерное зрение\n, \nМашинное обучение\n, \nПартнёрский материал\nРекламные публикации для бизнеса:\nsales@tproger.ru\n, \n+7 916 559-71-10",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder_011_065_miner_industrial_man_human_avatar_2515005-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/01/KROK_Strelkov-Sergej-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1901px\" viewBox=\"0 0 1901 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/croc-industrial-vr-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1440px\" viewBox=\"0 0 1440 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/croc-industrial-drones.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"950px\" viewBox=\"0 0 950 351\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/croc-industrial-computer-vision.jpg",
                    "https://cdn.tproger.ru/wp-content/themes/bliss/assets/img/tp-circle2.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-to-win-a-hackathon/",
                "title": "Как выиграть хакатон? Самый полный гид",
                "created_date": "17 октября 2019 в 14:36",
                "body": "Дарья Любицкая, Skillfactory\nКаждый участник хакатона преследует свою цель, и это не всегда выигрыш. Кто-то хочет найти инвесторов для своего проекта, кто-то планирует создать стартап. Для кого-то жизненно необходимо участвовать в соревновании и поймать кураж, а кто-то просто ищет новые таланты в свою команду. Среди плюсов участия действительно не только призы, но и многое другое. На хакатоне вы сможете:\nпознакомиться с новыми людьми;\nсобрать команду единомышленников;\nпротестировать свою креативность;\nпрокачать свои навыки в условиях жёстких временных рамок;\nполучить экспертное мнение от топовых менторов и специалистов;\nполучить опыт работы в стартапе;\nсоздать свой стартап;\nнайти потенциальных инвесторов для своего проекта;\nпродемонстрировать потенциальным работодателям свою креативность и профессиональные навыки;\nнасладиться едой, мерчем и разными плюшками от организаторов и партнёров.\nОднако какими бы разными ни были мотивы, команды участников борются за приз и надеются выиграть, найдя в сжатые сроки лучшее решение! Мы в \nSkillfactory\n проанализировали несколько источников и реальные истории побед (ссылки на них вы найдёте в конце статьи), чтобы понять, есть ли в них сходства, и какие советы можно извлечь из чужого позитивного и негативного опыта.\nИдея\nИдею нужно выбрать заранее, и лучше, если она будет одна. Хорошо, если идея будет неординарной, а её реализация поможет решить какую-то проблему. Сергей Пронин и его коллеги из компании \nEmpatika\n выиграли \nтурнир по программированию PayPal Battlehack\n в Сан-Франциско с благотворительным проектом и забрали приз в 100 000 долларов. «…Мы использовали кейс с едой для бездомных. В США есть проект \nMeals on wheels\n, который развозит еду для бездомных. Если ты хочешь пожертвовать на проект деньги, то требуется заполнить анкету в 24 поля, а мы хотели упростить этот процесс, добавив в такой автобус своё устройство. Наша идея в том, что ты ставишь себе приложение, которое работает через Bluetooth LE. Приложение обнаруживает такие и подобные устройства и позволяет переводить деньги в два касания», — рассказал Сергей в \nинтервью\n для Look At Me.\nИдея не обязательно должна быть связана с благотворительностью, она может быть просто полезной или ощутимо упрощать повседневную жизнь человека.\nКстати, суть идеи стоит предварительно обсудить внутри команды и добиться её общего понимания, чтобы все двигались в одном направлении.\nЕсть мнение, что раскрывать ценные идеи, участвуя в хакатонах, может быть опасно тем, что кто-то их украдёт, выдаст за свои и построит свой бизнес. Конечно, есть вероятность, что найдётся непорядочный человек, который воспользуется понравившейся идеей и решит реализовать её в своей работе. Но во-первых, ваша идея — это только вы и ваша команда, и никто другой до конца и в той же мере не может её видеть так, как вы. То, какие решения вы примете, раскручивая эту идею, какую стратегию создадите — это всё уникально. Только вы представляете, как это вообще будет работать, и подготовленный прототип вместе с презентацией — это только начало. Во-вторых, чтобы кражи идей не происходили внутри команды, необходимо тщательно подходить к её подбору, об этом читайте ниже. К тому же, никто не застрахован от такого в обычной жизни, и даже в бизнесе — но в этой ситуации есть свои плюсы. Бизнес всегда в поисках лучших решений, и какой бы гениальной ни была первоначальная идея, скорее всего, она будет меняться, подстраиваясь под клиента и рынок. Поэтому это всего-навсего один из мифов, который, вероятно, был придуман для оправдания страхов. И хотя осторожность здесь не повредит, бояться точно не стоит! Ведь страх только мешает адекватно оценивать реальность.\nПомимо этого мифа, есть и другие.\n1. Я не профи, потому участвовать не стоит.\nДля участия во многих хакатонах совсем не обязательно быть экспертом. Обладать какими-то профессиональными навыками тоже не нужно: здесь все учатся, и такая атмосфера располагает к открытости — каждый может делиться своими знаниями и идеями. Для того чтобы начать, достаточно базовых навыков программирования и адекватной задачи, соответствующей вашим возможностям. Вы также можете попроситься в команду профессионалов в качестве «стажёра»: возможно, вам не дадут сразу каких-то сложных или ответственных задач, но это хороший способ начать работать в команде и участвовать в хакатонах.\n2. Я слишком молодой/слишком старый для этого мероприятия.\nЭто предубеждение — в хакатонах принимают участие люди самых разных возрастов. Да, возможно, чаще вы встретите там молодёжь от 20 до 30, но это точно не связано с какими-то ограничениями, если они не предусмотрены организаторами. Здесь бывают и школьники, и те, кому за 30, 40, 50 и так далее. Поэтому смело участвуйте, не обращая внимания на средний возраст. Возможно, именно вы нужны своей будущей команде!\n3. Хакатон — удел ребят-гиков, не женское это дело.\nЕсть ещё один миф, что в хакатонах участвуют только технари, и все они — мужчины. Что уж тут, среди технарей вообще мужчин намного больше, чем женщин, но стоит ли об этом переживать заранее? Даже если вы будете в меньшинстве, то помните, что у идеи нет ни пола, ни расы, ни возраста, и ваша ценность — в вас самих, независимо от чего-либо. Поэтому забудьте про ограничения и развейте этот миф своим примером!\n4. В атмосфере соревнования и конкуренции все готовы буквально идти по головам.\nНесмотря на то что команды действительно борются за один приз, среда на хакатонах дружественная и скорее напоминает сотрудничество, чем конкуренцию. А атмосферой взаимопомощи и открытости сложно не проникнуться.\n5. Если я не займу первое место, мне нечего там делать.\nПоследний в нашем списке миф — это сложная тема выигрыша и поражения. У каждого свои цели и интересы, но сюда приходят не только и не столько за тем, чтобы победить. Участники делятся своим опытом, знаниями, вдохновением, идеями, и эта атмосфера креатива и общего драйва не оставляет равнодушным никого. Даже если участие не принесёт победы, у вас будет куча бонусов, и главный из них — уникальный опыт, который навсегда останется с вами.\nПодготовка\nЗалог спокойной работы и сохранности нервной системы. Подготовить то, что на хакатоне делать будет просто невозможно или некогда. Например, подобрать всю нужную аппаратуру: рабочие ноутбуки, планшеты (или что-то другое, на чём вы любите кодить и творить), заряженные телефоны с номерами участников вашей команды, переходники, 3G-модем. Как правило, на ивентах есть свой Wi-Fi, но сигнал бывает слабым из-за большого количества участников, а иногда сеть совсем отключается, и у вас не будет времени искать помощи и что-то выяснять. Борис Працюк из команды \nCiklum\n, которая стала победителем ивента IoT for Cities Hackathon, \nрассказал\n: «…Так, на недавнем хакатоне в Санта-Кларе, IoT world, нас спас портативный 3G Wi-Fi модем, запасная портативная батарея и паяльник. Модем позволил подключить наш концепт во время финальной презентации к нашему облачному сервису. А батарея, провода и паяльник вдруг оказались очень кстати, когда перед самым началом финальной презентации на блоке питания платы отломился USB-разъем. Вряд ли бы мы достойно выступили и получили в итоге первое место, если бы нам не удалось быстро всё починить прямо на месте…»\nПодготовка, кстати, может касаться не только аппаратуры. Это может быть всё, что вам придёт в голову и что разрешено правилами хакатона. Заранее писать код, конечно, нельзя, и за этим обычно следят отдельные эксперты. Иногда его предлагают залить в репозиторий, благодаря которому после можно отследить, как создавался каждый код. Но вы можете обдумать саму идею: поизучать технологию, если с ней придётся работать. Арина Бойкова, маркетолог и участница хакатона SEMrush, \nподелилась\n своим опытом проигрыша на портале VC.ru, и вот какой урок она вынесла: «…Главный вывод этого этапа — заблаговременная подготовка. Я могла заранее создать контент-план, продумать, как рассказать об инструменте журналистам заранее, а начала готовить это по окончании презентаций и потеряла кучу времени…» Вот так победители и проигравшие считают одинаково полезным готовиться к хакатонам заранее. Кстати, нелишним будет и поразмышлять над возможными трудностями реализации вашей идеи, проблемами, которые вы можете предугадать уже сейчас. Так даже в условиях ограниченного времени, у вас сохранится чувство контроля над ситуацией: план А провалился — приступаем к плану Б!\nКоманда\nНайти сильную команду, которая сложилась с первой встречи, — это как выйти из Vim с первой попытки: мало кто о таком слышал и ещё меньше тех, у кого это получалось. И чтобы обезопасить себя от неожиданных сложностей в общении или, что ещё хуже, неразрешимых конфликтов, идите на хакатон с проверенными людьми или с теми, кому вы можете доверять в профессиональном плане. Это необязательно ваш лучший друг или подруга, но это может быть тот, чьими талантами вы восхищаетесь или тот, кто вас когда-то впечатлил своими идеями и навыками. В общем, выбирайте совладельцев вашего проекта. Ведь у вас будет общая цель, и к ней лучше идти сообща. Кстати, вы можете спланировать и конкретный состав своей команды, то есть чётко разделить роли. Участник 55 хакатонов, Гарри-Яу Чен, например, \nсоветует\n обязательно включить в команду фронтендера. Он объясняет это тем, что фронтендер «отвечает за дизайн, от идеи до концепции, а вам нужно создать красивый UI и UX за каких-то 24 часа». Гарри также предлагает делать упор на незаслуженно забытых специалистов по развитию бизнеса. Он считает, что эти эксперты могут представить ваш проект, описав его в категориях рынка и найти правильные слова, которые убедят потенциальных клиентов и жюри.\nРабочий подход\nЛучшее — враг хорошего. Хакатоны бывают разными, и их формат уже давно не укладывается в 24 или 48 часов. Но так или иначе, ваше время ограничено, поэтому не стоит давать волю своему внутреннему перфекционисту или поддаваться скрупулёзности вашего напарника. На работе у вас есть чёткий привычный план, который отлично подходит для ваших задач, но на хакатоне вы можете потратить кучу времени на мелочи или вообще не добраться до финала. Определите границы конкретных работ, отбросьте все манипуляции, без которых можно обойтись именно сейчас, и настройтесь на ускоренный режим. Так у вас будет преимущество перед другими командами: вы будете легко адаптироваться к любым нововведениям и изменениям плана.\nПрезентация\nКачественное демо — это отличный шанс произвести впечатление на жюри, участников, партнёров и потенциальных инвесторов. Это кульминация всего ивента. Заранее выберите в своей команде спикера, попросите его подготовить речь часа за 2–3, в это же время завершайте все работы и начните готовиться к презентации. Можно потренировать речь друг перед другом, задать спикеру предполагаемые вопросы и проработать ответы, чтобы выйти к жюри уже более уверенными. Нет ничего хуже, чем придумать отличную идею, разработать классную концепцию, прототип, но сделать скомканную презентацию. Вы наверняка бы стали себя корить, если завалили бы эту последнюю часть.\nПолезно также обозначить разницу между тем, что было в начале, и тем, что в итоге получилось. Ваш труд точно не останется незамеченным.\nГарри-Яу Чен советует сделать демо интерактивным и выстраивать диалог с аудиторией, более подробно читайте в его статье \nУльтимативный гид о том, как выиграть хакатон в 8 шагов (англ.)\n. А Борис Працюк из Ciklum \nсчитает\n, что презентация идеи — это 30% успеха.\nСон\nЗдоровый сон никому не помешает. Да, хакатоны, как правило, длятся от 24 до 48 часов, в условиях напряжённой работы и мозгового штурма каждые полчаса могут сыграть роль. Но у каждого участника свои особенности: кто-то в ситуации стресса включается и ускоряется, а кто-то притормаживает, сохраняя ценную энергию. Каждый сам оценивает свои силы и планирует ивент. Но мы точно уверены, что качественный сон усиливает активность мозга и способен придать сил, энергии, а в известных истории случаях и способствовать рождению гениальных идей! Поэтому здесь важно грамотно распределять усилия и учитывать свои физические возможности, чтобы провести хакатон в оптимальном для вас режиме.\nИтак, мы обозначили самые важные, на наш взгляд, «правила игры» на хакатоне, собрав опыт нескольких участников разных ивентов. Несмотря на то что все советы участников похожи, мы всё же не верим, что есть некий общий рецепт победы. Для каждого победителя он уникален. И это огромный плюс, ведь это значит, что шанс создать свой рецепт и выиграть есть у любой команды!\nПолезные источники для вдохновения:\nИстория Сергея Пронина и его коллег из Empatika\n.\nИстория маркетолога Арины Бойковой и её проигрыша\n.\nИстория Гарри-Яу Чена, который побывал на 55 хакатонах\n.\nИстория Бориса Процюка из Ciklum\n.\nСоветы от Олега Мансурова, руководителя конкурса «Цифровой прорыв»\n.\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-12-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/image1-e1570626836239-150x150.jpeg"
                ]
            },
            {
                "url": "https://tproger.ru/devnull/what-is-a-1x-engineer/",
                "title": "Кто такой 1x-программист? — несерьёзный разбор на Tproger",
                "created_date": "16 октября 2019 в 18:28",
                "body": "Перевод статьи \n«WHAT IS A 1X ENGINEER?»\nВозможно, вы слышали о \n10x-программистах\n. Эти ребята работают в 10 раз лучше (с точки зрения производительности или качества работы), чем их коллеги по цеху. Но раз есть 10x-программисты, значит, должны быть и 1x? Какими качествами мог бы обладать такой программист?\n1x-программист:\nГуглит, когда в чём-то не уверен.\nТратит время на другие вещи помимо программирования, например хобби, друзей или семью.\nПишет код с — \nвздох \n— багами.\nПишет код, который могут прочесть другие.\nЧитает доки.\nОбновляет доки.\nНе обязательно помешан на коде, который пишет, или задаче, которую решает.\nНе удивляется, когда кто-то чего-то не знает.\nХочет и может взаимодействовать с другими.\nУмеет признать, что был неправ, и не боится сказать «Я не знаю».\nПомогает другим прокачать свои навыки.\nКопипастит код из StackOverflow.\nЗадаёт вопросы.\nМожет любить или не любить писать документацию, но всё равно делает это для будущих разработчиков.\nУмеет быть благодарным за потраченные время, усилия и энергию других людей.\nЦенит конструктивные и полезные код-ревью от коллег.\nПредоставляет конструктивные, полезные, тактично поданные код-ревью, которые помогают коллегам расти как в личном, так и в профессиональном плане.\nПросит помощи, когда нуждается в ней.\nМожет иметь красочный фон рабочего стола.\nПоддерживает код на продакшне, даже если не он его написал.\nПорой может чувствовать себя самозванцем.\nСледит за тем, чтобы обсуждения всегда были продуктивными и у всех была возможность высказать своё мнение перед тем, как команда примет решение. Не считается с чужим мнением только при наличии аргументов.\nСоздаёт сообщество и делится знаниями.\nНикогда не перестаёт учиться.\nЖелает выйти из зоны комфорта.\nВносит вклад в сообщество.\nМожет медленно писать код.\nНе хейтит фреймворк Y, если работает с фреймворком X.\nИногда делает небольшие перерывы, чтобы проветрить голову.\nМожет работать как продуктивно, так и не очень.\nНе воспринимает себя слишком серьёзно.\nКосячит время от времени.\nГоворит: «Я никогда не слышал об этом», — вместо того, чтобы кивать и притворяться, что это не так.\nЗаслуживает доверия.\nРаботает, чтобы жить, а не наоборот.\nИмеет любимый редактор, браузер и операционную систему, но понимает, что у других тоже есть свои любимчики.\nЗнаете ещё какие-нибудь качества 1x-программистов? Делитесь в комментариях.",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-9-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-to-have-a-useful-rest/",
                "title": "Отдыхать — не работать: как провести свободное время с пользой для профессионального развития",
                "created_date": "15 октября 2019 в 17:25",
                "body": "Дмитрий Вдовин, старший программист группы разработки карты рассрочки «Совесть»\nПомните известную фразу из книги Льюиса Кэрролла «Алиса в стране чудес»: «Нужно бежать со всех ног, чтобы только оставаться на месте, а чтобы куда-то попасть, надо бежать как минимум вдвое быстрее»? Эта позиция настолько актуальна сегодня, что в поиске личной эффективности и высоких достижений всё сильнее стираются границы между рабочим и личным временем. Речь не о переработках, как вы могли подумать, а о том, что досуг тоже можно провести с пользой для профессионального развития. Дмитрий Вдовин, старший программист группы разработки карты рассрочки «Совесть», делится четырьмя простыми способами идти в ногу с последними трендам в IT.\nСпособ 1: поймать волну искусственного интеллекта\nИскусственный интеллект стал реальностью нашей повседневной жизни: банки опираются на ИИ в обслуживании клиентов или защите от мошенничества, в медицине ИИ позволяет быстрее анализировать большой массив данных о пациенте и назначать наиболее оптимальный вариант лечения, а сервисы потоковой передачи музыки и медиа (например Netflix, Spotify и YouTube) могут фактически за вас принимать решения о том, что вам сегодня послушать или посмотреть. Кажется, внедрение искусственного интеллекта — must have для любого бизнеса. Поэтому даже если сейчас вы не участвуете в реализации проектов, где необходимы знания в Data Science, изучить матчасть и быть готовым к новым вызовам времени не помешает.\nТри книги, которые вам в этом помогут:\n«Академия» (Айзек Азимов)\n. Классика научной фантастики и первая книга грандиозной трилогии автора, цифровую копию которой вместе с двумя последующими частями Илон Маск отправил к орбите Солнца на борту Falcon Heavy, и экранизацией которой сейчас занимается Apple.\n«Человек + машина. Новые принципы работы в эпоху искусственного интеллекта» (Пол Доэрти, Джеймс Уилсон)\n. Эта книга позволит оценить в полном объёме влияние ИИ на бизнес и общество. Авторы собрали лучшие примеры из разных секторов экономики, уже полноценно внедривших новые технологии в работу, и описали набор действий, которые нужно предпринять руководителям компаний для внедрения ИИ во все процессы.\n«Искусственный интеллект. Этапы. Угрозы. Стратегии» (Ник Бостром)\n. Профессор факультета философии Оксфордского университета, основатель и директор Института будущего человечества, рассуждает о том, смогут ли люди взаимодействовать с машинами, если они превзойдут нас в интеллекте, и какие перспективы станут возможными, если мы будем сотрудничать.\nСпособ 2: наращивать кросс-компетенции\nAgile продолжает покорять российский рынок IT и Software development семимильными шагами. И вместе с собой «привносит» культуру кросс-функциональных команд и самоорганизацию. Конечно, это вовсе не про то, что каждый «и швец, и жнец, и на дуде игрец». Речь о том, что в команде должны присутствовать все необходимые компетенции для создания продукта (то есть отдельно швец, жнец и на дуде игрец). Но для успешного взаимодействия друг с другом, обоснования собственной профессиональной позиции,, вам обязательно потребуются знания в смежных областях, коммуникативные навыки. Онлайн-обучение — эффективный способ восполнить пробелы в знаниях и подтянуть soft skills. Вы точно найдете полезные лично для вас направления и курсы, например на порталах coursera.org, GeekBrains, cybermarketing.ru, techdays.ru, Code Academy.\nНапример, полезно будет:\nНаучиться современным подходам, процессам и методам проектного управления\n.\nУглубить свои знания о Java\n.\nПрокачаться в психологии коммуникации\n.\nСпособ 3: не упускать из вида игровую реальность\nПо данным компании Newzoo, игровой рынок по итогам 2018 года вырос на 13,3 % — до 137,9 млрд долларов (это больше, чем годовой доход Google — у них в том же году было 136,22 млрд долларов), а к 2021 году глобальный доход игровой индустрии превысит $180 млрд. Поэтому неудивительно, что многие компании увеличивают инвестиции в разработку и продвижение новых игр. «Базовый набор» для разработки десктопных, мобильных игр и даже MMORPG включает в себя наличие хорошего компьютера, знаний C/С++, доступа к Unity / Unreal Engine / Torque или другим игровым движкам, а также программного интерфейса или стандарта API для рисования трёхмерной графики и сцен. Но плох тот разработчик игр, который сам не играет. А тут открывается целый мир удивительных игровых приставок, геймпадов, контроллеров… и виртуальная и дополненная реальность!\n3 гаджета с CES 2019, которые будет интересно потестировать программистам и уже можно купить:\nИгровой ноутбук m17 Alienware от Dell\n. Один из самых лёгких 17-дюймовых игровых лэптопов в мире. Он весит 2,63 килограмма, а максимальная конфигурация может включать в себя Intel Core i9-8950HK и GTX 1080. Новенькие мобильные графические чипы NVIDIA GeForce RTX тоже имеются.\nГарнитура игровая HYPERX Cloud Alpha Purple\n. Оснащена технологией двойных акустических камер Dual Chamber Technology и крупными динамиками, диаметр которых 50 мм. Это позволит максимально насладиться качеством звука во всех частотных диапазонах.\nОчки виртуальной реальности HTC Vive Pro Eye\n. Шлем имеет встроенную систему отслеживания движений глаз пользователя, то есть взаимодействие с объектами осуществляется в прямом смысле «силой взгляда». Благодаря этому система оптимизирует рендеринг сцены, и ресурсы акцентируют внимание на необходимой области изображения.\nСпособ 4: не забывать о кибербезопасности\nКиберпреступность — такая же реальная и осязаемая угроза, как глобальное потепление или стихийное бедствие. Помните же массовый вирус WannaCry, который потряс мир в 2017 году? Ущерб тогда оценили в один миллиард долларов. И реальность такова, что чем больше физического мира «попадает» под цифровое управление, тем выше потенциальная опасность и последствия возможных кибератак. Сложно сказать, где сегодня можно увидеть более интересные сюжеты по теме — в новостных сводках или кино. Из последних мною просмотренных могу выделить три фильма, которые отвечают «на злобу дня» и достойны внимания:\nБольшой хак /The Great Hack, 2019\n.Под «крылышком» Netflix рассказывается известный прошлогодний скандал вокруг компании Cambridge Analytica, связанный с выборами президента в Америке и манипулированием данными миллионов пользователей Facebook. История раскрывается от лица тех, кто был непосредственным участником процесса.\nАпгрейд / Upgrade, 2018\n. Фильм интересен с точки зрения «взлома» человеческого мозга. Главному герою после аварии приходится внедрить экспериментальный микрочип под названием Стем. Он наделяет человека сверхспособностями и даже пытается «захватить власть». Кто победит? От сценариста Пилы, между прочим.\nУбрать из друзей: Даркнет, 2018\n. Главный герой этого сиквела находит чужой ноутбук и во время беседы с друзьями по скайпу понимает, что у него в руках компьютер преступника. С ребятами начинают происходить ужасные происшествия, в том числе взлом их аккаунтов с целью манипуляции. До какой степени это может дойти, удастся ли им спасти свои жизни и без последствий покинуть даркнет — смотрите сами.\nБудьте в тренде, следите за тенденциями и помните: «Мало кто находит выход, некоторые не видят его, даже если найдут, а многие даже не ищут» (всё тот же Льюис Кэрролл и «Алиса в стране чудес»).\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-4-cover-icon-3.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Vdovin-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/bad-programmers-habits/",
                "title": "Какие привычки программистов мешают писать хороший код и как от них избавиться — отвечают эксперты",
                "created_date": "14 октября 2019 в 17:41",
                "body": "Костыли, велосипеды, ненужный рефакторинг — список вещей, об которые может споткнуться начинающий (и не очень) программист, можно продолжать долго. О том, какие плохие привычки встречаются у программистов и как с ними бороться, мы решили узнать у наших экспертов.\nАлександр Патлух\n, \nразработчик образовательных программ в «Яндекс.Практикуме»\nМы видим много новичков в веб-разработке, мы их учим. Многие меняют жизнь кардинально и не обладают никаким опытом, а кто-то приходит к нам, попробовав что-то на других платформах. У большинства можно встретить типовые ошибки и заблуждения, которые ведут их не туда, мы стараемся корректировать поведение студентов и обращаем на это внимание.\n\nКогда только начинаешь кодить, у тебя всё получается, ведь задачи перед тобой стоят простые. В этот момент легко очароваться и почувствовать своё всемогущество. Рынок стонет и рассказывает нам, как много неадекватных джунов приходит на собеседования. Это напрямую связано с опасным заблуждением новичков, что они уже классные, если могут что-либо собрать на определённом стеке. Нужно помнить, что профессионала не в последнюю очередь определяет количество ошибок и проблем, с которыми он справился.\nЕсть другая сторона медали. Встречаются новички, которые боятся ошибок, а они случаются у всех. Часто ребята опускают руки, понимая, что код постоянно не работает. На самом деле ошибки — это помощники программиста. С ними нужно учиться работать, как и с любыми технологиями. Профессионалы больше проводят времени с нерабочим проектом, чем с рабочим, ведь в этом и есть цель — включить что-то неработающее или исправить проблему.\nТретья группа заблуждений связана с самими технологиями. Для большинства задач уже написаны библиотеки, которые упрощают написание кода. Но это не значит, что надо сфокусироваться на изучении библиотек. Если ты действительно хорошо знаешь JavaScript и добавляешь к этому базу computer science, тебе не важно React, Vue, Angular или новенький Svetle указан в ТЗ. Просто нужно время на чтение документации. Словом, нужно всегда стараться смотреть на более низкий уровень технологий и разбираться, как всё работает «под капотом».\nЕсть ещё проблема нежелания расширять кругозор, предпочитая учить что-то одно. Безусловно, на старте нужно привыкнуть к новому синтаксису или особенностям какого-то языка программирования или фреймворка. Но на самом деле учиться надо программировать, а не писать на чем-либо. Программирование — это не про конкретный язык, это про то, как писать инструкции компьютерам. Человечество многогранно изучило этот вопрос ещё до появления JS или Python. Парадигмы, паттерны, структуры данных, алгоритмы — это всё великое наследие, не стоит им пренебрегать.\nОтдельно в этом контексте хочется отметить новичков, которым нравится верстать, но они не могут назвать хотя бы три студии или дизайнера, чьи работы их вдохновляют.\nНапоследок самое, пожалуй, неочевидное. Изучая программирование, необходимо тренировать не только хард скиллы, но и софт скиллы. Умение задавать вопросы на Stack Overflow, проходить собеседование, вести себя в технической команде, — часто про это забывают. При этом, быть приятным человеком со знанием основ часто лучше, чем быть гуру, но мерзавцем.\n54\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n54\nПовысить\nПонизить\nНаталья Тищенко\n, \nSMM-специалист в компании Seven Winds Studio\nМногие новички считают свой код идеальным, но они заблуждаются. Идеального кода не существует! Любой код имеет возможности совершенствоваться. Как сказал один из наших программистов:\nСколько бы лет ты не занимался написанием кода, новый всё равно будет лучше и лучше предыдущего.\nУ начинающих разработчиков, узнавших о новом фреймворке или изучавших новый язык программирования, часто возникает непреодолимое желание прямо здесь и сейчас переписать проект с нуля, «теперь-то уже точно правильно». Поспешим расстроить — это плохая практика. Реальность такова, что за каждым проектом обычно стоят бюджеты и сроки. Остановка разработки на несколько месяцев при переписывании проекта обычно никому не нужна. Постепенное переделывание проекта по модулям — хорошо. Снос до основания и переделывание с нуля — плохо.\nЕщё один из немаловажных вопросов — стоит ли бояться костылей? Нет, но к ним нужно относиться настороженно. Это рабочий, но не универсальный код, который желательно отметить комментарием. Костыли могут теряться со временем и при расширении/увеличении программы костыль скорее всего сломается/придётся от него избавиться. Костыли — это меньшее зло. Большее — сорвать сроки!\nЛюбому программисту всегда следует читать мануалы. Мануалы — любая литература/статьи/обзоры/видео по той теме которую делаешь. Причем начинать можно с азов: if, переменные, память, — и до чего-то объёмного: паттерны, архитектуры кода и что-то обособленное — VR, вёрстка, оптимизация. Если застряли — спрашивайте у опытных товарищей или на форуме. Можно сначала поискать информацию в интернете, а можно сразу бежать за советом — это вопрос совести.\nЧужой код — это ловушка. Если вы не знаете, как это работает, — значит, не знаете и результат работы кода.\nПлагин = чужой код, который ты не знаешь.\nБудьте всегда готовы, что ОНО обновится и отвалится. Поэтому плагины стоит использовать с осторожностью.\nДля того, чтобы у вас как у начинающего программиста получился хороший код, необходимо придерживаться следующих правил:\nСледуйте стандартным правилам оформления кода.\nПишите комментарии к своему коду в процессе написания. Что делает каждая из функций, её положительные и отрицательные стороны. Также стоит помнить, что лучший комментарий — это говорящие сами за себя названия функций и переменных.\nНе копируйте чужой код. Вместо этого изучите его. Как он работает и будет ли он полезен вам?\nИзбегайте использования аналогичных кусков кода.\nНе забывайте проверять свой код на наличие ошибок.\nПроектируйте код с расчётом на дальнейшее расширение функциональности.\nНе полагайтесь на то, что определённые типы данных (integer, указатели и временные метки) будут иметь конкретную длину (например 32 бита), потому что этот параметр отличается на разных платформах.\nВ профессии программиста существуют как хорошие, так и плохие привычки, но всё зависит именно от вас. Как вы распределяете своё время и насколько стараетесь совершенствовать свой код. Помните, что любой код имеет свойство устаревать.\n5\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nМихаил Андрейков\n, \nSenior .NET Developer в «Циан»\nПерфекционизм\nБывало ли у вас такое, что вы пишете код, потом понимаете, что могли бы сделать его более понятным или производительным, а потом начинаете усердно перерабатывать эти строки кода? Загвоздка заключается в том, что вас вновь не устраивает полученный результат, и вы думаете про себя: «Тут можно лучше назвать переменную, это лучше вынести в функцию», — и далее по списку. В итоге вы тратите много времени, а код становится лишь более понятным. Получается, что вы придерживаетесь «перевёрнутого» правило Парето: тратите 80 % усилий и получаете 20 % результата. Я ни в коем разе не призываю не рефакторить код во время его написания, но нужно держать во уме ту грань времени, после которой вы честно можете себе сказать, что нельзя сейчас всё сделать идеально и что будете двигаться дальше в решении задачи, а по прошествии времени, когда вы вновь столкнётесь с этим кодом, у вас уже может быть другое мнение о том, как организовать этот участок кода, и тогда вы сделаете это быстро.\nРанние оптимизации\nИногда программист, прочитав статью «трюки и оптимизации», начинает повсеместно использовать найденные решения, не задумываясь о недостатках приёмов. Оптимизация является противоположностью рефакторинга, т. к. оптимизации делают код более простым для понимания компьютера, а рефакторинг — для человека. И каждый раз, когда вы будете заменять деление на два на смещение или хитро храните два значения в одном поле, стоит понимать, что вы сохраните 1 байт памяти или наносекунды процессорного времени, но потеряете в лёгкости чтения кода, что усложнит поддержку компонента.\nРешайте проблему производительности по мере её поступления, т. к., возможно, никакие оптимизации и не потребуются. Дополнительная задержка, которая в итоге получается из-за отсутствия этих оптимизаций, может никак не ощущаться конечным пользователем.\n«Велосипеды»\nТут всё просто: всегда перед решением задачи проверяйте, не решил ли её кто-то другой. Да, написание своего это всегда увлекательно, но то количество времени и багов, которое в итоге вы получите, часто не стоит того.\nПренебрежение трендами\nИТ — это такая область, где что-то новое появляется и меняется достаточно часто. Это могу быть новые подходы к решению задач, фреймворки, алгоритмы и многое другое, что может ускорить и упростить работу.\nЧтобы избежать закостенелости, не обязательно каждый день что-то читать про IT. Достаточно раз в полгода/год ходить на конференции или митапы, чтобы послушать, как сейчас решают различные задачи в других компаниях или же почитывать тематические блоги.\n«Одинокий рейнджер»\nНаверняка вы сталкивались или столкнётесь с человеком, который всю работу хочет делать сам и более никому не доверяет. Вся проблема заключается в том, что один человек не может «закрывать» все задачи проекта, да и пропускная способность выполнения проекта будет сильно ограничена одним человеком. Плюс ко всему такие люди не растут карьерно, так как поставить на их место некого, потому что никто не знает специфику этого проекта, а рейнджер не даёт ничего делать другим в этом проекте. Несмотря на дополнительные издержки в виде коммуникации, старайтесь работать в команде — это упрощает работу как вам, так и проекту.\n53\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n53\nПовысить\nПонизить\nЗаал Льянов\n, \nдиректор по управлению проектами, руководитель тренинг-центра ЕРАМ в Санкт-Петербурге\nНе практиковаться ежедневно\nПисать код нужно ежедневно, как и делать утреннюю зарядку. Любое действие должно обязательно сопровождаться практикой: изучил теорию — попрактиковался. Причем важно также упражняться в тех вещах, которые прямо сейчас в проекте не задействованы, но которые позволяют держать пальцы «разогретыми».\nНе делать физическую зарядку\nЕсли тело находится в тонусе, то и мозг находится в тонусе и активно снабжается кислородом. Поэтому важно двигаться, заниматься спортом.\nПытаться сначала всё до конца продумать в голове и только потом писать\nНеобходимо постоянно пытаться что-то делать, действовать методом проб и ошибок. Должны быть короткие циклы разработки: придумал, написал, попробовал. Понравилось — оставил, не понравилось — придумал что-то новое.\nЦепляться за первоначальный вариант\nПытаться бесконечно улучшать, стиснув зубы, доводить до конца одну идею, несмотря на то, что уже понимаешь, что не очень хорошо получается, — это плохая привычка. С одной стороны, конечно, такое упорство похвально, но я рекомендую начинать с нескольких вариантов и каждый из них доводить до этапа, на котором становится понятно, какой лучше. Тогда плохой оставляете и работаете с хорошим.\nНе общаться с себе подобными, замыкаться в себе\nНужно обязательно посещать мероприятия, участвовать в жизни сообщества, желательно поработать на open-source-проектах, с другими разработчиками, послушать замечания других о своём коде — это очень сильно помогает развиваться.\n69\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n69\nПовысить\nПонизить\nСергей Ширкин\n, \nдекан факультета Искусственного Интеллекта в онлайн-университете GeekUniversity\nВ каждом языке может быть своя специфика, но есть универсальные ошибки, которые верны для любого языка программирования.\nКод без комментариев\nНе обязательно комментировать каждую команду, но желательно прописывать основные моменты. Это важно, так как с кодом, возможно, будут работать и другие программисты, которым желательно не тратить много времени на разбор чужих программ.\nНенужное усложнение\nВ программировании почти всегда одни и те же действия можно сделать несколькими способами. Желательно выбирать не только самый эффективный из них, но и следить за тем, чтобы код не был избыточно усложнён.\nНеоттестированный код\nОчень часто бывает так, что начинающий программист добавляет в проект код, который работает только при каких-то определённых условиях и не работает при других. Перед добавлением изменений всегда лучше убедиться, что программа знает, как себя вести при любых действиях пользователя.\nНезнание алгоритмов и структур данных\nНужно знать базовые алгоритмы и быть осведомлённым о наличии разнообразных алгоритмов не только для того, чтобы пользоваться готовыми решениями, но и для того, чтобы понимать сильные и слабые стороны своих программ и учиться ускорять их работу. Также важно правильно выбирать структуры данных — это залог быстрой работы программы.\nНеумение пользоваться IDE\nНе обязательно знать среду разработки в совершенстве, достаточно знать то, что пригодится в ежедневной работе. Например, для программиста Python умение пользоваться такими возможностями PyCharm, как удалённая отладка, поддержка Git, автоматический рефакторинг, горячие клавиши для повторяющихся действий, значительно ускорит работу с кодом и позволит не тратить время на второстепенные вещи.\nНеумение пользоваться Git\nК чему только не прибегают программисты, не желающие пользоваться системами контроля версий. В лучшем случае они хранят версии своего кода в папках с трудночитаемыми названиями, а иногда и вовсе редактируют программу, никак не фиксируя свои изменения и не сохраняя предыдущие версии кода.\nНеумение искать информацию\nДля развития в программировании нужно использовать разнообразные источники: курсы, книги, сайты для программистов, поисковые системы. Типичная ситуация: новичок в программировании покупает учебник, спотыкается на какой-либо теме и в итоге бросает занятия.\nВообще, для книг можно применять такое правило: покупать по одной теме не одну, а хотя бы три книги, и если хотя бы одна из них помогла разобраться, то это уже хорошо.\n41\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n41\nПовысить\nПонизить\nЮрий Пономарев\n, \nконсультант по программным продуктам Oracle Центра технической поддержки компании РДТЕХ\nСамая плохая привычка — не вносить изменения в документацию. Проектное время должно расходоваться преимущественно на создание кода. И начинающие программисты часто задаются вопросом: зачем вообще нужна документация и строгая нумерация в ней, зачем нужны отметки об исполнении не только в Jira, но и на бумаге. По итогу человек, не придерживающийся технологии работы с кодом, может украсть 2–3 дня квалифицированной команды, которая, конечно, разберётся, что и как сделано, но слов ругательных скажет много.\nЛечение — только в отстроенном технологическом процессе. Чем «махровей» энтерпрайз, тем меньше он доставляет головной боли. Кстати, хорошие продукты, производимые под свободными лицензиями, это давно поняли и тоже стремятся к разумному и документированному взаимодействию.\nЕщё про костыли. Есть наборы продуктов, которые без костылей не запустить никак. Более того, сочетание версий костылей библиотеках Python 2 и 3 — отдельная тема на многих конференциях для разработчиков. Даже крупные вендоры выпускают патчи при смене парадигмы костылей. Поэтому исправление плохой привычки следующее: используешь костыль — отладь, оттестируй, выступи в группе или на форуме. Можешь создать бескостыльную систему — делай. И документируй. Не будь отрицательным примером!\nТеперь касательно велосипедов. Конечно, на собеседовании и тестовых примерах можете демонстрировать хоть знание Кнута, Ахо, Страуструпа или иных гуру. Но как только написано «алгоритм должен/может/обязан», — конец творчеству, конец велосипедам. Берём мануалы по языку, библиотекам, на худой конец идём на курсы. Мы физически не можем закладывать логическую бомбу внутрь промышленного изделия. Иначе восьмёрки на колесах нашего велосипеда могут подорвать любой бэкенд. Пример: на ряде промышленных систем чёрный цвет на снимках фотограмметрии стал серым, так как никто не мог додуматься, что при смене архитектуры чипа может поменяться алгоритм закраски фона белым цветом. Тут нужна комплексная борьба — так как графические системы ваяются чуть ли не на коленках. И велосипед одних может врезаться в дерево других.\n5\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n5\nПовысить\nПонизить\nАлександр Лебедев\n, \nтимлид фронтенд команды «МойОфис»\nУ большинства ошибок начинающего программиста общая причина — привычка сразу браться за работу без предварительного обдумывания задачи. Как это проявляется?\nУслышал задачу и сразу побежал делать. Позже выясняется, что заказчик пришёл с собственной идеей того, как решить некоторую проблему. Если бы разработчик спросил, что за проблему нужно решить, то сразу бы увидел, что есть более удачное и, при этом, более простое решение.\nУслышал задачу и побежал писать код. Через неделю мучений выясняется, что можно не писать своё решение, а найти и интегрировать готовую библиотеку.\nУслышал задачу, придумал решение и побежал реализовывать. Через пару дней наткнулся на проблему, наличие которой было бы очевидно через 10 минут размышлений о деталях придуманного решения.\nПолучил задачу и побежал делать. А можно было бы подумать о том, что задача для компании типичная, её наверняка уже решали — и за полдня найти коллегу с опытом и готовым решением.\nНаткнулся на проблему при отладке, исправил — возникло две новых. Исправил их — возникло ещё несколько. И так много раз. Если немного подумать о причинах возникновения исходной проблемы, то можно было бы найти архитектурный дефект и разбираться уже с ним, а не с симптомами.\nУвидел плохой код — сразу начал его рефакторить. А потом связанный код. А потом код, связанный с кодом из предыдущего шага — до бесконечности, так и не получив полезный результат из-за невозможности стабилизировать изменения. А можно было бы подумать об актуальности рефакторинга в этом месте и лучшем способе его сделать — и спланировать такие изменения, на которые точно хватит времени.\nС опытом привычка сначала думать, а потом делать появится сама. Но лучше осознанно обращать на это внимание — так можно дойти до образа мышления опытного разработчика гораздо быстрее.\n66\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n66\nПовысить\nПонизить\nЕвгений Лопатин\n, \nдиректор департамента разработки «Инфосистемы Джет»\nВо-первых, мы не любим документировать. Частый девиз — код и есть лучшая документация. А когда нужно допилить систему спустя несколько лет, и автор давно уже недоступен, начинаются проблемы.\nВторое пагубное влечение — мы не любим читать требования. Они такие длинные, такие детальные, в них порой всё так подробно написано и разжёвано… но мы-то лучше знаем, как надо или просто лень… Ах да, если что — перепишем. Как следствие из этого недуга вытекает ещё один: «Я всё понял, завтра уже закончу и выдам код». Спешка в нашем деле лишняя, а постановка задачи не зря занимает столько страниц.\nЕщё одно довольно странное явление встречается уже реже: не пользоваться средствами отладки и профилирования. Я не спорю, ошибки, конечно, можно найти, вдумчиво рассматривая код. Но всё же, все современные IDE обладают весьма богатыми средствами отладки. Это удобно и практично.\nСледующая пагубная для окружающих привычка — «а я так привык» или «мой код правильнее»… Сначала я думал, что это бывает только «по молодости», но, к сожалению, встречаю такое и у более опытных коллег. Поэтому не принимать во внимание текущие стандарты и локальные практики заказчика становится той самой плохой привычкой. \n34\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n34\nПовысить\nПонизить\nДмитрий Машкарин\n, \nпрограммист группы разработки и сопровождения приложений «Манго Телеком»\nПервая и, пожалуй, одна из самых частых привычек, которая характерна для молодых программистов, это «я всё сделаю сам». Стесняясь спросить совета у более опытного коллеги, начинающий кодировщик потихоньку «закапывается». Или наоборот, быстро перекладывая ответственность за свой код, не анализируя последствия конкретной реализации, не представляя итоговой структуры, сдаёт сырой материал. Любой хороший кодер, а не только начинающий, должен проверять сразу несколько кейсов, уметь прогнозировать свою функциональность и развивать абстрактное мышление, исключая в своей практике хардкод.\nДругая ситуация, когда айтишник в силу небольшого опыта знает ограниченный инструментарий, пользуется только им и ленится разобраться с прикладными возможностями. Показателем лени является и нежелание следовать принятым в команде стандартам. По факту, всё это только затягивает и усложняет процесс написания кода.\nОдна из вредных привычек начинающих программистов, которую мы сразу стараемся искоренять у нас в компании — нежелание или неумение молодых специалистов писать тесты. Уже на этапе разработки они очень помогают быстро находить ошибки и уменьшают затраты на сопровождение кода.\nКонечно, второй Билл Гейтс для компании ценный кадр. Но когда новичок с высоким самомнением считает себя «богом кодинга», это значительно снижает его шансы на успех. Даже если он тысячу раз талантлив, его неспособность коммуницировать на равных с другими людьми может убить все старания, породить кучу костылей в коде, привести к багам, а ещё хуже — к недопониманию в команде. \n27\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n27\nПовысить\nПонизить\nЕкатерина Акимова\n, \nруководитель группы разработки Тверского Технологического центра Accenture в России\nКаждый программист индивидуален, и у каждого есть те или иные плохие привычки. Зачастую они проявляются в тот момент, когда программист начинает работать над проектом. Чтобы разобраться, что мешает, разделим плохие привычки на три группы: технические, личные, коммуникативные, — и рассмотрим каждую из них.\nК техническим плохим привычкам можно отнести: желание иметь слишком хороший компьютер для разработки и вместо целевого решения делать костыль в коде. А также нежелание смотреть исходники и изучать документацию.\nЧтобы этого избежать, необходимо постоянно технически развиваться, изучать разные проекты с простой и сложной архитектурой. Применять best practices, паттерны. Думать о производительности с учётом мощностей пользовательских рабочих мест.\nК личным стоит отнести привычку откладывать на потом, очень долго концентрироваться на одной задаче, думать, что ты всё знаешь. Не придавать внимания качеству кода: неймингу, связанности, переиспользованию, производительности, тестированию кода. Иметь плохой баланс личной жизни и работы.\nКак избежать — развивать тайм менеджмент, чувство перфекционизма. Стараться выслушивать чужие точки зрения, и обсуждать свои. Завести интересы вне сферы работы, это помогает переключаться и в итоге эффективнее работать.\nИ, наконец, к коммуникативным стоит отнести следующие плохие привычки: не обсуждать решение с другими разработчиками. Быть высокомерным, деспотичным, не учитывать при общении личные качества членов команды. Не разбираться в чужом коде, не проводить ревью и анализ своего кода. Не признавать свои ошибки. Не общаться с коллегами. Быть недружелюбным.\nКак избежать этого — проводить ревью своего и чужого кода. Больше работать с чужим кодом. Обсуждать с коллегами проблемы, возникшие при разработке. Быть дружелюбным.\nМногие из описанных вредных привычек достаточно общие. Другие, наоборот, встречаются только у программистов. Но так или иначе их следует избегать. Помните, что отношение к коду, коллегам, проекту так же важно, как и ваш опыт и знания. Поддержание на высоком уровне всех этих составляющих даст вам больше профита как в личном, так и профессиональном плане, чем развитие отдельных качеств. \n7\nОтвет эксперта\n2019-10-14T17:41:25+03:00\n\nРейтинг полезности ответа: \n7\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, какие плохие привычки бывают у программистов и что с ними делать?\nПрограммисты порой:\nНе документируют код и/или не вносят изменения в документацию.\nПишут лишние велосипеды.\nНе практикуются в написании кода регулярно.\nИгнорируют физические активности.\nПытаются продумать все детали программы перед её реализацией.\nСразу пробуют решить задачу, не узнав о всех нюансах вроде своего видения решения задачи у заказчика.\nНе читают требования.\nПытаются отрефакторить плохой код, не вникая, почему его написали именно так.\nИзлишне усложняют код.\nНе умеют искать информацию.\nНе знают и доли возможностей своей IDE.\nНе общаются с единомышленниками и замыкаются в себе.\nИгнорируют общепринятые практики и делают всё в стиле «я так привык» или «я лучше знаю».\nПытаются сделать всё сами.\nЧто с этими привычками делать? Не переставайте развиваться. Вам не обязательно писать на всех фреймворках, пихать в каждый проект все паттерны проектирования и т. д., но знание того, какие вещи вообще существуют в мире программирования и как их реализуют другие люди, может сильно вам помочь. Для каких-то привычек нужно просто перебороть и заставить себя сделать «как надо». Ну а если вы где-то работаете, то некоторые хорошие привычки вам привьют волей-неволей. Кроме того, в этом деле может помочь опыт коллег, которые проходили через то же самое.\n100500\nЛучший ответ\n2019-10-14T17:41:25+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-3-cover-icon.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/86867_72acded3_HFi2eJlW_1570102723-e1570630397180-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/43145_4a301072_Oto9s6gq_1570002217-1-e1570630837968-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/06/44227_ea60a347_9OcYCheJ_1561408891-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Zaal-Lyanov_1-e1571147717762-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/Sergej-Shirkin-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2018/12/ponomarev-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/23114_bdf99d0c_S2ijaxCv_1565624018-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/948_3556dbed_aAZzpgCu_1567592321-e1568973976374-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/ava_2019-e1570800321249-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/1RRTdru46qo-e1564940260469-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/translations/javascript-code-caching-for-devs/",
                "title": "Кэширование кода для JavaScript-разработчиков на примере Chrome",
                "created_date": "13 октября 2019 в 11:04",
                "body": "Перевод статьи \n «Code caching for JavaScript developers» \nКэширование кода (также называемое кэшированием байт-кода) является важным инструментом оптимизации. Оно уменьшает время запуска часто посещаемых сайтов за счёт кэширования результатов парсинга и компиляции. Большинство \nпопулярных\nбраузеров\n реализует кэширование в некоторой форме, и Chrome не исключение. О том, как \nChrome\n и \nV8\n кэшируют скомпилированный код, уже много всего написано и \nсказано\n.\nВ этой статье вы найдёте несколько советов JS-разработчикам, которые хотят с помощью кэширования кода улучшить загрузку сайтов. Мы будем говорить о реализации кэширования в Chrome / V8, но большинство советов можно использовать и для кэширования кода других браузеров.\nОбзор кэширования кода\nКэш оперативной памяти\nУ Chrome есть два уровня кэширования скомпилированного в V8 кода (классических скриптов и скриптов модулей): быстрый и «лучший из возможного» кэш в оперативной памяти, обеспечиваемый средствами V8 (кэш \nIsolate\n), а также полный сериализованный кэш на диске.\nКэш \nIsolate\n работает со скриптами, скомпилированными в том же V8 Isolate (т. е. тот же процесс, грубо говоря «одни и те же страницы сайта при навигации по одной и той же вкладке»). Это «лучшее из возможного» в том смысле, что кэш оперативной памяти, насколько это возможно, быстр и минимален: он использует уже имеющиеся данные за счёт потенциально более низкой частоты обращений и отсутствия кэширования между процессами.\nКогда V8 компилирует скрипт, скомпилированный байт-код сохраняется в хеш-таблице (в куче V8), ключ которого определяется исходным кодом сценария.\nКогда Chrome просит V8 скомпилировать другой скрипт, V8 сначала проверяет, соответствует ли исходный код этого скрипта чему-либо в хеш-таблице. Если соответствует, просто возвращается существующий байт-код.\nЭтот кэш быстрый и эффективный, но на практике у него лишь 80% частоты попаданий.\nКэш на диске\nКэш кода на диске управляется Chrome (в частности, с помощью Blink) и заполняет пробел, который кэш Isolate не может заполнить: совместное использование кэшей кода между процессами и между несколькими сеансами Chrome. Он использует преимущества существующего кэша HTTP-ресурсов, который управляет кэшированием и очисткой данных с истёкшим сроком действия, полученных по сети.\nКогда JS-файл запрашивается впервые (т. е. выполняется «холодный» запуск), Chrome загружает его и даёт V8 для компиляции. Он также сохраняет файл в кэше браузера на диске.\nКогда JS-файл запрашивается во второй раз (т. е. выполняется «тёплый» запуск), Chrome берёт файл из кэша браузера и снова передаёт его в V8 для компиляции. Однако на этот раз скомпилированный код сериализуется и прикрепляется к кэшированному файлу скрипта в качестве метаданных.\nВ третий раз (т. е. «горячий» запуск) Chrome извлекает как файл, так и метаданные файла из кэша и передаёт их в V8. Тот в свою очередь десериализует метаданные и может пропустить компиляцию.\nВ итоге:\nКэширование кода делится на холодные, тёплые и горячие запуски, используя кэш в оперативной памяти при тёплых запусках и дисковый кэш при горячих запусках.\nОсновываясь на этом описании, можно оптимизировать использование кэшей кода на вашем сайте.\nСовет 1: не делайте ничего\nЛучшее, что JS-разработчик может сделать для оптимизации кэширования кода, — ничего не делать. Но ничего не делать можно по-разному: пассивно и активно.\nMiddle React/Redux Developer\nEdstories, удалённо\ntproger.ru\nВакансии на tproger.ru\nКэширование кода в конце концов является частью реализации браузера. По сути, это увеличение производительности за счёт дополнительных расходов памяти, реализация и эвристика которых могут постоянно меняться. Мы, как разработчики V8, должны делать всё возможное, чтобы эти эвристики работали для каждого. Если чрезмерно оптимизировать кэширование кода, можно очень разочароваться уже после нескольких релизов, когда эти детали изменятся. Кроме того, другие механизмы JavaScript могут иметь различные эвристики для своей реализации кэширования кода. Так что во многих отношениях лучший совет для получения кэшированного кода похож на совет по написанию JS: пишите чистый идиоматический код и сделайте всё возможное, чтобы оптимизировать его кэширование.\nПомимо пассивного бездействия, вы также должны стараться активно «ничего не делать». Любая форма кэширования по своей природе зависит от того, что ничего не меняется, поэтому бездействие — лучший способ сохранить кэшированные данные. Активно ничего не делать можно разными способами.\nНе меняйте код\nВсякий раз, когда вы отправляете новый код, он ещё не кэширован. Когда браузер делает HTTP-запрос для URL-адреса сценария, он может включать дату последней выборки этого URL-адреса. Если сервер знает, что файл не изменился, он может отправить ответ «304 Not Modified», который сохраняет кэш кода «горячим». В противном случае ответ «200 OK» обновляет кэшированный ресурс и очищает кэш кода, возвращая его обратно в «холодный» режим.\nВсегда хочется сразу же отправить последние изменения кода, особенно если вы хотите измерить влияние конкретного изменения, но для кэша лучше позволить коду существовать как он есть, по крайней мере, обновлять его как можно реже. Подумайте о том, чтобы установить ограничение «≤ Х развёртываний в неделю», где Х — это слайдер, который вы можете регулировать для баланса между кэшированием и устареванием данных.\nНе меняйте URL’ы\nКэш кода связан с URL-адресом скрипта, так как это облегчает поиск, ведь нет необходимости читать фактическое содержимое скрипта. Это означает, что изменение URL-адреса (включая любые параметры запроса) создаёт новую запись в кэше ресурсов, а вместе с ним и новую запись «холодного» кэша.\nКонечно, это также можно использовать для принудительной очистки кэша, хоть это и является частью реализации. Однажды мы можем решить связать кэши с исходным текстом, а не с исходным URL, и этот совет перестанет работать.\nНе меняйте поведение выполнения\nОдна из самых свежих оптимизаций кэширования кода заключается в \nсериализации скомпилированного кода только после его выполнения\n. Это делается для того, чтобы попытаться поймать \nлениво скомпилированные функции\n, которые инициализируются только во время выполнения, а не во время начальной компиляции.\nЭта оптимизация работает лучше всего, когда каждый запуск скрипта выполняет один и тот же код или хотя бы одинаковые функции. Это может быть проблемой, если у вас есть, например A/B-тесты, которые зависят от выбора времени выполнения:\nif (Math.random() > 0.5) {\r\n  A();\r\n} else {\r\n  B();\r\n}\nВ этом случае только A() или B() компилируются и выполняются при «горячем» запуске и вводятся в кэш кода, но любой из них может быть выполнен и в последующих запусках. Вместо этого надо попытаться сохранить выполнение детерминированным, чтобы сохранить его в кэшированном пути.\nСовет 2: сделайте что-нибудь\nКонечно, совет не делать ничего (пассивно или активно) не очень удовлетворит вас. Помимо того что вы ничего не делаете, учитывая текущую эвристику и реализацию, есть несколько вещей, которые вы можете сделать. Эвристика может измениться, сам этот совет может измениться и нет никакой альтернативы для профилирования.\nОтделите библиотеки от кода\nКэширование кода имеет свои особенности: изменения в любой части сценария делают недействительной кэш-память для всего сценария. Если ваш бандл состоит из стабильных и изменяющихся частей в одном скрипте, например библиотеки и бизнес-логики, то изменения в коде бизнес-логики изменяют кэш кода библиотеки.\nВместо этого вы можете отделить код стабильной библиотеки в самостоятельный скрипт и включить его отдельно. Затем код библиотеки может быть кэширован один раз и оставаться в кэше при изменении бизнес-логики.\nЭто даёт дополнительные преимущества, если библиотеки совместно используются на разных страницах вашего сайта, поскольку к сценарию прикреплён кэш кода. Кэш кода для библиотек также разделяется между страницами.\nОбъедините библиотеки с кодом\nКэширование кода выполняется после выполнения каждого скрипта. Это означает, что кэш будет включать в себя именно те функции в этом скрипте, которые были скомпилированы по завершении его выполнения. Это ведёт к нескольким важным последствиям для библиотечного кода:\nкэш кода не будет включать функции из более ранних скриптов;\nкэш кода не будет включать в себя лениво скомпилированные функции, вызываемые более поздними скриптами.\nЕсли библиотека состоит из полностью лениво скомпилированных функций, эти функции не будут кэшироваться, даже если они будут использоваться позже.\nОдним из решений этой проблемы является объединение библиотек в единый сценарий, таким образом кэширование кода «видит», какие части библиотеки используются. Это полная противоположность совету выше, универсального решения нет. Конечно, не рекомендуется объединять все ваши JS-скрипты в один большой бандл. В целом разделение его на несколько более мелких скриптов будет полезнее (например, множественные сетевые запросы, потоковая компиляция, интерактивность страниц и т. д.).\nИспользуйте преимущество эвристики IIFE\nТолько те функции, которые скомпилированы к моменту, когда завершится выполнение скрипта, учитываются в кэше, поэтому существует много видов функций, которые не будут кэшироваться, несмотря на выполнение в более поздний момент. Обработчики событий (даже \nonload()\n), цепочки промисов, неиспользуемые библиотечные функции и всё, что лениво компилируется без вызова к моменту, когда \n</script>\n виден — всё это остаётся ленивым и не кэшируется.\nОдин из способов сделать эти функции кэшированными — заставить их компилироваться. Распространённым способом принудительной компиляции является использование эвристики IIFE. IIFE (\nimmediately-invoked function expressions\n) — это шаблон, в котором функция вызывается сразу после создания:\n(function foo() {\r\n  // …\r\n})();\nТак как IIFE вызываются немедленно, большинство движков JavaScript пытаются обнаружить их и немедленно скомпилировать, чтобы избежать затрат на ленивую компиляцию с последующей полной компиляцией. Существуют различные эвристики для раннего обнаружения IIFE (до анализа функции), наиболее распространённой из которых является символ «(» перед ключевым словом function.\nПоскольку эта эвристика применяется рано, она запускает компиляцию, даже если функция на самом деле вызывается не сразу:\nconst foo = function() {\r\n  // Лениво пропущено\r\n};\r\nconst bar = (function() {\r\n  // С нетерпением скомпилировано\r\n});\nФункции, которые должны находиться в кэше, можно принудительно ввести в него, заключив их в скобки. Но это может привести к тому, что время загрузки будет страдать, если совет будет применён неправильно. Это своего рода злоупотребление эвристикой, поэтому не следует так делать без необходимости.\nГруппируйте небольшие файлы вместе\nВ Chrome — минимальный размер для кэшей кода, сейчас это \n1 КБ исходного кода\n. Сценарии меньше не кэшируются, так как затраты будут больше выгоды.\nЕсли на вашем сайте много таких небольших сценариев, подсчёт затрат может больше не применяться аналогичным образом. Лучше объединить их так, чтобы они превышали минимальный размер кэширования кода, и получить выгоду от общего сокращения затрат скрипта.\nИзбегайте встроенных скриптов\nТеги скриптов, исходный код которых встроен в HTML, не имеют внешнего исходного файла, с которым они связаны. Поэтому они не могут быть кэшированы с помощью этого механизма. Chrome пытается кэшировать встроенные скрипты, прикрепляя их к ресурсу документа HTML, но эти кэши становятся зависимыми всего документа HTML — он не должен изменяться и разделяться между страницами.\nПростые сценарии не стоит встраивать в HTML, лучше выносить их в отдельные файлы.\nИспользуйте кэши сервис-воркера\nСервис-воркер — это механизм, позволяющий вашему коду перехватывать сетевые запросы на ресурсы на вашей странице. Они позволяют вам создавать локальный кэш из некоторых ваших ресурсов и обслуживать ресурс из кэша всякий раз, когда их запрашивают. Это особенно полезно для страниц, которые продолжают работать в offline-режиме вроде PWA.\nНиже типичный пример сайта, использующего сервисный воркер. Регистрация воркера в основном файле сценария:\n// main.mjs\r\nnavigator.serviceWorker.register('/sw.js');\nВоркер добавляет обработчики событий для установки (создание кэша) и извлечения (обслуживание ресурсов).\n// sw.js\r\nself.addEventListener('install', (event) => {\r\n  async function buildCache() {\r\n    const cache = await caches.open(cacheName);\r\n    return cache.addAll([\r\n      '/main.css',\r\n      '/main.mjs',\r\n      '/offline.html',\r\n    ]);\r\n  }\r\n  event.waitUntil(buildCache());\r\n});\r\n\r\nself.addEventListener('fetch', (event) => {\r\n  async function cachedFetch(event) {\r\n    const cache = await caches.open(cacheName);\r\n    let response = await cache.match(event.request);\r\n    if (response) return response;\r\n    response = await fetch(event.request);\r\n    cache.put(event.request, response.clone());\r\n    return response;\r\n  }\r\n  event.respondWith(cachedFetch(event));\r\n});\nЭти кэши могут включать в себя кэшированные ресурсы JS. Но поскольку ожидается, что кэши воркеров будут преимущественно использоваться для PWA, для них используется немного другая эвристика по сравнению с обычным «автоматическим» кэшированием в Chrome. Во-первых, они сразу же создают кэш кода при каждом добавлении ресурса JS. Это означает, что кэш доступен уже при второй загрузке (а не только при третьей, как в обычном случае). Во-вторых, генерируется «полный» кэш для этих скриптов — функции больше не компилируются лениво. Всё компилируется и помещается в кэш. Преимущество заключается в быстрой и предсказуемой производительности, без каких-либо зависимостей порядка выполнения, хоть и за счёт увеличения использования памяти. Обратите внимание, что такая эвристика применяется только к кэшам сервисных воркеров, а не к другому использованию Cache API. В настоящее время Cache API вообще не выполняет кэширование кода, когда используется вне сервисных воркеров.\nТрассировка\nНи один из советов выше не поможет ускорить работу вашего сайта. К сожалению, информация о кэшировании сейчас не предоставляется в DevTools, поэтому наиболее надёжный способ выяснить, какие из сценариев вашего сайта кэшируются, — использовать чуть более низкий уровень \nchrome://tracing\n.\nchrome://tracing\n записывает инструментальные трассировки Chrome в течение некоторого периода времени с такой визуализацией :\nТрассировка записывает поведение всего браузера, включая другие вкладки, окна и расширения, поэтому она лучше всего работает, когда выполняется в чистом профиле пользователя, с отключёнными расширениями и без открытия других вкладок браузера:\n# Запустите новый сеанс браузера Chrome с чистым профилем пользователя и отключёнными расширениями\r\ngoogle-chrome --user-data-dir=\"$(mktemp -d)\" --disable-extensions\nПри записи вы должны выбрать, какие категории трассировать. В большинстве случаев вы можете просто выбрать набор категорий «Web developer» (Веб-разработчик), но категории можно выбрать и вручную. Важная категория для кэширования кода — \nv8\n.\nПосле записи с категорией \nv8\n найдите фрагменты \nv8.compile\n в трассировке (в качестве альтернативы вы можете ввести \nv8.compile\n в поле поиска интерфейса). Эти компоненты показывают компилируемый файл и некоторые метаданные о компиляции.\nПри холодном запуске сценария информация о кэшировании кода отсутствует. Это означает, что сценарий не участвовал в создании или использовании данных кэша.\nПри тёплом запуске есть две записи \nv8.compile\n на сценарий: одна для фактической компиляции (как указано выше) и одна (после выполнения) для создания кэша. Вы можете узнать последнюю, так как она имеет поля метаданных \ncacheProduceOptions\n и \nproducedCacheSize\n.\nПри горячем запуске вы увидите запись \nv8.compile\n для использования кэша с полями метаданных \ncacheConsumeOptions\n и \nconsumedCacheSize\n. Все размеры выражены в байтах.\nДля большинства разработчиков кэширование кода должно «просто работать». И работает это лучше всего (как и любой кэш), когда всё остаётся неизменным, и с использованием эвристики, которая может меняться между версиями. Тем не менее, кэширование кода имеет особенности, которые можно использовать, и ограничения, которых стоит избегать. Тщательный анализ с использованием chrome://tracing может помочь вам настроить и оптимизировать использование кэша вашим сайтом.\nНе смешно? А здесь смешно: \n@ithumor\nJavaScript\n, \nДля продолжающих\nТакже рекомендуем:\nБот для Telegram на Python: от первой строчки кода до запуска на Heroku\nPython GUI: создаём простое приложение с PyQt и Qt Designer\nБесплатные материалы для программистов\nES6, ES8, ES2017: что такое ECMAScript и чем это отличается от JavaScript",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/javascript_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"779px\" viewBox=\"0 0 779 448\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/wecewdewd.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"722px\" viewBox=\"0 0 722 672\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/chrome-tracing-visualization.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"721px\" viewBox=\"0 0 721 607\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/chrome-tracing-categories-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"721px\" viewBox=\"0 0 721 607\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/chrome-tracing-categories-2.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"405px\" viewBox=\"0 0 405 318\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/chrome-tracing-cold-run.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"404px\" viewBox=\"0 0 404 386\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/chrome-tracing-warm-run.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"406px\" viewBox=\"0 0 406 363\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/chrome-tracing-hot-run.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/6-step-for-building-machine-learning-projects/",
                "title": "6 шагов по созданию проектов машинного обучения",
                "created_date": "12 октября 2019 в 10:04",
                "body": "Перевод статьи \n «A 6 Step Field Guide for Building Machine Learning Projects» \nМашинное обучение — обширная тема, а медиа ещё и представляют его как волшебство. Цель этой статьи — изменить ваше представление о машинном обучении. Вы познакомитесь с кратким обзором наиболее распространённых задач, которые можно решить с его помощью.\nСначала разберёмся с некоторыми определениями.\nЧем отличаются машинное обучение, искусственный интеллект и наука о данных?\nКонференция MIELOCONF\n24 января, Москва, 10 000–17 000 ₽\ntproger.ru\nСобытия и курсы на tproger.ru\nЭти три темы могут быть трудными для понимания, потому что формальных определений нет. Я проработал инженером по машиностроению больше года, и у меня до сих пор нет точного ответа на этот вопрос.\nЧтобы избежать путаницы, будем говорить простыми словами. В этой статье вы можете рассматривать машинное обучение как процесс поиска шаблонов в данных с целью понять общую картину или предсказать какое-то будущее событие.\nПроходя эти 6 шагов, мы будем учиться в процессе: выполнять построение чего-то или наблюдать, как это работает.\n6 шагов по созданию вашего следующего проекта\nКонвейер машинного обучения можно разбить на три основных этапа: сбор данных, моделирование и развёртывание. Все они влияют друг на друга.\nВы можете начать проект со сбора данных, затем смоделировать их, понять, что собранных данных недостаточно, и вернуться к сбору, смоделировать данные снова, найти хорошую модель, развернуть её, обнаружить, что она не работает, создать другую модель, развернуть и её, обнаружить, что она тоже не работает, и вернуться к сбору данных. Это целый цикл.\nЧто значит модель? Что такое развёртывание? Как собирать данные?\nСпособ сбора данных будет зависеть от вашей задачи. Например, можно собирать в таблицу списки покупок ваших клиентов.\nПод моделированием понимается использование алгоритма машинного обучения для поиска информации в собранных вами данных.\nВ чём разница между обычным алгоритмом и алгоритмом машинного обучения?\nКак и рецепт приготовления вашего любимого блюда, обычный алгоритм — это набор инструкций о том, как превратить набор ингредиентов в шедевр.\nОтличительная особенность алгоритма машинного обучения заключается в том, что вместо набора инструкций вы начинаете с ингредиентов и готового блюда. Затем алгоритм рассматривает ингредиенты и финальное блюдо и разрабатывает набор инструкций.\nЕсть много различных типов таких алгоритмов, некоторые из них работают лучше других, но у всех них одна цель — найти шаблоны или наборы инструкций в данных.\nРазвёртывание берёт ваш набор инструкций и использует его в приложении. Это приложение может делать что угодно — от рекомендаций продуктов в вашем интернет-магазине до сервиса для больницы, пытающегося лучше предсказать наличие заболевания.\nКогда вы будете применять эти шаги для своего проекта, они могут немного меняться в зависимости от специфики, но принципы будут схожими.\nЭта статья посвящена моделированию данных. Предполагается, что вы уже собрали данные и хотите с их помощью получить прототип проекта с машинным обучением. Разберёмся, как вы можете подойти к этому.\nОпределение задачи\n — какую бизнес-проблему вы пытаетесь решить? Как это можно сформулировать в виде задачи машинного обучения?\nДанные\n — какие данные у вас есть? Как это соответствует определению задачи? Данные структурированы или нет? Данные статические или потоковые?\nОценка\n — что определяет успех? Достаточно ли хороша модель машинного обучения с точностью 95 %?\nОсобенности\n — какие части данных будут использованы для модели? Как может то, что уже известно, повлиять на это?\nМоделирование\n — какую модель выбрать? Как вы можете улучшить модель? Как вы сравниваете это с другими моделями?\nЭксперименты\n — что ещё можно попробовать? Развёрнутая модель работает так, как ожидалось? Как другие шаги меняются в зависимости от того, что вы обнаружили?\nРассмотрим немного подробнее каждый пункт.\nШаг первый: определение задачи — перефразируйте свою задачу как задачу машинного обучения\nЧтобы понять, может ли ваш бизнес использовать машинное обучение, первым делом нужно сопоставить решаемую бизнес-проблему с задачей машинного обучения.\nЧетырьмя основными типами машинного обучения являются: контролируемое обучение (обучение с учителем), неконтролируемое обучение (обучение без учителя), трансферное обучение и обучение с подкреплением (также есть частичное обучение, но его мы не рассматриваем). В бизнес-приложениях чаще всего используются контролируемое, неконтролируемое и трансферное обучение.\nКонтролируемое обучение\nОно называется так, потому что у вас есть данные и метки. Алгоритм машинного обучения пытается выяснить, какие шаблоны данных приводят к меткам. Контролируемая часть происходит во время тренировки. Если алгоритм угадывает неправильную метку, он пытается исправиться.\nНапример, вы пытаетесь предсказать болезнь сердца у нового пациента. В качестве данных вы можете использовать анонимные медицинские карты 100 пациентов и указывать, есть ли у них заболевание сердца.\nАлгоритм машинного обучения может посмотреть на медицинские записи (входные данные) и определить, имел ли пациент заболевание сердца (выходные данные), а затем выяснить, какие закономерности в медицинских записях приводят к заболеванию сердца.\nПосле того как вы получили обученный алгоритм, вы можете просмотреть через него карту (входные данные) нового пациента и получить прогноз, есть ли у него сердечные заболевания (выходные данные). Важно помнить, что этот прогноз не совсем верный. Он возвращается лишь как вероятность.\nАлгоритм говорит: «Исходя из того, что я видел раньше, похоже, что медицинские записи нового пациента на 70 % совпадают с теми, у кого есть болезнь сердца».\nНеконтролируемое обучение\nНеконтролируемое обучение — это когда у вас есть данные, но нет меток. Например, данными могут быть истории покупок клиентов в онлайн-магазине видеоигр. Используя эти данные, можно объединить схожих клиентов, чтобы предложить им специальные условия. Можно использовать алгоритм машинного обучения для группировки клиентов по истории покупок.\nПосле проверки групп создаются метки. Групп может быть множество: одна заинтересована в компьютерных играх, другая предпочитает консольные игры, а третья состоит из покупателей более старых игр со скидкой. Это называется кластеризацией.\nВажно помнить, что алгоритм не предоставляет метки. Он находит шаблоны между похожими клиентами и, используя знания предметной области, вы сами сопоставляете эти метки.\nТрансферное обучение\nТрансферное обучение — это когда вы берёте информацию, которую уже изучила существующая модель машинного обучения, и адаптируете её к своей задаче.\nОбучение модели с нуля может быть дорогостоящим и трудоёмким. Хорошо, что это не всегда необходимо. Когда алгоритмы машинного обучения находят шаблоны в одном виде данных, эти шаблоны могут использоваться и в другом виде.\nДопустим, компании по страхованию автомобилей нужно создать модель текстовой классификации, определяющую, виновен ли человек, подающий запрос на страховое возмещение (если он спровоцировал аварию) или нет (если не спровоцировал).\nВы можете начать с существующей текстовой модели, которая прочитала всю Википедию и запомнила все паттерны между разными словами. Например, проанализировала, какое слово с большей вероятностью будет следовать за другим. Затем, используя заявления пострадавших на страховые выплаты (данные) вместе с их результатами (метками), можно настроить существующую текстовую модель под свою проблему.\nЕсли в бизнесе можно использовать машинное обучение, скорее всего, оно подпадает под один из этих трёх типов обучения.\nРазберём их дальше в \nклассификации\n, \nрегрессии\n и \nрекомендации\n.\nКлассификация\n — определение чего-либо в одну или другую категорию. Например, будет ли отток клиентов или нет? Есть ли у пациента болезнь сердца или нет? Обратите внимание, что категорий может быть больше, чем две. Два класса — бинарная классификация, более двух классов — мультиклассовая классификация. Мульти-метка — это когда элемент может принадлежать более чем одному классу.\nРегрессия\n — определение конкретного числа чего-либо. Например, за сколько будет продаваться дом? Или сколько клиентов посетит ваш сайт в следующем месяце?\nРекомендация\n — совет для кого-либо. Например, продукты для текущей покупки на основе предыдущих или статьи для ознакомления на основе истории чтения.\nСледующий шаг — определить бизнес-задачу в терминах машинного обучения.\nВернёмся к примеру компании по страхованию автомобилей. Она получает в день тысячи запросов, которые читают сотрудники. Они решают, виновен человек или нет.\nТеперь запросы начинают поступать чаще, чем ваши сотрудники могут их обработать. Зато у вас есть тысячи прошлых обработанных заявлений с определёнными пометками.\nМожет ли здесь помочь машинное обучение?\nОтвет в принципе известен, но рассмотрим подробнее. Эта проблема вписывается в любой из трёх типов выше? Классификация, регрессия или рекомендация? Перефразируем.\n«Мы — компания по страхованию автомобилей, которая хочет классифицировать входящие страховые претензии по виновности/невиновности.»\nНаличие слова «классифицировать» поможет определить тип наверняка. Но определение задачи в терминах машинного обучения потенциально может быть проблемой при выборе одного из типов. Потенциально, потому что есть шанс, что это может не сработать.\nКогда дело доходит до определения вашей бизнес-задачи как задачи машинного обучения, начните с простого: формулировка задачи должна занимать не более одного предложения. Усложняйте лишь по мере необходимости.\nШаг второй: данные — какие данные у вас есть?\nДанные, которые у вас есть или которые вы соберёте, будут зависеть от задачи, которую вы хотите решить.\nЕсли у вас уже есть данные, скорее всего, они будут в одной из двух форм: структурированные или неструктурированные. Внутри каждой из них есть статические или потоковые данные.\nСтруктурированные данные\n — представьте себе таблицу строк и столбцов, электронную таблицу транзакций клиентов, базу данных записей пациентов. Столбцы могут быть числовыми вроде средней частоты сердечных сокращений, категориальными вроде пола человека или порядковыми вроде интенсивности болей в груди.\nНеструктурированные данные\n — всё, что не может быть сразу помещено в формат строки и столбца: изображения, аудиофайлы, текст на естественном языке.\nСтатические данные\n — существующие исторические данные, которые вряд ли изменятся. Хороший пример — история покупок.\nПотоковые данные\n — данные, которые постоянно обновляются, старые записи могут быть изменены, новые записи постоянно добавляются.\nСтоит отметить, что здесь могут быть перекрещивающиеся типы данных.\nСтатическая структурированная информационная таблица может иметь столбцы, которые содержат текст на естественном языке и фотографии, и при этом постоянно обновляться.\nДля прогнозирования сердечных заболеваний один столбец может содержать пол, другой — средний сердечный ритм, третий — среднее артериальное давление, четвёртый — интенсивность боли в груди.\nДля примера со страховым возмещением один столбец в таблице может быть с текстом, отправленным клиентом в заявлении, другой столбец может быть с изображением, которое он отправил вместе с текстом, и в последнем столбце — результат иска. Эта таблица ежедневно обновляется новыми заявками или изменёнными результатами старых заявок.\nПринцип сохраняется. Вы хотите использовать данные, которые у вас есть, чтобы получить понимание общей картины или прогноз чего-либо.\nДля контролируемого обучения это включает в себя использование переменных особенностей для прогнозирования целевых переменных. Переменной особенностей для прогнозирования заболеваний сердца может быть пол, а целевой — прогноз, есть ли у пациента болезнь сердца.\nПри неконтролируемом обучении у вас не будет меток. Но всё ещё нужно найти шаблоны. А значит будет использоваться группировка похожих образцов и поиск образцов, которые отличаются.\nТрансферное обучение — это то же контролируемое обучение, за исключением того, что вы используете алгоритмы машинного обучения для шаблонов, извлечённых из других источников данных, отличных от ваших собственных.\nПомните, что, если вы используете данные о клиентах для улучшения своего бизнеса или для предоставления им более качественного сервиса, важно сообщить им об этом. Вот почему вы часто видите всплывающие окна «этот сайт использует куки». Веб-сайт собирает информацию о том, как вы просматриваете сайт, вероятно, наряду с этим использует машинное обучение, чтобы улучшить предложение.\nШаг третий: оценка — что определяет успех? Достаточно ли хороша модель машинного обучения с точностью 95 %?\nДопустим, вы определили задачу своего бизнеса в терминах машинного обучения и у вас есть данные. Теперь нужно выяснить, что определяет успех.\nСуществуют различные метрики оценки для задач классификации, регрессии и рекомендаций. Какую из них вы выберете, будет зависеть от вашей цели.\nПерефразируем.\n«Чтобы этот проект был успешным, модель должна быть точной более чем на 95 % в том, что кто-то виноват в аварии или нет.»\nМодель с точностью 95 % может показаться довольно хорошей для предсказания виноватого в страховом иске. Но для прогнозирования сердечно-сосудистых заболеваний вы, вероятно, захотите более точных результатов.\nЕсть и другие вещи, которые нужно принять во внимание при классификации задач.\nЛожное отрицательное срабатывание — модель прогнозирует отрицательный вариант, а на самом деле он положительный. В некоторых случаях, таких как прогнозирование спама в электронной почте, ложные срабатывания не так уж и страшны. Но будет гораздо хуже, если система компьютерного зрения для автомобилей с автопилотом не распознает пешехода, когда на самом деле он есть.\nЛожное положительное срабатывание — модель предсказывает положительный вариант, а на самом он отрицательный.  Если человеку предскажут болезнь сердца, от которой он на самом деле не страдает, может показаться не таким уж страшным.  Лучше перестраховаться, верно? Нет, если это отрицательно влияет на образ жизни человека или устанавливает для него план лечения, в котором он не нуждается.\nИстинное отрицательное срабатывание — модель прогнозирует отрицательный вариант, который на самом деле таковым и является. Это хорошо.\nИстинное положительное срабатывание — модель предсказывает положительный вариант, который на самом деле таковым и является. Это тоже хорошо.\nТочность\n — какая доля положительных прогнозов была правильной? Модель, которая не даёт ложных срабатываний, имеет точность 1.0.\nПолнота\n — какая доля фактических положительных вариантов была предсказана правильно? Модель, которая не даёт ложных отрицательных вариантов, имеет отзыв 1.0.\nОценка F1\n — сочетание точности и полноты. Чем ближе к 1.0, тем лучше.\nКривая рабочих характеристик приёмника (ROC) и площадь под этой кривой (AUC)\n — кривая \nROC\n представляет собой график, сравнивающий соотношение истинных положительных и ложных положительных вариантов. Метрика AUC — это площадь под кривой ROC. Модель, чьи прогнозы на 100 % неверны, имеет AUC 0.0, а модель, чьи прогнозы являются 100 % правильными, имеет AUC 1.0.\nДля задач регрессии (где необходимо предсказать число), допустим, если вы хотите минимизировать разницу между тем, что предсказывает ваша модель, и тем, что является фактическим значением. Если вы пытаетесь предсказать цену, по которой дом будет продаваться, вы захотите, чтобы ваша модель максимально приблизилась к фактической цене. Для этого используйте MAE или RMSE.\nСредняя абсолютная ошибка (MAE)\n — средняя разница между предсказаниями вашей модели и фактическими числами.\nСреднеквадратичная ошибка (RMSE)\n — квадратный корень из среднего квадратов разностей между предсказаниями вашей модели и фактическими числами.\nИспользуйте RMSE, если хотите, чтобы большие ошибки были более значительными. Например, иметь предсказание о продаже дома по цене 300 000 долларов вместо 200 000 и быть лишенным 100 000 долларов более чем вдвое хуже потери 50 000 долларов.\nПроблемы с рекомендациями сложнее проверить экспериментально. Один из способов сделать это — взять часть ваших данных и спрятать их. Когда ваша модель построена, используйте её, чтобы предсказать рекомендации для скрытых данных и посмотреть, как они выстраиваются.\nДопустим, вы пытаетесь рекомендовать покупателям продукты в своём интернет-магазине. У вас есть архивные данные о покупках за 2010–2019 гг. Вы можете построить модель на основе данных за 2010–2018 гг., а затем использовать её для прогнозирования покупок в 2019 г. Тогда это становится проблемой классификации, потому что вы пытаетесь определить, может ли кто-то купить что-либо.\nОднако традиционные метрики классификации не лучший вариант для задач с рекомендациями. Точность и полнота не имеют понятия порядка.\nЕсли ваша модель машинного обучения вернула список из 10 рекомендаций, которые будут показаны клиенту на вашем веб-сайте, вы бы хотели, чтобы лучшие из них отображались первыми, верно?\nТочность @ k (точность до k)\n — то же, что и обычная точность, однако вы выбираете отсечение k вариантов. Например, точность 5 означает, что вам важны только 5 лучших рекомендаций. У вас может быть 10 000 продуктов, но вы не можете рекомендовать их всем своим клиентам.\nДля начала у вас может не быть точной цифры для каждого из них. Но зная, на какие метрики вы должны обращать внимание, вы получите представление о том, как оценить ваш проект машинного обучения.\nШаг четвёртый: особенности — какие особенности есть в ваших данных и какие вы можете использовать для построения своей модели?\nНе все данные одинаковы. И когда кто-то ссылается на особенности, они в свою очередь ссылаются на различные виды данных в данных.\nТри основных типа особенностей — категориальные, непрерывные (или численные) и производные.\nКатегориальные особенности — например, у проблемы с сердцем — это пол пациента. Или для интернет-магазина — сделал ли кто-то покупку или нет.\nНепрерывные (или численные) особенности — числовые значения вроде средней частоты сердечных сокращений или число входов в систему.\nПроизводные особенности — особенности, которые вы создаёте из данных. Часто упоминаются как конструирование признаков. Конструирование признаков (особенностей) — это когда эксперт предметной области берёт свои знания и кодирует их в данные. Можно объединить количество входов в систему с временными метками, чтобы создать особенность и дать ей название «время с момента последнего входа». Или превратить даты из чисел в «это будний день (да)» и «это будний день (нет)».\nТекст, изображения и почти всё, что вы можете себе представить, также может быть особенностью. Все они превращаются в числа, прежде чем алгоритм машинного обучения сможет их смоделировать.\nСтоит отметить также некоторые важные аспекты, которые нужно помнить, когда речь идёт об особенностях.\nСохраняйте их одинаковыми во время экспериментов (обучения) и продакшна (тестирования) — модель машинного обучения должна быть обучена на особенностях, максимально приближенных к тому, для чего она будет использоваться в реальной системе.\nРабота с экспертами определённой предметной области — что вы уже знаете о задаче и как это может повлиять на используемые особенности? Ваши инженеры машинного обучения и эксперты по данным должны это знать.\nОни того стоят? — если только у 10 % ваших образцов есть особенности, стоит ли включать их в модель? Лучше выбрать особенности с наибольшим охватом, те, где множество образцов имеют данные.\nИдеально значит сломано — если у вашей модели идеальная производительность, то где-то вы, вероятно, допустили утечку особенностей. Это означает, что данные, на которых обучалась ваша модель, используются для их проверки. Ни одна модель не идеальна.\nВы можете использовать особенности для создания простой базовой метрики. Специалист по вопросам оттока клиентов знает, что кто-то с вероятностью 80 % откажется от членства через 3 недели после входа в систему. Или агент по недвижимости, который в курсе цен продающихся домов, знает, что дома с более чем 5 спальнями и 4 ванными комнатами продаются за 500 000 долларов.\nЭти особенности упрощены и не должны быть точными. Но именно это вы будете использовать, чтобы увидеть, может ли машинное обучение улучшиться или нет.\nШаг пятый: моделирование — какую модель выбрать? Как вы можете улучшить её? Как вы сравниваете её с другими моделями?\nПосле того как вы определили задачу, подготовили данные, критерии оценки и характеристики, можно начинать моделировать.\nМоделирование делится на три части: выбор модели, улучшение модели, сравнение её с другими.\nВыбор модели\nПри выборе модели вы должны принять во внимание следующее: интерпретируемость и простота отладки, объём данных, ограничения на обучение и прогнозирование.\nИнтерпретируемость и простота отладки — почему модель приняла решение, которое она приняла? Как исправить ошибки?\nКоличество данных — сколько данных у вас есть? Изменится ли их количество?\nОграничения в обучении и прогнозировании — это связано с вышеизложенным: сколько времени и ресурсов у вас есть для обучения и прогнозирования?\nЧтобы решить эти проблемы, начните с простого. Сделать свою модель идеальной — заманчивая цель. Но если для обучения требуется в 10 раз больше вычислительных ресурсов, в 5 раз больше времени прогнозирования, а показатель оценки увеличится на 2 %, это будет не лучшее решение.\nЛинейные модели, такие как логистическая регрессия, обычно легче интерпретировать, они очень быстро обучаются и прогнозируются быстрее, чем более глубокие модели, такие как нейронные сети.\nНо, скорее всего, ваши данные взяты из реального мира. Данные из реального мира не всегда линейны.\nЧто делать в таком случае?\nНаборы деревьев решений и алгоритмов повышения градиента (модные слова, определения, которые пока не важны) обычно лучше всего работают со структурированными данными, такими как таблицы Excel и датафреймы. Обратите внимание на \nслучайные леса\n, \nXGBoost\n и \nCatBoost\n.\nГлубокие модели, такие как нейронные сети, обычно лучше всего работают с неструктурированными данными вроде изображений, аудиофайлов и текстов на естественном языке. Тем не менее, компромисс заключается в том, что они обычно дольше обучаются, их сложнее отлаживать и прогнозирование занимает больше времени. Но это не значит, что вы не должны их использовать.\nТрансферное обучение — это подход, который использует преимущества глубоких и линейных моделей. При трансферном обучении берётся предварительно обученная глубокая модель и шаблоны, которые она изучила, используются в качестве входных данных для вашей линейной модели. Это значительно экономит время настройки и позволяет вам экспериментировать быстрее.\nГде можно найти предварительно обученные модели?\nТакие модели доступны в \nPyTorch hub\n, \nTensorFlow hub\n, \nmodel zoo\n и в \nfast.ai framework\n. Это хорошие ресурсы, которые стоит посмотреть перед созданием вашего прототипа.\nЧто насчёт других видов моделей?\nДля создания прототипа вам вряд ли когда-нибудь понадобится создавать собственную модель машинного обучения. Люди уже написали код для них.\nВам нужно сосредоточиться на подготовке ваших входных и выходных данных таким образом, чтобы их можно было использовать с существующей моделью. Это означает, что ваши данные и метки должны быть строго определены. А вы должны понимать, какую задачу вы пытаетесь решить.\nНастройка и улучшение модели\nПервые результаты модели не являются финальными. Как и в случае с тюнингом автомобиля, модели машинного обучения можно настраивать для повышения производительности.\nНастройка модели включает изменение гиперпараметров вроде скорости обучения или оптимизатора. Или специфические для модели архитектурные факторы, такие как количество деревьев для случайных лесов и количество и тип слоёв для нейронных сетей.\nРаньше приходилось настраивать их вручную, но они всё больше автоматизируются. И должны быть автоматизированными везде, где это возможно.\nИспользование предварительно обученной через трансферное обучение модели часто даёт дополнительное преимущество всех этих шагов.\nПриоритетами для настройки и улучшения моделей должны быть воспроизводимость и эффективность. Кто-то должен быть в состоянии воспроизвести шаги, которые вы предприняли для повышения производительности. И поскольку вашим главным узким местом будет время обучения модели, а не новые идеи для улучшения, ваши усилия должны быть направлены на повышение эффективности.\nСравнение моделей\nМодель 1, обученная на данных X, оценена на данных Y.\nМодель 2, обученная на данных X, оценена на данных Y.\nГде-то модели 1 и 2 могут отличаться, но не в данных X или Y.\nШаг шестой: эксперименты — что ещё можно попробовать? Как другие шаги меняются в зависимости от того, что вы обнаружили? Развёрнутая модель работает так, как вы ожидали?\nЭтот шаг включает в себя все остальные шаги. Поскольку машинное обучение — это итеративный процесс, вам нужно убедиться, что ваши эксперименты эффективны.\nВаша главная цель — свести к минимуму время между автономными экспериментами и онлайн-экспериментами.\nАвтономные эксперименты — это шаги, которые вы предпринимаете, когда ваш проект ещё не ориентирован на клиента. Онлайн-эксперименты проводят, когда ваша модель машинного обучения находится в продакшне.\nВсе эксперименты должны проводиться на разных участках данных.\nНабор данных для обучения — используйте этот набор для обучения модели, рекомендуемый объём 70–80 % — ваших данных.\nНабор данных проверки/разработки — используйте этот набор для настройки модели, рекомендуемый объём — 10–15 % ваших данных.\nНабор тестовых данных — используйте этот набор для тестирования и сравнения моделей, рекомендуемый объём —10–15 % ваших данных.\nЭти соотношения могут незначительно колебаться в зависимости от вашей задачи и имеющихся данных.\nНизкая производительность по данным обучения означает, что модель не изучена должным образом. Попробуйте другую модель, улучшите существующую, соберите больше данных или соберите более подходящие данные.\nНизкая производительность на тестовых данных означает, что ваша модель плохо обобщается. Ваша модель \nпереобучилась\n (пере- в значении много) на данных для обучения. Используйте более простую модель или соберите больше данных.\nПлохая производительность после развёртывания (в реальном мире) означает, что существует разница между тем, на чём вы обучали и тестировали свою модель, и тем, что происходит на практике. Повторите шаги 1 и 2. Убедитесь, что ваши данные совпадают с задачей, которую вы пытаетесь решить.\nКогда вы реализуете большие экспериментальные изменения, документируйте «что» и «почему». Как и при настройке модели, помните, что любой человек, в том числе и вы в будущем, должен иметь возможность воспроизвести то, что вы сделали.\nЭто означает регулярное сохранение обновлённых моделей и наборов данных.\nПодводим итоги\nМногие компании заинтересованы в машинном обучении, но не знают, с чего начать. Одна из лучших возможностей начать — построить прототип, основываясь на описанных здесь шести шагах.\nПрототип следует рассматривать не как нечто, что принципиально изменит работу вашего бизнеса, а скорее как исследование того, может ли машинное обучение повысить ценность вашего бизнеса.\nПоставьте себе временные рамки для создания прототипа (2, 6 и 12 недель — хорошо подходят в качестве рамок). С подходящими данными хороший специалист по машинному обучению и науке о данных может получить 80–90 % окончательных результатов моделирования в относительно короткие сроки.\nПусть ваши эксперты предметной области, инженеры машинного обучения и учёные данных работают сообща. Нет ничего хуже, чем инженер по машинному обучению, создающий отличную модель, которая моделирует не то, что нужно.\nЕсли веб-дизайнер может улучшить макет интернет-магазина, чтобы помочь в эксперименте по машинному обучению, заказчику стоит это знать.\nПомните, что из-за природы прототипов может оказаться, что машинное обучение не может помочь вашему бизнесу (хотя это и маловероятно). Как менеджер проекта, убедитесь, что вы знаете об этом. Если вы инженер по машинному обучению или специалист по данным, будьте готовы принять факт, что ваши выводы ни к чему не приведут.\nНо ещё не всё потеряно.\nЦенность чего-то несработавшего заключается в том, что теперь вы знаете, что именно не работает, и можете направить свои усилия в другое русло. Вот почему полезно устанавливать временные рамки для экспериментов. Времени всегда не хватает, но дедлайны творят чудеса.\nЕсли прототип машинного обучения оказался удачным — сделайте следующий шаг, если нет — сделайте шаг назад. Быстрее обучаться на практике, чем в теории.\nАспекты, не затронутые в статье\nКаждый из этих аспектов заслуживает отдельной статьи. Но есть некоторые вещи, на которые стоит обратить внимание.\nДело всегда в данных.\n Без хороших данных вам не поможет ни одна модель машинного обучения. Если вы хотите использовать машинное обучение в своём бизнесе, оно начинается с хорошего сбора данных.\nРазвёртывание меняет всё.\n Хорошая модель в автономном режиме не всегда означает хорошую модель онлайн. После развёртывания модели появляется управление инфраструктурой, проверка данных, переподготовка моделей, анализ и многое другое. У любого облачного провайдера есть услуги для этого, но объединить их — всё ещё тёмное искусство. Хорошо платите своим инженерам. Если вы инженер данных, поделитесь тем, что вы знаете.\nСбор данных и развёртывание модели — самые длинные этапы конвейера машинного обучения.\n В этой статье мы сосредоточились только на моделировании, но упустили информацию о том, как подготовить данные к моделированию.\nИнструменты меняются.\n Машинное обучение — это большой инструмент, состоящий из множества других инструментов. От библиотек кода и фреймворков до различных архитектур развёртывания. Обычно есть несколько разных способов сделать одну и ту же работу. Лучшее решение — постоянно меняться.\nУязвимости WhatsApp, которые позволяют изменять чужие сообщения\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nАлгоритмы\n, \nМашинное обучение\n\n \nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nБесплатные материалы для программистов\nАлгоритмы и структуры данных для начинающих: сложность алгоритмов\nАлгоритмы и структуры данных для начинающих: сортировка",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/machine_learning_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"3304px\" viewBox=\"0 0 3304 1296\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/1_Gf0bWgr2wst9A1XR5gakLg.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1920px\" viewBox=\"0 0 1920 886\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/1_JsJ7P3WyT1-qs2_Ztbq2gQ.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1664px\" viewBox=\"0 0 1664 1067\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/1_HQQPUO8whJzuQsyJaWZL_A.jpeg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1752px\" viewBox=\"0 0 1752 528\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/1_ojOxDViqHh0nyTHYkPixBA-1.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-mentors-help/",
                "title": "Наставник — кто это и как он помогает расти в IT другим и себе самому",
                "created_date": "11 октября 2019 в 15:57",
                "body": "Оля Зотова, лид команды наставников и ревьюеров веб-факультета «Яндекс.Практикума»\nНаставничество — это инструмент, который до сих пор не всеми оценён по достоинству. Он даёт программисту возможность подняться в профессии на одну, две, три ступеньки выше. Или «выше и в сторону». Причём этот инструмент приносит пользу и тому, кому помогают, и самому наставнику. «\nЯндекс.Практикум\n» открылся только в 2019 году, но мы с самого начала поставили перед собой задачу сделать наставничество частью платформы, и в октябре запускаем большую онлайн-школу наставников. Я расскажу, как вижу наставничество сама: какой профит приносит процесс всем его участникам, чем наставник отличается от преподавателя, как и где наставничеству учиться, и как его практикуем мы.\nЧто такое наставничество\nГлавное, чем занимается наставник: способствует развитию подопечных, или, как их называют сами наставники, мéнти (от английского mentee). Развитию как личному, так и профессиональному, смотря в какой сфере наставник работает. Он не столько учит новому сам, сколько помогает «научиться учиться» — воспринимать разный опыт и извлекать из него пользу, размышлять над изученным и делать из него продуктивные выводы. Наставник определяет цели и помогает менти увидеть оптимальный для него путь. Такой специалист видит, как его подопечному добиться качественного прогресса, однако не толкает того в нужном направлении, а вместе с ним определяет цели и помогает разглядеть оптимальную траекторию движения к ним.\nЯ буду говорить о наставничестве только применительно к онлайн-образованию в IT, потому что сама занимаюсь именно этим. А наш с коллегами опыт показывает: освоить «цифровую профессию» так, чтобы сразу после учёбы быть готовым к работе в отрасли, без поддержки наставника трудно.\nКазалось бы, при наличии квалифицированного преподавателя наставник ни к чему. Однако это предположение опровергают первые же занятия. Преподаватель призван отвечать на вопросы по существу конкретного занятия («как развернуть Kubernetes-кластер на голом железе»), а вот вопросы менее определённые и вместе с тем жизненно важные обычно вне его компетенции: «А зачем вообще лепить такие кластеры на bare metal, если можно использовать облака? Мне это знание пригодится при работе в крупном онлайн-сервисе?». Или «наглухо не понимаю, как виртуализация ложится на микросервисную архитектуру». Или даже «боюсь я Kubernetes…». Хороший наставник-практик, работая со студентом, чаще преподавателя оперирует более широким контекстом и отталкивается от своего опыта. И тем самым помогает своим подопечным с навигацией в новом для них и часто пугающем мире.\nКонференция Lead/Manage IT\n7 февраля, Минск, 160–220 br\ntproger.ru\nСобытия и курсы на tproger.ru\nНаставник — это интеллектуальный партнёр, с которым можно обсудить как насущные проблемы в учёбе вроде «не понимаю, как устроены GET-запросы», так и о более глобальные — «а какой смысл вообще изучать какой-нибудь фреймворк, если он наверняка устареет, когда я устроюсь на настоящую работу?».\nОтказывающийся лезть в «эти ваши менторские штучки» преподаватель аргументированно изложит, как правильно использовать лямбда-функции в коде на Python. Наставник же растолкует, зачем и когда питонисту может в принципе понадобиться функциональное программирование, а заодно вспомнит, как сам бодался с ним и в каких реальных задачах его задействовал, а если не задействовал, то почему.\nНа деле между двумя ролями нет противопоставления. Наставничество не обязательно строго отделено от преподавания. Вообще-то в IT преподаватель-наставник — лучшее сочетание из возможных, при условии что человек хорош в обоих амплуа. Такой универсал сумеет поставить студента перед такими вопросами, что тот будет развиваться гораздо быстрее и с большей «граблестойкостью».\nКак наставник помогает начинающему разработчику расти\nПомимо того что наставник помогает студентам перейти на новый уровень мастерства, он помогает им формировать и удерживать мотивацию и «подшлифовывать» её по мере того, как они осваивают профессию. Он не заполняет их мозг абстрактными стимулами, а пытается высветить собственные.\nНа старте обучения, в условиях изматывающей неопределённости, будущие аналитики данных часто спрашивают: «А вы видели человека без профильного образования, который сумел стать аналитиком данных?». Наставник не просто расскажет о таком специалисте — не выдуманном, а из плоти и крови, — но и обозначит поворотные точки в его карьерной траектории, главные трудности, с которыми он в связи с отсутствием бэкграунда был вынужден справляться и справился. А положительный пример заразителен. Из него новичок начинает черпать уверенность: «Ха, и правда, я не первый, кто столкнулся с такой проблемой. Теперь стало понятнее, как её преодолеть». Когда же студент осилит половину курса и задумается над вопросами более предметными, например какие дисциплины ему стоит изучить или подтянуть, наставник не вывалит на него список с десятками пунктов must, не осудит ни прямо, ни косвенно («Э-э, ты не знаешь дискретной математики?! Нда…»), а вместе с ним сперва разберётся, какие задачи тот тянется решать и до какого профессионального уровня надеется дорасти в ближайшие годы.\nСтоль же важно умение наставника \nделиться личным опытом и живыми кейсами\n. Он не только помогает студенту успешнее овладевать утилитарными навыками, то есть hard skills, но и наглядно объясняет, например, как в выбранной им сфере принято общаться в командах, какие практики совместной разработки — стандарт в самых крутых компаниях на рынке. Наставник раскрывает такие нюансы внутренней айтишной кухни, каких не вычитаешь ни из одного учебника и не извлечёшь ни из одного онлайн-курса. Ну откуда, например, «новобранцу» знать, как длительность цикла поддержки ПО влияет на решения о переходе на новые версии инструментов разработки? Более того, многие на старте карьеры в IT не понимают, зачем в действительности нужен GitHub, и считают, что он только портит жизнь. Поэтому втихую саботируют изучение команд для работы с ним, которые сложнее git commit. Для инженера с опытом командной разработки это дикость, а для новичка — в порядке вещей. Добросовестный же наставник такие подводные камни держит в уме и знает, как примерами из своих джуниорских лет доказать, что умение обращаться с репозиториями для совместной работы жизненно необходимо.\nКонечно, наставничество — это не «гормон роста» для новичков в IT. Не обязательно оно резко ускоряет движение студента по выбранной им дороге. Наставник снабжает студента контекстом, «заземляет» теоретические знания и упражнения в тренажёрах на реальные проекты и помогает построить траекторию профессионального развития от точки «здесь и сейчас» до желанных высот.\nОбычно новичку невдомёк, какую часть кода обязательно покрывать тестами, а какую нет, когда под проект имеет смысл создать внутренний DSL и начиная с какого уровня сложности вообще стоит вдаваться в предметно-ориентированный подход к разработке. Или кто и когда в реальной команде вправе контролировать его работу. В то же время все мыслимые знания в учебную программу не утрамбуешь.\nПриобщившись к личному опыту наставника, подопечный ещё во время обучения сам получает опыт, приближенный к боевому. Конечно, не такой, какой дают работа или хотя бы стажировка, но всё равно бесценный для человека без стажа в индустрии.\nКроме того, важно, что \nхороший наставник — действующий специалист\n, который помогает студентам и попутно занимается своей основной работой. Его стараниями студенты начинают видеть больше смысла в том, что происходит с ними на курсе. Они убеждаются: то, чему их учат, действительно понадобится им в будущем. Таким образом удаётся сохранить их мотивацию и не дать сомнениям дойти до точки «А какого лешего я всё это учу?».\nВ чём польза от наставничества для самого наставника\nТеперь посмотрим на это с другой стороны — глазами наставника. Разберёмся, чего в конечном счёте добивается тот, кто решился ввязаться в это дело.\nДелает мир лучше\nНе у каждого такая мотивация есть, тем не менее у многих профессионалов она в какой-то момент обычно проклёвывается. Часто программисту, дата-сайентисту, QA-инженеру на основном месте работы не хватает ощущения, что он занимается чем-то созидательным. В результате — хрестоматийный кризис: «Пишу код, который улучшает другой код, который улучшает какие-то бизнес-процессы, только зачем?». Выходом из него может послужить наличие вполне благородной цели — помочь другим научиться ремеслу эффективнее, чем довелось учиться тебе самому. Да ещё так, чтобы лет через пять в индустрии было меньше джуниоров и миддлов, от чьего кода захочется схватиться за голову.\nНаращивает свою профессиональную экспертизу\nВолей-неволей наставник сталкивается с необходимостью глубже разобраться в тех подходах и инструментах, которые сам применяет нерегулярно или которых вообще раньше избегал. То есть начинает заниматься тем самым T-shaping, что помогает выйти за пределы рутины и изменить развитие карьеры. К тому же, осваивая новое, он доносит это до студентов с самым разным уровнем подготовки, восприятием, запросами. Как следствие, одно и то же требуется объяснять совершенно по-разному. И обучая, наставник учится сам — устраняет пробелы в собственных познаниях и начинает видеть свою сферу деятельности более целостно. Точно так же, как его студенты, он начинает ловить инсайты. Раз — и вдруг сложилось понимание того, как сделать у себя в департаменте рефакторинг крупных залежей legacy-кода менее мозгодробительным, хотя, казалось бы, про отдельные практики такого рода уже читал статьи и слушал доклады на конференциях.\nПрокачивает навыки коммуникации\nСколько студентов, столько и сценариев общения. Один студент — чрезвычайно вежливый, но тревожный и склонный замыкаться в себе. Другой — въедливый отличник, которому сколько ни дай советов, всё мало. Третий — грубиян, норовит подловить наставника на какой-нибудь оплошности, зато схватывает на лету. Нужно учиться доверительно и по делу общаться с каждым из них и удовлетворять их запросы не в ущерб базовой программе курса. После таких приключений становится гораздо проще строить коммуникацию в своей команде. Особенно с новичками. Особенно с джуниорами.\nУлучшает свои лидерские качества\nПеред middle- или senior-разработчиком часто стоит задача научиться лучше добиваться своего в командах на работе. Не руководить напрямую — скорее вести за собой и аккуратно гнуть свою линию. Работая со студентами и учась у других наставников, человек быстро пополняет инструментарий soft skills: ещё бы, ведь наставничеству чужд директивный стиль управления.\nИщет людей к себе в команду\nПриток джуниоров в IT увеличивается, но тех, кто с порога готов к осмысленной работе, по-прежнему маловато. А руки в компании нужны: часто — самому миддлу-наставнику, чтобы скинуть с себя рутинные задачи. Вот, например, кровь из носу требуется начинающий аналитик данных. Но чтобы с SciPy в одной руке и Cython — в другой. И случается, легче не отсеивать поток резюме с HH, а присмотреть на курсе и лично поднатаскать расторопного студента, который пусть пока не готов включиться в работу над реальным проектом, зато быстро учится. В ходе учёбы будет время познакомить его с подходами к работе, которые приняты в компании.\nКак стать наставником: с чего начать\nОбыкновенная история, когда крепкий middle-разработчик созрел для того, чтобы помогать другим учиться, но сомневается. Он рассуждает: «Наверное, это отдельная профессия, и неохота выставить себя дураком перед теми, кто в ней мастер». А тут и внутренние демоны наготове: «Да и кто я такой, чтобы кого-то чему-то учить? Сам себя за уши из болота за эти три-четыре года вытянул, а хватит ли ума и скиллов помочь другим?».\nХорошая новость: «сам себя вытянул» — здесь ключевые слова. Если вы узнаёте в этом сомневающемся себя, в первую очередь вспомните, \nкакие трудности в обучении возникали у вас самого\n. Поинтересуйтесь у коллег, какие проблемы были у них. Когда соберёте груду таких «подводных камней», попробуйте разложить их по кучкам — классифицировать. Тогда сразу станет понятнее, что с ними можно сделать. Задумайтесь, какие приёмы и рекомендации вернее всего помогали вам, какие — друзьям, кто наиболее эффективно помог вам в развитии, что вы в итоге умеете на текущий момент. И конечно, чего вам остро не хватало в период освоения IT-ремесла. Ведь наставник должен помочь человеку дойти до конца обучения и открыть ему самостоятельный путь в профессии.\nПопутно вы поймёте, чем из арсенала наставничества владеете неплохо, а что вам даётся с трудом. Например: «Меня раздражает, когда мне приносят „обезьяний“ код» или «От моей обратной связи джуниоры в команде трясутся и нервно уходят в курилку», или «Как ни объясняю, мои подшефные ничего не понимают. Идут после моих консультаций читать книги, и талмуд Кнута почему-то им яснее». И вот перед вами основа для to-do-листа, показывающего, какие навыки вам стоит улучшить в первую очередь, чтобы стать классным наставником.\nКонечно, есть базовые принципы, которым хорошо бы следовать наставнику, если он не хочет превратиться в «наставника курильщика». Единого и общепринятого чеклиста нет — я опишу лишь то, что мы взяли за основу сами:\nЧеловечность и умение устанавливать доверительный личный контакт\n. Для студентов наставник — авторитетная фигура, которая вдохновляет их на преодоление трудностей. Нет доверия — меньше достижений, меньше шансов дойти до конца обучения, медленнее прогресс.\nГибкость и готовность менять подход в зависимости от ситуации\n. Например, один из опорных принципов наставничества — задавать наводящие вопросы, а не давать исчерпывающие ответы. Всё для того, чтобы студент выполнил работу и дошёл до правильного и красивого решения сам. Однако не всегда через вопросы удаётся направить человека на верный путь. В начале обучения есть смысл опекать студента чуть более плотно и, возможно, с подсказками. Если забросать неуверенного в себе новичка вопросами на старте, легко отбить у него охоту не то что советоваться — вообще учиться дальше. Принцип начинает работать, когда наставник понимает, что студенту уже под силу самому найти решение, а его мотивация устойчива.\nОриентированность на практику\n. Наставник должен «заземлить» студента, помочь ему синхронизироваться с реалиями индустрии. Как минимум для того, чтобы выпускник умел делать «необходимое и достаточное» по техзаданию, а не рваться всякий раз построить идеальную архитектуру или написать самый изящный код без учёта временных затрат.\nОсознание ответственности и её границ.\n Необходимо, чтобы наставник отдавал себе отчёт в том, кто за что отвечает в процессе обучения. Так, ответственность студента, а не кого-нибудь ещё — выполнить или не выполнить задание. В то время как ответственность наставника — адекватно ситуации принять решение, вовлечься или не вовлечься в работу студента, понять, где помощь обязательна, а где допустимо предоставить ему свободу поиска.\nЧек-лист наставника: необходимые навыки\nВ нашей картине мира хороший, профпригодный наставник поставит галочки напротив каждого пункта в чек-листе ниже — конечно же, не исчерпывающем.\nВладеет азами андрагогики\n — того, как учатся взрослые, и отдаёт себе отчёт в том, какую роль в обучении играет наставник, где он должен быть вовлечён, а где нет. Ему известны базовые принципы групповой динамики, и прежде всего то, что она нелинейна. Когда студенты вдруг все скопом начнут его третировать или словно нарочно закидывать вопросами, не примет это на свой счёт.\nРазбирается в специфике краткой и долгосрочной мотивации\n людей и знает способы влияния на неё. Например, в курсе того, что падение мотивации в определённые моменты обучения — это нормально, и держит в уме, что в такой ситуации предпринять, чтобы помочь студентам выбраться из «ямы».\nЗнает, что такое правильная атмосфера\n на учебном потоке и в отношениях с отдельными студентами, и умеет её налаживать. Понимает значение похвалы, правильно даёт обратную связь, заражает своим энтузиазмом студентов и подбрасывает им стимулы для продолжения учёбы.\nВидит разницу между менторским и экспертным участием\n в жизни студентов: знает, когда предметно ответить на прикладной вопрос, а когда задать встречные вопросы, чтобы подопечный мог сам докопаться до истины. Понимает, где в объяснениях использовать метафору, где кейс из личного опыта, а где ссылку на статью по теме.\nНе смешно? А здесь смешно: \n@ithumor\nSoft Skills\nТакже рекомендуем:\n10 soft skills, которые нужно прокачать ИТ-специалисту",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-14-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Zotova-e1570627821861-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/how-to-organize-a-conference/",
                "title": "5 советов по организации успешной IT-конференции",
                "created_date": "10 октября 2019 в 15:44",
                "body": "Андрей Волков, бренд-директор Skillbox\nКонференция — один из важных инструментов бизнес-образования или просто возможность потусить? А может, одно другому не мешает? Мы в онлайн-университете Skillbox решили разобраться в этом вопросе и поговорили с Александром Щербиной, одним из основателей и организаторов конференции ULCAMP, о том, что не так с большинством мероприятий для ИТ-сообщества и на что организаторам ориентироваться при подготовке своего мероприятия.\nАлександр дал 5 советов, следуя которым организаторам ULCAMP удалось превратить небольшой слёт разработчиков под Ульяновском в крупнейший неформальный IT-фест в России, на который съезжаются айтишники из самых разных городов. Более того, в 2019 году Skillbox выступил генеральным партнёром феста: мы съездили в Ульяновск и, следуя этим советам, подготовили свою программу, которая получила положительный отклик от аудитории.\nНе приглашайте спикеров, в которых вы не уверены\nНайти классных спикеров на IT-конференцию — нелёгкая задача, потому что медийные персоны, известные широкому кругу людей, могут быть неинтересны IT-сообществу, а у хороших экспертов часто бывают проблемы с публичными выступлениями. Задача организатора — избежать скучных докладов и лекторов, которые появляются на всех конференциях с одним и тем же материалом, а также не нарваться на специалистов по «успешному успеху».\nСамый лучший вариант — звать спикеров, которых вы знаете лично или видели в деле. Работайте с теми, кто умеет «зажечь» аудиторию и может подготовить «фактурный» доклад с инсайтами из личного опыта и цифрами. Другой вариант — спикеры-звёзды, топ-менеджеры крупнейших компаний, представители западных IT-гигантов.\nИдеальный спикер для IT-конференции работает в компании с современным технологическим стеком, публикуется на отраслевых порталах (Tproger, Habr и подобных), имеет хотя бы небольшой опыт публичных выступлений (выступал на митапах, бизнес-завтраках), глубоко погружён в тему, следит за новостной повесткой и знает, что волнует IT-сообщество.\nТребований много, но на рынке достаточно специалистов, которые им соответствуют. И знаете в чём секрет? Таких спикеров не обязательно искать: если ваше мероприятие известно в сообществе, они начнут сами приходить к вам с предложениями, стоит только бросить клич.\nНо даже если у вас ещё нет репутации, можно найти варианты. Например, на первом ULCAMP организаторы подумали, что надо давать участникам право самим решать, кого слушать. Помимо главной сцены сделали баркемпы — площадки для выступлений, которые никак не модерируются организаторами. Выступай, кто хочет.\nТакая саморегулирующаяся система прекрасно работает уже 8 лет: на баркемпах формируется интересная программа и участники с радостью слушают коллег из индустрии. Хороший доклад и интересная подача — и спикера будут слушать. А если он пришёл попиариться, участники пойдут заниматься другими делами, так как параллельно проходит много других активностей.\nНе привязывайтесь к узкой специализации\nЧтобы сделать полезную конференцию, многие организаторы максимально сужают специализацию: мероприятие для разработчиков банковской отрасли, для Java-программистов или посвящённое какой-то одной технологии. Кажется, что если сузить тему, то легче говорить по делу.\nПроблема в том, что чем уже специализация, тем сложнее найти спикеров и собрать аудиторию. Поэтому если вы только задумываетесь о проведении своего IT-мероприятия, у вас пока нет наработанного пула экспертов и репутации, то лучше отказаться от «узкоспециализированной концепции». Походите по другим конференциям, обрастите связями и знакомствами и ещё раз подумайте над концепцией. А вообще, лучше делайте ивент в сфере, в которой вы сами являетесь экспертом. Ну или как минимум очень сильно ей интересуетесь и вот-вот экспертом станете.\nСпециализация — далеко не единственный способ сделать мероприятие интересным для IT-сообщества. Технологии сейчас проникают в самые разные сферы жизни, поэтому актуальные, смежные с IT темы, рассказанные под нужным углом, вызывают огромный интерес.\nIT-специалисты интересуются не только технологиями, с которыми работают: проведите опрос среди вашей целевой аудитории и вы удивитесь, насколько широкий круг интересов у разработчиков.\nНе верьте, что чем больше спикеров, тем круче конференция\nЕсли вы думаете, что IT-сообщество состоит только из интровертов, которые молча послушают доклады и разбегутся программировать, то вы плохо знаете свою целевую аудиторию. Как показывает практика, многие специалисты посещают мероприятия не столько ради спикеров и лекций, сколько ради неформальной программы и нетворкинга.\nКак вариант, сделайте ивент, где будет много дискуссий и разных активностей. Для развлекательной программы можно привлечь партнёров, ведь IT-тусовка — желанная аудитория для многих брендов.\nВ погоне за насыщенной программой многие организаторы загоняют себя в жёсткие рамки, что не идёт на пользу конференции. Были на мероприятиях с калейдоскопом докладчиков, где у каждого по 15 минут на выступление и пара минут на вопросы? На самом интересном месте у спикера всегда заканчивается время, а если зал заинтригован докладом, и люди начинают задавать интересные вопросы — времени на полноценные ответы катастрофически не хватает. Ничего страшного, думает организатор, зато вон какая у нас насыщенная программа.\nХочется масштаба — сделайте больше сцен. Боитесь, что доклады спикеров превратятся в нудные лекции, как в университете? Не бойтесь, айтишники — не робкие студенты — будет скучно, они пойдут послушают кого-то другого. Зато если завяжется дискуссия, вы не представляете, как возрастёт польза от мероприятия! Польются инсайты, факты и интересные воспоминания. Ни одна отрепетированная и напичканная цифрами презентация не сравнится с честной дискуссией «без купюр».\nНе думайте, что топовых спикеров смутит ваш неформальный подход. Они тоже люди, и многие из них готовы с радостью делиться своими наблюдениями без слайдов, кликеров и таймера: чем неформальнее обстановка, тем интереснее кейсы.\nНе привязывайтесь к одному формату\nДопустим, вы попытались следовать всем нашим советам. Теперь ещё раз посмотрите на свою программу: если она состоит только из выступлений на темы «Мы делаем вот так, и у нас получается вот это», «Посмотрите на наш суперинновационный (на самом деле нет) продукт», значит, что-то идёт неправильно. IT-сообщество требовательно к контенту конференций, но наверняка не в том смысле, в котором вы думаете.\nПерестаньте терроризировать спикеров просьбами сделать вау-презентацию и придумать более вкусную тему доклада, подумайте лучше над форматом. Может, стоит вместо лекций устроить дискуссию, круглый стол или конкурс на самую смешную историю о провале?\nИдеального решения нет: какое-то время всем казалось, что лучшее событие для айтишника — это хакатон. Здесь тебе и практика, и продуктивное общение, а иногда даже хорошие призы. Тогда все бросились проводить хакатоны, и их стало так много, что они всем быстро надоели.\nСейчас идёт настоящая битва форматов: онлайн против офлайна, формальные мероприятия против неформальных. Понятно, что везде есть свои плюсы и минусы, и прежде всего надо отталкиваться от целей, задач и существующих ресурсов. Но если смотреть на общую тенденцию, то участники охотнее выбирают неформальные мероприятия, где можно не только слушать и задавать вопросы в установленное время, но и вести диалог со спикером. В онлайне это сделать трудно, и при прочих равных предпочтение будет отдаваться живому общению.\nУ каждого формата есть свои сторонники, и наверняка они найдутся и в вашей аудитории, даже если вы предложите что-то совсем необычное. На ULCAMP даже хедлайнеры и топовые спикеры спят в палатках, участвуют в спартакиаде и занимаются йогой. Как оказалось, многие люди готовы променять диван и сериалы на такой экшн.\nЕсли боитесь, устройте опрос среди потенциальной целевой аудитории, чтобы узнать, как они хотели бы провести время. Вот мы и добрались до самого очевидного, но тем не менее, самого важного совета в нашем списке.\nНе забывайте собирать фидбек\nЭто сейчас организаторы так смело разбрасываются советами, а когда запускали конференцию в первый раз, то не были такими самоуверенными. Поэтому когда они придумывали что-то новое и внедряли, потом обязательно спрашивали участников: зашло?\nНе бойтесь экспериментировать: даже неудачные идеи будут как минимум хорошим опытом или приключением. И не бойтесь критики: в негативе можно найти много интересных инсайтов. И самое главное, анализируйте и пытайтесь не повторять свои ошибки — это будет солидной заявкой на успех и обеспечит вам уважение в сообществе.\nКакой можно сделать вывод из всего этого?\nТак всё-таки IT-конференции — это про образование или тусовку? Мы пришли к выводу, что не надо противопоставлять одно другому. Серьёзность и формальность — не показатели эффективного образовательного инструмента. И наоборот, развлекательный формат не обязательно синоним впустую потраченного времени.\nИтак, у нас получилось много всего, что делать не надо: не привязывайтесь, не приглашайте, не противопоставляйте. Отлично, а что же надо делать? На самом деле, если ставить вопрос таким образом, то ответить на него можно всего одним советом: думайте в первую очередь о пользе для целевой аудитории. Да, совет максимально очевидный, но при этом все о нём забывают. Пропускайте свои идеи через фильтр «полезности», тогда вопросы с форматом, спикерами, партнёрами и площадкой будут решаться намного проще, и в результате вы быстрее найдёте свой собственный рецепт классного мероприятия.\nНе смешно? А здесь смешно: \n@ithumor\nКонференции\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-6-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/aKu_84ZA-e1570436547365-150x150.jpeg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/testers-development-path/",
                "title": "Путь развития тестировщика: как найти компанию по душе",
                "created_date": "9 октября 2019 в 12:48",
                "body": "Ксения Лопатина, QA-инженер в ISPsystem\nВ разных компаниях процессы разработки выстроены по-своему, поэтому и требования к тестировщикам отличаются. В одной работа может оказаться как на скучном заводе, в другой — как в креативной команде. Так получилось, что я поработала тестировщиком в обеих ролях. Теперь знаю разницу и хочу рассказать свою историю. Думаю, мой опыт поможет выпускникам вузов больше узнать о профессии и понять, в каких компаниях работать интереснее.\nПредисловие\nЯ окончила университет по специальности «Программная инженерия». Учебный план включал программирование, управление проектами, качество ПО и многое другое. Изучали даже тестирование, правда, всего один семестр. С таким багажом можно было пойти во многие компании. От разнообразия разбегались глаза, но с чего-то надо было начинать. В поисках работы я забрела на сайт с вакансиями ISPsystem, увидела вакансию тестировщика ПО и подумала: «Почему бы и нет?». Прошла собеседование, и меня взяли.\nТогда, три года назад, я и понятия не имела, что меня ждёт. О профессии знала из пары-тройки статей и короткого курса в университете. Спроси меня, кто такой тестировщик, ответила бы, не моргнув: человек, «жмякающий кнопки», его миссия — проверять функциональность софта и искать в нём ошибки. Реальность оказалась куда сложнее. Но обо всём по-порядку.\nНачало пути. Работа как на заводе\nПару недель на новом месте я въезжала в происходящее: разбиралась с продуктом, настраивала тестовые стенды и прощупывала организацию работы команды. Я читала документацию, осваивала Linux, штудировала книги и статьи по тестированию. Некоторое время ушло на изучение «эльфийского языка» команды, иначе было не понятно, о чём говорят вокруг.\nСо временем мне начали давать небольшие задачи по приёмочному тестированию. Разработчики исправляли в продукте ошибки, а я проверяла — «жмякала кнопки». Задачи ставились в Bugzilla, в них было описание проблемы, иногда шаги воспроизведения и комментарии разработчика. Приходилось разбираться.\nЯ воспроизводила проблему в версии продукта с поломкой, потом обновляла стенд до исправленной версии, тестировала, результат проверки описывала в задаче. Этим же занимались остальные тестировщики. Ни одна задача не уходила в релиз без приёмочного тестирования.\nКонвейер по выпуску фич\nЧем больше я погружалась в процесс, тем больше работа напоминала заводской конвейер. Только вместо изделия — задача. Она двигалась по пути Клиент — Продуктолог — Разработчик — Тестировщик.\nКлиенты оставляли пожелания и сообщали об ошибках. Продуктолог принимал или отклонял их запросы. Одобренный запрос становился задачей для разработчика. Тот был «и швец, и жнец, и на дуде игрец» — вся реализация ложилась на его плечи, от дизайна до пользовательской документации. Когда разработчик заканчивал, задачу брал тестировщик. Он проверял, что всё работает правильно, и нёс ответственность за всё, вышедшее в релиз. Ну чем не конвейер?\nУ каждого отдела была своя канбан-доска. Задачи на них выводились из Bugzilla в виде карточек. На доске продуктолога хранился бездонный бэклог, поэтому она была самой длинной. Карточки с неё кочевали на доску разработчиков, а оттуда — к тестировщикам.\nНа доске отражались только задачи в очереди и в работе, после завершения они исчезали с доски. Закрыв задачу, сотрудник не знал, что произойдёт с ней потом. Как на конвейере: запчасть выходит из цеха, а что с ней будет дальше — не наша забота.\n \nПримерно так выглядела доска тестировщиков. Цвет карточек отражал приоритет и очередность задачи\nРаспределение ресурсов\nКогда я подросла и нарастила навыки, мне начали давать более сложные и важные задачи. Но была одна особенность — все люди внутри команды делились по фичам и отдельным модулям. Один хорошо знал интеграции, другой был гуру в финансах и документах — соответствующие задачи каждый и получал. Деление касалось не только разработчиков, но и тестировщиков, и я знакомилась с продуктом только с тех сторон, по которым мне ставили задачи.\nКак и другие тестировщики, я не имела общего представления о продукте, не знала о целях, к которым он движется, не понимала задач конечного пользователя. Но всем участникам, по большей части, это казалось удобным. Разработчики взаимодействовали с одними и теми же тестировщиками, каждый был экспертом в своей области. Как следствие, задачи решались быстро. Впрочем, был и минус: знания практически не распространялись, а если человек уходил в отпуск, заболевал или увольнялся — это тормозило работу над модулями, в которых он был экспертом.\nВремя перемен. Новая команда и новые роли\nСпустя 8 месяцев работы на «конвейере» меня взяли в другую команду — на замену уволившемуся тестировщику. Пришло время перемен.\nНовая команда работала над новой версией того же продукта. От предыдущей она отличалась по составу и процессам. В составе были специалисты, с которыми я раньше не работала: UX-дизайнеры и фронтендеры. Все работали по скраму с трёхнедельными спринтами, стендапами, ретроспективами и прочими его атрибутами. Вместо Bugzilla и бесконечных канбан-досок использовали удобный YouTrack.\nСущественное отличие было в процессе движения задач. Задачи размещали на одной доске и группировали по модулям — так все видели общую картину. У задач в очереди не был заранее определён исполнитель и тестировщик — людей не делили по модулям. Это уже не конвейер!\nИ всё же первые пару недель мне было некомфортно из-за шквала новой терминологии и процессов, которые я не понимала. Пока во всё въезжала, тестировала как раньше. Но примерно через спринт приняла рабочий процесс, привыкла к ежедневным стендапам и у меня начали появляться новые интересные задачи.\nДвижение задач в новой команде\nТестирование прототипов — новый дивный мир\nВ предыдущей команде за проектирование отвечал программист, в новой — UX-дизайнер. На прототипах основывалась работа над продуктом: с них начиналась разработка новой функциональности, они же являлись техническим заданием для разработчика.\nСтало ясно, что взаимодействовать с UX-дизайнерами я буду не меньше, чем с программистами. Тогда я почти ничего не знала о дизайне, тестировании прототипов и вёрстки. Началось время открытий.\nВ первое время мне было сложно выстраивать работу по-новому. Поэтому поначалу я тестировала прототипы. Я быстро поняла, что для этого нужно встать на место пользователя и подумать:\nкакие действия он может совершить на странице,\nкакие у него могут возникнуть проблемы и предусмотрены ли они прототипом,\nнасколько понятны и соответствуют действительности тексты ошибок,\nвсе ли возможные сценарии поведения пользователя предусмотрены.\nРаньше мне не приходилось анализировать работу приложения под таким углом, но я уловила суть и влилась в процесс: стала участвовать в обсуждениях, находить проблемные места и помогать UX-дизайнерам. Благодаря этой работе у меня наконец-то появилось представление о конечном пользователе нашего продукта.\nНовые задачи тестировщика\nЯ продолжала заниматься задачами приёмочного тестирования. Но теперь оно проходило иначе. Если раньше я проверяла только функциональность, то теперь ещё и соответствие задачи прототипу, вплоть до цветов, размеров, расположения и поведения элементов.\nПришлось осваивать новые инструменты. Фронтендеры научили работать с консолью разработчика: идентифицировать проблемы, находить элементы и их параметры, изучать запросы, отправляемые и возвращаемые данные. А еще показали дополнительные браузерные инструменты, которые упрощали проверку: Tape, JSON Formatter, Eye Dropper, Web Developer.\nКроме тестирования у меня появлялись и другие задачи.\nВзаимодействие с продакт-менеджером. Вместе мы собирали фидбэк, обсуждали новые фичи и требования к ним.\nУчастие в развитии и принятии важных решений по проекту. Я начала думать не только о функциональности и ошибках, но ещё об удобстве продукта и его развитии.\nУчастие в планировании спринтов. Я стала разбирать задачи вместе с командой, вносить предложения по ним.\nПомощь техписателям. Я взаимодействовала с техническими писателями, «подготавливала почву» для понятной и полезной документации.\nНе обходилось без задач по автоматизации — не менее интересных: от скриптов на Bash до покрытия модулей автотестами.\nСобственно, всем этим я занимаюсь до сих пор. И могу сказать с уверенностью: сейчас работать мне нравится гораздо больше, чем в начале. Но наблюдать за эволюцией и участвовать в ней тоже было очень круто.\nКак найти компанию по душе\nЕсли подумываете стать тестировщиком и хотите, чтобы при трудоустройстве ожидания не разбились о суровую реальность, вот вам совет: на собеседовании хорошенько расспросите работодателя.\nЗадайте как минимум три вопроса:\nКакие задачи в компании решает тестировщик? С кем взаимодействует?\nЕсть ли возможности для роста? (Возможно, компания заинтересована лишь в приёмочном ручном тестировании, а быть может есть варианты роста в конкретных направлениях, например в тестирование безопасности или автоматизации).\nКак может измениться пул задач с течением времени?\nНе смешно? А здесь смешно: \n@ithumor\nQA\n, \nКарьера\n, \nТестирование\nТакже рекомендуем:\nВсё о QA: 80 бесплатных материалов по грамотному тестированию\nПрограмма минимум: что должен знать начинающий C# программист\nДостаточно ли вы умны, чтобы работать в IT?\nКак в IT-компаниях смотрят на программистов без диплома при приёме на работу?",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Zaglavnaja-illjustracija.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Ksenija-Lopatina-na-konferencii-SQA-Days-v-Minske-e1570463906287-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1580px\" viewBox=\"0 0 1580 790\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Illjustracija-2-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1580px\" viewBox=\"0 0 1580 972\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Illjustracija-3.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/introduction-to-mobile-development/",
                "title": "Введение в мобильную разработку для Android: с каких языков начать изучение?",
                "created_date": "8 октября 2019 в 15:19",
                "body": "Дмитрий Гордин, преподаватель курса «Android-разработчик с нуля» в Нетологии, Android developer в RoadAR\nСфера мобильной разработки развивается очень быстро. Смартфоны лидируют на рынке технологических товаров в мире, их доля среди всей бытовой техники и электроники — 44 %. А по данным аналитической компании Gartner в 2018 году потребителями был куплен 1,56 млрд смартфонов.\nПри этом операционная система Android из года в год остаётся самой популярной. В том же 2018 году более 80 % всех смартфонов в мире были выпущены на Android. А если представить, какое количество устройств существует помимо смартфонов — часы, планшеты, телевизоры, терминалы и даже холодильники, то доля Android будет ещё выше.\nНо с учётом такой растущей популярности операционной системы, запросы пользователей также постоянно меняются и увеличиваются. Современному человеку нужно приложение под любую задачу — заплатить за услуги в банке, заказать еду, пообщаться с друзьями или скоротать время в игре. Такие приложения постоянно появляются в Play Store.\nИменно поэтому и профессия мобильного разработчика на Android имеет огромный потенциал для развития, вы можете работать в крупнейших компаниях и создавать полезные приложения, которыми будут пользоваться тысячи людей. По данным Superjob, средняя зарплата разработчика на Android — 100 000 рублей, а Headhunter публикует более 500 вакансий разработчиков каждый месяц. Невостребованным специалист точно не останется.\nВ этой статье мы расскажем, с чего нужно начать изучение мобильной разработки, если вы решили стать Android-разработчиком. Какие языки изучить в первую очередь? На какие этапы стоит разбить обучение? А также ответим на вопрос, нужно ли современному специалисту знать несколько языков программирования одновременно.\nС чего начать?\nЯзыков мобильной разработки много, но мы советуем начинать изучение с самого базового и традиционного — Java. Он стабильно является 1-м или 2-м языком по популярности у программистов с 2002 года (согласно индексу языков программирования TIOBE).\nИсточник: \nTIOBE\nПосле того, как вы освоите основы программирования на нём, все остальные языки вам будут даваться легко. При этом мы советуем не учить сразу несколько языков. Лучше сначала полностью разобраться с одним, а уже потом переходить к другому.\nКак начать разрабатывать под Android\ntproger.ru\nПочему Java?\nИменно на Java написано большинство проектов и приложений, а также крупные Enterprise-приложения, например онлайн-банки. Он классический, строго типизированный, а значит, отлично подойдёт для начального уровня.\nКакие плюсы Java мы можем сразу же отметить:\nКод на Java многословный и длинный. С одной стороны это может сразу же отпугнуть, но в этом и есть плюс. В процессе написания кода всё настолько чётко и ясно, что у вас меньше шансов ошибиться или получить неожиданное поведение.\nУ Java немного языковых конструкций, и большинство из них трактуются однозначно.\nОн имеет обратную совместимость, то есть при выходе новой версии языка ничего не ломается в старом коде, в отличие от более специализированных языков, например Swift’а.\nДля новичка есть много преимуществ популярности Java. Как минимум то, что у него огромное комьюнити. Это означает, что найти людей, которые разбираются в деталях и могут помочь в изучении, очень легко. Например среди знакомых, по сарафанному радио или просто в группах в соцсетях и каналах в мессенджерах.\nВ доступе также большое количество статей, видео и книг, которые постоянно актуализируются, поэтому найти помощь будет легче, чем с экзотическим языком.\nПоэтому Java — тот язык, с которого стоит начать обучение программированию, освоить мобильную разработку и на котором стоит сделать своё первое приложение, а уже затем развиваться дальше и учить другие языки.\nКак начать писать код на Java?\nЕсли вы приступаете к изучению Java с нуля, то сразу ответьте себе на вопрос, сколько времени вы готовы уделять практике. Потому что любой язык программирования — это как английский: только на книжках и теории выучить не получится.\nДля начала необходимо разобраться с базовыми понятиями программирования. Они похожи во всех языках, начинайте с переменных и типов данных в Java, условных операторов, циклов, функций и массивов. Это именно те синтаксические конструкции языка, которые вы затем будете использовать для построения кода.\nВажно уделить внимание ООП — объектно-ориентированному программированию. Это парадигма (подход, идея) описания вещей из реального мира в коде с помощью объединения свойств и методов. Например, у каждого автомобиля есть набор характеристик: марка, тип топлива, мощность, год выпуска — это свойства автомобиля. В свою очередь, каждый автомобиль обладает набором функций: он может ехать, тормозить, управлять светом фар и т. д. В ООП также важно, как знание функций и характеристик автомобиля для водителя.\nНа данном этапе этих базовых знаний вам будет достаточно, чтобы создать своё первое приложение, например простой калькулятор или игру.\nПриведём простой пример кода, который обычно разбирают новички в начале обучения. Наша задача — сделать простейший экран с одной карточкой для отображения поста из соцсети. Код на Java будет выглядеть так:\n// Файл dto/Post.java\r\npublic class Post {\r\n    private long id;\r\n    private String author;\r\n    private String content;\r\n    private boolean likedByMe;\r\n\r\n    public Post(long id, String author, String content) {\r\n        this(id, author, content, false);\r\n    }\r\n\r\n    public Post(long id, String author, String content, boolean likedByMe) {\r\n        this.id = id;\r\n        this.author = author;\r\n        this.content = content;\r\n        this.likedByMe = likedByMe;\r\n    }\r\n\r\n    public long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getAuthor() {\r\n        return author;\r\n    }\r\n\r\n    public void setAuthor(String author) {\r\n        this.author = author;\r\n    }\r\n\r\n    public String getContent() {\r\n        return content;\r\n    }\r\n\r\n    public void setContent(String content) {\r\n        this.content = content;\r\n    }\r\n\r\n    public boolean isLikedByMe() {\r\n        return likedByMe;\r\n    }\r\n\r\n    public void setLikedByMe(boolean likedByMe) {\r\n        this.likedByMe = likedByMe;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Post post = (Post) o;\r\n        return id == post.id &&\r\n                likedByMe == post.likedByMe &&\r\n                Objects.equals(author, post.author) &&\r\n                Objects.equals(content, post.content);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(id, author, content, likedByMe);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Post{\" +\r\n                \"id=\" + id +\r\n                \", author='\" + author + '\\'' +\r\n                \", content='\" + content + '\\'' +\r\n                \", likedByMe=\" + likedByMe +\r\n                '}';\r\n    }\r\n}\r\n\r\n// Файл activity/MainActivity.java\r\npublic class MainActivity extends AppCompatActivity {\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        final Post post = new Post(1, \"Vasya\", \"First Post in our network!\");\r\n\r\n        final TextView authorTv = findViewById(R.id.authorTv);\r\n        authorTv.setText(post.getAuthor());\r\n\r\n        final TextView contentTv = findViewById(R.id.contentTv);\r\n        contentTv.setText(post.getContent());\r\n\r\n        final ImageButton likeBtn = findViewById(R.id.likeBtn);\r\n        if (post.isLikedByMe()) {\r\n            likeBtn.setImageResource(R.drawable.ic_favorite_active_24dp);\r\n        }\r\n\r\n        likeBtn.setOnClickListener(view -> {\r\n            // Опущено для краткости\r\n        });\r\n\r\n        final ImageButton shareBtn = findViewById(R.id.shareBtn);\r\n        shareBtn.setOnClickListener(view -> {\r\n            Intent intent = new Intent();\r\n            intent.setAction(Intent.ACTION_SEND);\r\n            intent.putExtra(Intent.EXTRA_TEXT, post.getAuthor() + \"\\n\\n\" + post.getContent());\r\n            intent.setType(\"text/plain\");\r\n            startActivity(intent);\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\nОтметим, что если вы уже знаете основы программирования, то за 2 недели можно начать писать на Java. А учитывая, что язык заставляет явно и однозначно прописывать каждое своё намерение, изучение проходит гладко. Если вы приступаете к изучению Java с нулевого уровня, лучше закладывать хотя бы 2 месяца на основы и практику.\nТеперь затронем вопрос выбора наиболее удобного способа изучения Java. Предлагаем несколько вариантов. Первый: получение специальности программиста в университете. С одной стороны, это позволит узнать не только Java, но и другие языки и виды разработки, вы получите фундаментальные знания программирования. Но обучение в вузе — слишком долгий и сложный путь для тех, кто хочет начать разрабатывать на Android быстро.\nВторой вариант: изучение основ самостоятельно по книгам, видео и статьям. Как мы писали выше, в сети множество актуальных материалов по мобильной разработке и в частности по Java. Такой путь обучения подойдёт тем, у кого много терпения и усидчивости. Всё придется выучить и понять самому. А если ваш уровень знаний — нулевой, то даже базовые понятия и конструкции могут показаться сперва слишком сложными и непонятными. К тому же теория без практики не сможет дать полной картины.\nЕсть третий способ: получение нужных знаний и навыков на дополнительных курсах, например онлайн. Сейчас курсы по Java предлагают разные школы, а вы сможете выбрать сложность и длительность программы под себя. Плюс такого подхода в том, что вы будете учиться вместе с ментором. Он проверяет домашние задания и показывает, какие пробелы в знаниях вам ещё нужно закрыть. Стандартная продолжительность подобной программы около 4–5 месяцев.\nНо на знании Java останавливаться не стоит. После того, как вы закрепили основы, написали своё первое приложение, а лучше и не одно, мы советуем изучить ещё один язык, который сегодня набирает всё большую популярность и получает признание от крупных игроков рынка.\nСледующий этап — Kotlin\nKotlin максимально совместим с Java, и поэтому процесс его изучения будет для вас гораздо проще и быстрее.\nЯзык Kotlin считается молодым. Хотя он и существует с 2011 года, только в мае 2019 года Google объявила его приоритетным языком программирования для платформы Android. А учитывая, что именно Google занимается разработкой Android, после этого события популярность Kotlin среди разработчиков стремительно растёт. Следуя тенденциям, многие работодатели также начинают требовать знания Kotlin.\nПомимо признания компанией Google, популярность Kotlin в мобильной разработке обусловлена удобством в использовании.\nЯзык обладает полной совместимостью с Java. В принципе, можно даже половину проекта написать на одном языке, а потом перейти на другой. Из-за перехода не теряется доступ к существующему коду, библиотекам и Android SDK.\nКод на Kotlin гораздо короче и выразительнее, чем на Java. Всё, что можно написать на Java в 4–5 строчек, уместится в одну на Kotlin. Иногда разработчикам хочется ускориться и не быть такими многословными, как с Java.\nДаже несмотря на то, что новые версии Java постоянно выходят, это не затрагивает мир Android-разработки, где всё застряло на уровне Java 6. И хотя существуют обходные пути для использования новых фич, в Kotlin новые фичи появляются чаще и не требуют от разработчика танцев с бубном.\nKotlin является детищем компании JetBrains, создателями Intellij Idea — IDE, лежащей в основе Android Studio. Благодаря этому Kotlin имеет отличную поддержку со стороны IDE: умные подсказки, рефакторинг кода, навигация по файлам и т. д.\nИзучить Kotlin просто\nKotlin можно назвать «сладкой» добавкой к Java, они действительно во многом похожи. Поэтому, тем, кто уже знаком с самим базовым языком, на изучение Kotlin понадобится максимум 1–2 недели. При этом не нужно сразу же использовать все фичи языка, можно начать писать в «Java-стиле» и, постепенно изучая новое, внедрять это в свой код.\nИтак, для начала сами разработчики языка JetBrains советуют обратиться к \nофициальным ресурсам о Kotlin\n. На них есть библиотеки материалов для начинающих, а также подробные описания истории языка и специфики конструкций. Единственная сложность — ресурс на английском, так что придётся подтянуть ещё и его. Но так как это технический язык и многие термины в принципе не имеют перевода на русский, проблем с этим возникнуть не должно.\nТакже предлагаем почитать \nгайд от Google\n, подробно описывающий, как перевести уже написанное на Java приложение на Kotlin. Статья рассказывает о том, как конвертировать файлы с расширением .java в расширение .kt, а также предлагает сравнение фрагментов кода на Java и Kotlin при работе с Android SDK.\nОпишем на Kotlin тот же пример, который брали на Java. Просто сравните:\n// Файл dto/Post.kt\r\ndata class Post(\r\n    val id: Long,\r\n    val author: String,\r\n    val content: String,\r\n    val likedByMe: Boolean = false\r\n)\r\n\r\n\r\n// Файл activity/MainActivity.kt\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        // Данные должны приходить по сети, но мы упростили пример\r\n        val post = Post(1, \"Netology\", \"First post in our network!\")\r\n        // Никаких findViewById за счёт Kotlin Android Extensions\r\n        authorTv.text = post.author\r\n        contentTv.text = post.content\r\n\r\n        if (post.likedByMe) {\r\n            likeBtn.setImageResource(R.drawable.ic_favorite_active_24dp)\r\n        }\r\n\r\n        // lambda\r\n        likeBtn.setOnClickListener {\r\n            // Опущено для краткости\r\n        }\r\n\r\n        shareBtn.setOnClickListener {\r\n            val intent = Intent().apply {\r\n                // lambda with receiver\r\n                action = Intent.ACTION_SEND\r\n                putExtra(Intent.EXTRA_TEXT, \"\"\"\r\n                    ${post.author}\r\n\r\n                    ${post.content}\r\n                \"\"\".trimIndent())\r\n                type = \"text/plain\"\r\n            }\r\n            startActivity(intent)\r\n        }\r\n    }\r\n} \r\n\nОтметим, что если вы знаете основы Java и уже пишите на нём приложения, пусть и самые простые, вам не нужно проходить тот же путь для изучения Kotlin. Вы знаете общепринятые конструкции, переменные и типы данных. Можно начать писать код, очень похожий на Java, а затем в процессе изучения Kotlin добавлять всё больше фишек из него.\nИтого, мы предлагаем понятный и универсальный способ входа в сферу мобильной Android-разработки. Первым этапом становится изучение Java с его длинными, но традиционными и понятными синтаксическими конструкциями. А после их освоения можно приступать к «сахарному» Kotlin. Такой порядок будет для вас комфортным.\nЗнание двух самых популярных языков мобильной разработки — Java и Kotlin — даст вам преимущество среди других Android-разработчиков. Как уже было сказано, всё больше работодателей ищут разработчиков со знанием Kotlin, а так как знание Kotlin невозможно без Java, вы будете только в плюсе. В любом случае, вам стоит научиться писать мобильные приложения на разных языках, чтобы в конечном счёте выбрать тот, который понравится вам и вашей будущей команде.\nНе смешно? А здесь смешно: \n@ithumor\nAndroid\n, \nДля начинающих\n, \nМобильная разработка\n, \nОбучение программированию\nТакже рекомендуем:\nБесплатные онлайн-игры, которые обучат вас программировать\nКак начать разрабатывать под Android\nИспользование регулярных выражений в Python для новичков\nРегулярные выражения для новичков",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-5-cover-icon-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/Dima-Gordin-e1570206887834-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1142px\" viewBox=\"0 0 1142 544\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/tiobe.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/what-os-to-choose/",
                "title": "Linux, Windows или macOS: что выбрать программисту — отвечают эксперты",
                "created_date": "7 октября 2019 в 14:11",
                "body": "У каждой ОС есть свои плюсы, минусы и особенности, и как правило программисты выбирают ОС на основе своих предпочтений и представлений. Но что, если отбросить личные симпатии и попытаться взглянуть объективно: какая ОС даёт больше всего преимуществ программисту? Мы задали этот вопрос экспертам, и вот что они ответили.\nТельман Мажлумов\n, \nстарший backend-разработчик .defa\nВыбор ОС в первую очередь зависит от того, в какой области разработчик работает, а ещё это дело привычки и субъективных представлений об удобстве. Я веб-разработчик и успел попробовать несколько операционных систем. Вот мой личный рейтинг удобства ОС именно для разработки веб-решений.\nПервое место — macOS. Практически всё идеально, могут возникать проблемы с Docker, поскольку не всегда оптимально используются ресурсы (бывает >= 70 % CPU). Но это мелочи. macOS — это практически идеальный баланс между ОС для работы и для повседневных задач.\nЕщё одно первое место — Ubuntu/Mint (и другие Linux-дистрибутивы). Именно для разработки я считаю это семейство ОС лучшей. Из плюсов перед macOS — близость к production-окружению, «нативная» работа Docker. Из минусов — всё-таки иногда всплывают ошибки, которые без консоли не поправить (пример, проблемы со звуком), ну и софта гораздо меньше.\nВторое место отдам Windows. Здесь можно спокойно вести разработку. При наличии такого софта как Docker или Vagrant многие проблемы можно легко обойти. Чего мне действительно не хватает в Windows, так это нормального терминала (ConEmu, Git Bash и другие не в счёт). Зато софта под эту ОС гораздо больше, чем на Ubuntu или macOS.\nВ качестве заключения отмечу, что всё-таки выбирать стоит ту ОС, в которой разработчику привычнее и комфортнее работать. Если всё в операционной системе устраивает, то переход на что-то другое вызовет лишний стресс и трату времени на изучение возможностей новой ОС. В конце концов, в ту же Windows потихоньку внедряется WSL. \n85\nОтвет эксперта\n2019-10-07T14:11:34+03:00\n\nРейтинг полезности ответа: \n85\nПовысить\nПонизить\nОлег Степанов\n, \nинженер-программист компании ICL Services\nНа вопрос, какую операционную систему выбрать для программирования, в большинстве случае нет чёткого ответа, т. к. это больше субъективный выбор каждого человека: как по удобству взаимодействия с самой системой, так и с используемыми инструментами для разработки. Большинство популярных языков и сред разработки в основном присутствуют на всех платформах.\nКонечно, есть немало случаев, когда выбор ограничен. Например язык программирования плохо адаптирован под конкретную операционную систему или требуется конкретная платформа для выполнения, тут стоило бы или даже необходимо использовать то, что есть.\nЕсли ограничений нет, то, я считаю, самый правильный выбор — попробовать каждую из систем, для того чтобы решить, что же конкретно тебе удобнее. У каждой системы есть как плюсы, так и минусы: где-то удобнее разворачивать среду и работать с ней, где-то есть более удобные инструменты разработки и т. д., поэтому говорить, что для веб-разработки нужна обязательно macOS или для разработки на \n.net core\n нужен Windows, я считаю, неправильно.\nТакже для нашей страны актуален вопрос цены рабочей машины. Например, для многих, а тем более для начинающих, продукты компании Apple могут показаться дорогими при прочих равных. У компьютеров на Windows или Linux ценник более доступный.\nЕсли подытожить, то если нет ограничений на выбор системы, советую попробовать все системы и выбрать ту конфигурацию системы и инструментов, которую удобно использовать именно вам. \n6\nОтвет эксперта\n2019-10-07T14:11:34+03:00\n  \n\nРейтинг полезности ответа: \n6\nПовысить\nПонизить\nИван Овчинников\n, \nдекан профессии «Программист С++» образовательного портала GeekBrains\nВ первую очередь нужно быть уверенным, что инструмент, с которым человек будет работать, удобен. А операционная система — это инструмент и ничто иное. Если говорить о выборе операционки, то неплохо было бы сразу знать, где ваше приложение будет в дальнейшем крутиться. Если человек предполагает разработку под операционную систему OS X (под MacBook, iOS, iPhone, iPad), то ему обязательно нужен опыт работы в macOS и собственно сама OS X, потому что все остальные операционки хоть и поддерживают языки Swift и Objective-C, но на довольно слабом уровне. Инструментарий разработки под OS X внутри OS X хорошо настроен и нативен.\nДальше у нас встает извечная борьба между Windows и Linux. Начинать холивар, я думаю, смысла нет. Если у пользователя есть привычка работать в Windows — то имеет смысл в этой операционной системе и оставаться, так как в принципе, 80 % задач разработки можно закрывать в Windows. Если хочется попробовать что-то другое — это, бесспорно, Linux. Желательно делать Linux на виртуальной машине, чтобы не потерять своё текущее окружение, но иметь возможность «пощупать». Очень много всякого софта для разработки написано под обе операционки, тут тоже стоит сразу оговориться, что если предполагается разработка на Android — то надо быть по крайней мере знакомым с операционной системой Linux. Необходимо представлять, что это за окружение, как оно работает, знать про открытые драйверы, системные настройки, потому что Android — это тоже Linux.\nЕсть специализированный стек разработки под Windows: это разработка под Active Directory, разработка разнообразных протоколов, разработка под Microsoft Office и прочие штуки. Понятное дело, что с Microsoft Office перейти на Linux будет нельзя, под него стопроцентно нужен Windows. Тут встает вопрос лицензирования. Если у человека всю жизнь был Linux, то ему не с руки покупать лицензию, которая условно стоит 8 000 рублей. Поэтому в большинстве случаев пользователи остаются на Linux.\nЯ, в свою очередь, несмотря на то, что веду свои уроки с макбука, активно пропагандирую Линуксы разного рода: это и всякие попсовые Debian и Ubuntu, разного рода Arch Linux, даже Red Hat и прочее, прочее. Соответственно, если у вас есть какие-то опасения, то стоит помнить, что инструментарий на Linux такой же, как на Windows, то есть все среды разработки (всё, что не касается Microsoft Visual Studio) портированы и работают кроссплатформенно. Для новичка будет несложно сориентироваться, главное, не надо сразу начинать лезть в консоль или жить в терминале и пугать себя. \n57\nОтвет эксперта\n2019-10-07T14:11:34+03:00\n\nРейтинг полезности ответа: \n57\nПовысить\nПонизить\nАлександр Сибречный\n, \nведущий frontend-разработчик TalentTech\nВыбор операционной системы, как правило, происходит на усмотрение самого программиста. Это дело вкуса — кому-то нравится macOS, другие считают Linux топовой системой. Одно важное условие: если ваш продукт будет иметь дело с iOS, то поле выбора ограничено — тут не обойтись без macOS. Иначе ничего не получится, если только разработка не идёт на удалённых серверах. Также эта система считается более user-friendly. То есть все мобильные разработчики, чьи продукты будут запущены в AppStore, не имеют другого выбора, кроме Mac.\nВеб-разработка менее требовательна к ОС. Лишь два браузера – Explorer и Safari являются специфическими: первый будет работать только на Windows, а второй – на Mac. Когда разработчику нужно тестировать то, что он разработал, — ему понадобится соответствующий браузер.\nLinux считается немного более сложным вариантом — она также бывает простой в использовании, но есть и «хардкор-версия», она скорее для тех, кто «пишет» драйверы и в целом больше работает с «железом». Преимущество этой системы в том, что можно собрать её целиком «под себя» и иметь над ней полный контроль. Это сложнее, требуются мозги и навыки, но использование в таком случае будет немного производительнее.\nРазработка игр, как правило, происходит на кроссплатформенных системах. А вот приложения backend-разработчиков чаще выпускаются на Linux, соответственно будет удобно держать именно эту систему на своей машине разработки — это может быть и локальная машина, и нет. Часть разработчиков работает на удалённых серверах, а их локальная машина — это по факту просто интерфейс доступа.\nТакже если вы привыкли работать на macOS, то будет довольно трудно «переключиться» на Windows, и наоборот. То, чего на Mac можно добиться простыми действиями, на «винде» делается сложно. \n26\nОтвет эксперта\n2019-10-07T14:11:34+03:00\n\nРейтинг полезности ответа: \n26\nПовысить\nПонизить\nАлександр Пантелеев\n, \nразработчик в Kodix Auto\nНа такой вопрос сложно дать однозначный ответ. Скорее, это больше зависит от предпочтений разработчика. Но очевидно следующее:\nЕсли пишете программы для какой-то определённой платформы, то её и нужно выбирать.\nЕсли это веб-разработка, то вероятность того, что сервер будет крутиться на Unix — 80 %, а значит, стоит выбирать Linux или Mac.\nПрежде всего следует разобраться, в чём отличие Unix от Windows, и выбрать то, что нравится и больше подходит. Писать хороший код можно везде. В этом вопросе нет серебряной пули, и это самое главное, что нужно понимать начинающему разработчику.\n82\nОтвет эксперта\n2019-10-07T14:11:34+03:00\n\nРейтинг полезности ответа: \n82\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, кому какой системой стоит пользоваться?\nВсё зависит от двух вещей: что вам удобно и чем вы занимаетесь. Например, если вы разрабатываете iOS-приложения, то вам придётся пользоваться macOS; если вы пишете бэкенд и сервер крутится на Linux, то, скорее всего, на нём вам и удобней будет работать. Если не принимать во внимание завязанные на конкретной платформе стеки разработки, то всё зависит от ваших предпочтений, ведь очень много софта работает на всех основных системах. Нравится работать в Windows/Linux/BolgenOS? Работайте дальше, если это не ограничивает ваши возможности. К тому же при необходимости в простых случаях можно воспользоваться виртуальной машиной. А переучиваться работать на другой системе просто «потому что» — пустая трата сил и времени.\n100500\nЛучший ответ\n2019-10-07T14:11:34+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nНе смешно? А здесь смешно: \n@ithumor\nОперационные системы\n, \nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-4-cover-icon-1.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/31322_bdd4b971_4oAcMZhD_1569847280-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/512_fce8cea7_gtcIQ56R_1569835031-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/73473_08c2cdc8_vtRzaKb2_1569423641-1-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/05/Aleksandr-Sibrechnyj_TT-e1558025898845-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/88512_20e9c2bd_XMO33nyK_1569329855-e1570001481881-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/cards/office-365-softline/",
                "title": "Заканчивается поддержка MS Office 2010. Что делать?",
                "created_date": "7 октября 2019 в 13:40",
                "body": "Любое ПО устаревает и уходит на покой. Настало время для пакета MS Office 2010: 13 октября 2020 года компания Microsoft прекращает его поддержку. Системным администраторам и IT директорам предстоит перевести сотрудников своих компаний на более современные продукты. И, как всегда, отбиваться от потоков жалоб «хочу, чтобы было как было», «я нажал, и всё куда-то пропало», «ничего не работает». Попробуем помочь.\n1\nЧто это вообще значит — прекращение поддержки?\nПриобретая лицензионное ПО, вы платите не только за сами программы, но и за помощь специалистов в решении проблем, регулярное исправление выявленных ошибок и устранение уязвимостей в безопасности. Поскольку регулярно выходят новые версии продукта, поддерживать старые со временем становится нецелесообразно. Прекращение поддержки — нормальный этап жизненного цикла продукта.\n2\nПолучается, в час «X» Office 2010 перестанет работать и все документы пропадут?\nНет, такого не будет. Office — это всё же не карета, которая превращается в тыкву, а продукт Microsoft. Разумеется, все программы из классического пакета продолжат работать и после 13 октября 2020 года. У вас есть приобретённые права на использование ПО, и никаким удалённым выключателем его не отключат. Однако после прекращения поддержки у пользователей возникнут определённые проблемы, о которых мы расскажем ниже.\n3\nМожет тогда и не надо обновляться, раз оно работает?\nНадо. Не стоит забывать, что ПО, для которого больше не предоставляются обновления и исправления для системы безопасности, может послужить входными воротами для вредоносного кода и поставить под угрозу всю информацию на устройстве. А для серьёзных компаний использование актуальных решений — вопрос выживания. Ну и кроме того, может возникнуть проблема обратной совместимости документов. Представьте себе конфуз, если во время переговоров деловые партнёры попросят запустить презентацию и окажется, что формат файла не по зубам вашему устаревшему ПО. Конечно, всегда можно найти подходящую утилиту, но представьте, как будут выглядеть такие костыли в глазах коллег.\n4\nХорошо, купим новую версию — 2019\nХороший выбор, если вам нужен Office для компьютеров, отделенных от общей сети или вообще не подключенных к интернет. Вы единовременно приобретаете лицензии на установку набора программ на определённое количество машин. В стоимость пакета входит техническая поддержка при установке и настройке, устранение ошибок и уязвимостей. Неплохой вариант… Для прошлого века. Однако не стоит забывать, что единовременно приобретаемые пакеты не предусматривают возможности обновления, а значит, если вы захотите перейти на следующую версию, то вам потребуется приобрести её по полной цене. Более того жизненный цикл поддержки у такого решения также будет ограничен. Современные компании переходят на модель SaaS (Software as a Service, программное обеспечение как услуга) и аналогичные.\n5\nЧто за модель SaaS?\nПри модели распространения SaaS конечный пользователь приобретает права не на конкретный продукт, а на услугу его предоставления, иными словами — арендует программное обеспечение. Преимущество модели в том, что у вас всегда будут самые последние версии ПО. Как раз те самые регулярные обновления безопасности и новые инструменты, которых так ждут пользователи смартфонов, планшетов и их приложения. Для сравнения, если вы купили Office 2013, то он так навсегда и останется Office 2013.\nКроме того, вам не придётся беспокоиться о платформе — Windows, Mac, Android — служба подберёт и установит подходящую версию приложений на каждую рабочую станцию. Office 365  полностью поддерживает совместную работу над документами в облаке. Ну а в поддержку можно бесплатно обращаться в течение всего срока действия подписки с вопросами, касающимися технических проблем, управления подпиской и выставления счетов. Это включено в стоимость.\n6\nПолучается, благодаря подписке у нас всегда будут последние версии Word и Excel?\nДа, и не только это. В пакете есть всё, что необходимо для организации эффективной работы. С помощью Microsoft Teams можно наладить оперативное общение сотрудников, проводить совещания онлайн, обмениваясь в процессе необходимыми документами. OneDrive с дополнительным пространством и SharePoint упростят обмен документами и совместную работу над ними. Outlook Customer Manager, Microsoft Bookings и Microsoft Invoicing помогут организовать работу с клиентами.\n7\nРешено, берём! Вот только где? На сайте Microsoft нет формы для подписки\nДа, действительно, Microsoft не занимается непосредственной реализацией Office 365. Эту функцию отдали региональным дистрибьюторам — в России \nнужную вам услугу\n реализует компания Softline.\nПодписавшись на пакет Office 365 Business Premium, помимо перечисленных программ, вы получите Microsoft Teams, Planner, Power BI Pro, MyAnalytics и терабайт в облачном хранилище OneDrive. Сама компания Softline к пакету офисных программ предоставляет услуги IP-телефонии по России, расширенные опции резервного копирования данных и круглосуточную поддержку по вопросам администрирования — а что ещё нужно сисадмину?\n8\nА Windows по подписке предоставляют?\nДа. Обратите внимание на тарифные планы Microsoft 365, в них входит подписка на Windows 10 и Enterprise Mobility Suite.\n9\nВыглядит отлично, пугает только перспектива миграции на новый пакет\nДействительно, обновление ПО большой организации требует позаботиться о сохранности данных сотен, возможно даже тысяч пользователей, об их учётных записях и почтовых ящиках. Нужно учесть возможные атаки злоумышленников: в момент миграции система особенно уязвима. Ну и конечно, в итоге нужно сделать замену ПО максимально комфортной для пользователей.\nВ этом специалисты Softline тоже \nготовы помочь\n. Задайте интересующие вопросы с помощью формы обратной связи или свяжитесь с техподдержкой по телефону.\n10\nГде узнать больше и начать миграцию?\nВся нужная информация — на \nспециальной странице Softline Microsoft 365\n.\nMicrosoft\n, \nИнструменты\n, \nПартнёрский материал\n, \nСистемное администрирование",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/iconfinder_microsoft-office_3069728-cover-icon.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/influxdb-guide/",
                "title": "Знакомство с InfluxDB и базами данных временных рядов",
                "created_date": "6 октября 2019 в 16:26",
                "body": "Перевод статьи \n «The Definitive Guide To InfluxDB In 2019» \nInfluxDB, база данных временных рядов (\nTSDB\n), разработанная InfluxData, в последние несколько месяцев демонстрирует всё большую популярность. Она стала одной из справочников для разработчиков и инженеров, желающих внедрить мониторинг в реальном времени в свою собственную инфраструктуру. Но что именно из себя представляет InfluxDB? Зачем она нужна? Какую ценность вы можете привнести, внедрив InfluxDB в свою среду?\nЭта статья — отправная точка для разработчиков, инженеров и ИТ-специалистов, которые хотят изучить InfluxDB, его концепции, случаи использования и реальные приложения.\nДля начала поговорим в целом о базах данных временных рядов. О том, что они из себя представляют и чем отличаются от традиционных \nреляционных баз данных\n (РБД). После этого рассмотрим концепции, которые определяют InfluxDB. Не знакомы с измерениями, тегами или полями? Всё будет объяснено.\nЧто такое база данных временных рядов?\nБД временных рядов, исходя из названия, представляют собой системы баз данных, специально предназначенные для обработки информации, связанной со временем.\nPython-разработчик в Процессы бэк-офиса\n«Яндекс», Москва, от 100 000 до 250 000 ₽\ntproger.ru\nВакансии на tproger.ru\nВ основном все имеют дело с реляционными базами данных (\nMySQL\n или \nSQL Server\n). Возможно, вы также имели дело с базами данных \nNoSQL\n (\nMongoDB\n или \nDynamoDB\n). Все они основаны на том, что у вас есть таблицы. Эти таблицы содержат столбцы и строки, каждая из которых определяет запись в вашей таблице. Часто эти таблицы специально предназначены для определённой цели. Одна может быть предназначена для хранения пользователей, другая — для фотографий или видео. Такие системы эффективны, масштабируемы и используются множеством гигантских компаний с миллионами запросов на своих серверах.\nБазы данных временных рядов работают иначе. Данные по-прежнему хранятся в «коллекциях», но эти коллекции имеют общий знаменатель: они объединены со временем. Это означает, что для каждой точки, которую вы можете сохранить, у вас есть связанная с ней временная метка.\nВозникает вопрос: нельзя ли использовать реляционную базу данных и просто включить в неё столбец с именем «время»? Например, в Oracle есть тип данных TIMESTAMP, который можно было бы использовать для этой цели. Конечно, такое возможно, но это неэффективно.\nЗачем нужны базы данных временных рядов?\nТри слова: быстрый приём данных.\nСистемы баз данных временных рядов построены так, чтобы быстро и эффективно принимать данные. Реляционные базы данных тоже имеют большую скорость загрузки данных (от 20 000 до 100 000 строк в секунду). Тем не менее, приём не постоянен во времени. У реляционных баз данных есть один ключевой аспект, который делает их медленными при росте данных — индексы.\nПри добавлении новых записей в реляционную БД и при наличии в таблице индексов СУБД будет многократно переиндексировать данные для быстрого и эффективного доступа к ним. Как следствие, производительность со временем снижается. При этом увеличивается нагрузка, что приводит к трудностям при чтении данных.\nБаза данных временных рядов оптимизирована для быстрого приёма данных. Такие системы используют индексацию данных, объединённых со временем. Как следствие, скорость загрузки не уменьшается со временем и остается достаточно стабильной (от 50 до 100 тыс. строк в секунду на одном узле).\nСпецифичные концепции баз данных временных рядов\nКроме высокой скорости приёма, базы данных временных рядов вводят специфичные для этих технологий концепции.\nОдной из них является организация хранения данных. В традиционной РБД данные хранятся до тех пор, пока вы не решите их удалить. Учитывая сценарии использования БД временных рядов, вы можете не хранить ваши данные слишком долго: это или слишком дорого, или данные со временем теряют актуальность.\nСистемы вроде InfluxDB могут позаботиться об удалении данных через определённое время, используя концепцию, называемую политикой хранения. Вы также можете выполнять непрерывные запросы к оперативным данным для выполнения определённых операций. В реляционной БД можно найти эквивалентные операции (например «задания» в SQL), которые могут выполняться по заданному расписанию.\nСовершенно другая экосистема\nОсобенности БД временных рядов хорошо видны, когда речь заходит об их экосистемах. Как правило, реляционные базы данных окружены приложениями, которые подключаются к ним для получения информации или добавления новых записей.\nЧасто база данных ассоциируется с одной системой. Клиенты подключаются к веб-сайту, который обращается к базе данных для получения информации. БД временных рядов созданы под множество клиентов (программ). Здесь нет простого сервера, обращающегося к БД, но есть куча разных сенсоров (к примеру), выполняющих вставку данных одновременно.\nКак следствие, её инструменты были разработаны для того, чтобы предоставить эффективные способы потребления или производства данных.\nПотребление данных\nПотребление данных часто осуществляется с помощью инструментов мониторинга вроде \nGrafana\n или \nChronograf\n. Эти клиенты имеют встроенные решения для визуализации данных и даже для создания пользовательских предупреждений.\nЭти инструменты часто используются для создания живых панелей мониторинга, которые могут быть представлены графиками, гистограммами, датчиками или картами окружающего мира.\nПроизводство данных\nПроизводство данных осуществляется агентами, которые нацеливаются на специальные элементы в инфраструктуре и извлекают из них метрики. Такие агенты называются «агентами мониторинга». Вы можете легко настроить их для запроса данных за определённый промежуток времени. Примерами являются \nTelegraf\n (который является официальным агентом мониторинга), \nCollectD\n или \nStatsD\n.\nТеперь вы лучше понимаете, что такое базы данных временных рядов и чем они отличаются от реляционных. Пришло время углубиться в конкретные концепции InfluxDB.\nКонцепции InfluxDB\nВ этом разделе будут объяснены ключевые концепции InfluxDB и ключевые запросы, связанные с этими концепциями. InfluxDB встраивает свой собственный язык запросов и это заслуживает отдельного пояснения.\nЯзык запросов InfluxDB\nПрежде чем начать, важно знать, какую версию InfluxDB вы используете в настоящее время. По состоянию на октябрь 2019 года InfluxDB выпускается в двух версиях: v1.7+ и v2.0.\nInfluxDB v2.0 в настоящее время (на октябрь 2019 года) является альфа-версией и использует язык Flux. InfluxDB v1.7 оснащён языком InfluxQL (а также Flux, если его активировать). Пока лучше использовать InfluxQL, так как Flux не полностью установлен в текущей версии платформы.\n \nInfluxQL — это язык запросов, который очень похож на SQL, и позволяет любому пользователю запрашивать свои данные и фильтровать их. Вот пример запроса InfluxQL:\nSELECT * FROM cpu_metrics WHERE time < now() - 10ms\nДальше будут рассмотрены ключевые концепции InfluxDB, предоставляемые с соответствующими запросами IQL (InfluxQL).\nКлючевые концепции InfluxDB\nРассмотрим список основных терминов, которые необходимо знать для работы с InfluxDB в 2019 году.\nБаза данных\nБаза данных — само по себе простое для понимания понятие, потому что вы привыкли использовать этот термин в реляционных базах данных. В SQL-среде БД будет содержать набор таблиц и схем и будет представлять один экземпляр самостоятельно.\nВ InfluxDB БД содержит набор измерений. Однако один экземпляр InfluxDB может содержать несколько баз данных. В этом его отличие от традиционных систем. Эта логика подробно представлена на графике ниже:\nНаиболее распространённые способы взаимодействия с базами данных — это либо их создание (\nCREATE DATABASE “devconnected”;\n), либо переход в них (\nUSE devconnected;\n) для просмотра коллекций (вы должны быть «в базе данных», чтобы запрашивать коллекции, иначе это не сработает).\nИзмерение\nКак показано выше, база данных хранит несколько измерений (measurement). Для простоты восприятия думайте об измерении как о таблице SQL. Она хранит данные и даже метаданные в разные моменты времени. Данные, которые должны сосуществовать вместе, должны храниться в одном измерении.\nSELECT * FROM cpu_metrics WHERE temperature=’40’;\nТеги и поля\nОбратите внимание, есть тонкая разница между тегами и полями.\nДля тех, кто впервые начинает работать с InfluxDB, будет трудно понять, чем отличаются теги и поля. Они похожи на «столбцы», где вы можете хранить точно такие же данные. Определяя новый «столбец» в InfluxDB, вы можете либо объявить его как тег, либо как значение, и между ними есть различия.\nСамая большая разница между ними заключается в том, что теги индексируются, а значения — нет. Теги можно рассматривать как метаданные, определяющие данные в измерении. Это подсказки, дающие дополнительную информацию о данных, но не сами данные. Поля — это сами данные. В прошлом примере столбец «температура» был бы полем.\nВернёмся к примеру \ncpu_metrics\n. Допустим, вы хотите добавить столбец с именем «location», определяющий местоположение датчика.\nЧто вам выбрать: тег или поле?\nВ данном случае стоит выбрать тег. Необходимо, чтобы столбец «местоположение» индексировался и учитывался при выполнении запроса к местоположению.\nХорошей практикой будет держать измерения относительно небольшими, когда речь идёт о большом количестве полей. Всё большее количество полей часто связано с меньшей производительностью. Вы можете создать другие измерения, чтобы сохранить другое поле и правильно его проиндексировать.\nТеперь, когда мы добавили метку местоположения в измерение, немного углубимся в таксономию.\nНабор тега называется «tag set». Имя столбца в теге называется «tag key». Значения тега называются «tag values». Та же систематика повторяется для полей. Вернёмся к чертежам.\nВременная метка\nВременная метка (timestamp) — наверное, самое простое для определения ключевое слово. В InfluxDB — это дата и время, определённые в формате RFC3339. При использовании InfluxDB очень часто определяют столбец времени как метку в Unix-времени, выраженную в наносекундах.\nВы можете выбрать формат наносекунд для временного столбца и позже снизить точность, добавляя нули в конец значения, чтобы оно соответствовало формату наносекунд.\nПолитика хранения\nПолитика хранения определяет, как долго вы собираетесь хранить ваши данные. Политики хранения определяются для каждой базы данных и их может быть несколько. По умолчанию политика хранения будет \nautogen\n и хранит ваши данные вечно. Как правило, базы данных имеют несколько политик хранения, которые используются для разных целей.\nПредставим, что вы используете InfluxDB для оперативного мониторинга всей инфраструктуры.\nНапример, вы хотите знать, когда сервер отключается. В этом случае вас интересуют данные, поступающие с этого сервера в настоящий момент или за несколько минут до этого. Вы не заинтересованы в хранении данных в течение нескольких месяцев, поэтому хотите определить небольшую политику хранения: например один или два часа.\nПредположим, вы используете InfluxDB для IoT, например для сбора данных, поступающих из резервуара для воды. Позже вы захотите поделиться своими данными с группой научных специалистов, чтобы они могли их проанализировать. В этом случае вы можете хранить данные дольше: например пять лет.\nТочка\nТочка (point) — это просто набор полей с одинаковой отметкой времени. В SQL это будет выглядеть как строка или как уникальная запись в таблице. Здесь нет ничего особенного.\nСлучаи использования InfluxDB\nМониторинг DevOps — очень объёмная тема. Всё больше команд вкладывают средства в создание быстрой и надёжной архитектуры, основанной на мониторинге. Начиная от сервисов и заканчивая кластерами серверов, инженеры часто создают стек мониторинга, который обеспечивает интеллектуальные оповещения.\nЧтобы узнать больше о мониторинге DevOps, ознакомьтесь со статьёй «\nMonitoring systemd services in realtime with Chronograf\n».\nС помощью инструментов в начале статьи вы можете создать собственную инфраструктуру мониторинга и принести прямую пользу вашей компании или начинающему предприятию.\nIoT\nРазвитие IoT, вероятно, будет революцией, которая произойдёт в ближайшие несколько лет. Предполагается, что к 2020 году более 30 миллиардов устройств будут считаться устройствами IoT. Независимо от того, осуществляете ли вы мониторинг одного устройства или гигантской сети таких девайсов, вам необходимо иметь точные и мгновенные показатели, чтобы вы могли принимать наилучшие решения.\nРеальные компании уже работают с InfluxDB для IoT. Одним из примеров может быть \nWorldSensing\n, компания, которая нацелена на расширение умных городов с помощью индивидуальных концепций, таких как интеллектуальная парковка или система мониторинга трафика.\nПромышленные и умные заводы\nЗаводы становятся всё более и более связанными. Процесс выполнения задач более автоматизирован, чем когда-либо. Как следствие, возникает очевидная необходимость иметь возможность контролировать каждый элемент производственной цепочки для обеспечения максимальной производительности. Но даже когда машины не выполняют всю работу и задействованы люди, мониторинг временных рядов даёт уникальную возможность донести соответствующие показатели до менеджеров.\nПомимо повышения производительности, они могут способствовать созданию более безопасных рабочих мест, поскольку они способны быстрее обнаруживать проблемы.\nВаше собственное воображение\nПриведённые выше примеры являются лишь примерами. Ваше воображение — это единственное ограничение для приложений, которые вы можете применить для баз данных временных рядов. Например, временные ряды могут использоваться даже в \nкибербезопасности\n.\nИдём дальше\nВ этой статье было рассмотрено, что такое базы данных временных рядов и как они используются в реальном мире. А также много технических терминов, стоящих за InfluxDB.\nХороший совет — создайте что-то сами. \nУстановите\n InfluxDB, поиграйте с инструментами. Создайте информационную панель, поиграйтесь с запросами, настройте некоторые оповещения. Только так вы сможете сами «пощупать» эту технологию и составить о ней своё мнение.\nЗадачи по Python для начинающих от Tproger и GeekBrains\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nБазы данных\nТакже рекомендуем:\nКак использовать базу данных MySQL в Java\n15 полезных команд PostgreSQL\nSQLite, MySQL и PostgreSQL: сравниваем популярные реляционные СУБД\nSQL и NoSQL: разбираемся в основных моделях баз данных",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/iconfinder-icon-4-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"869px\" viewBox=\"0 0 869 288\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/difference-relational-time-series-1024x288.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"727px\" viewBox=\"0 0 727 424\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/difference-dbms-tsdb.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"907px\" viewBox=\"0 0 907 276\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/consumption-1024x355.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"873px\" viewBox=\"0 0 873 400\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/production-1024x436.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"896px\" viewBox=\"0 0 896 326\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/e54p45p45p.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"855px\" viewBox=\"0 0 855 492\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/influx-internals.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"473px\" viewBox=\"0 0 473 274\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/measurement-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"520px\" viewBox=\"0 0 520 240\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/tags-vs-fields-1024x333.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"520px\" viewBox=\"0 0 520 240\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/tags-vs-fields-1024x333-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"460px\" viewBox=\"0 0 460 335\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/taxonomy.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"750px\" viewBox=\"0 0 750 378\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/retention-policies-1.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/math-for-ai-probability/",
                "title": "Математика для ИИ: теория вероятностей",
                "created_date": "4 октября 2019 в 17:05",
                "body": "Перевод статьи \n«Mathematics for Artificial Intelligence – Probability»\nМашинное обучение, глубокое обучение и ИИ — интересные и широко обсуждаемые темы по всему миру. Но как и в разработке ПО, разобраться в этой области сможет не каждый. Многие думают, что если у них за плечами годы разработки различных приложений, то они имеют преимущество над простыми новичками. В какой-то степени они правы, но «не говори гоп, пока не перепрыгнешь», особенно когда дело касается математики.\nВ \nпредыдущей статье\n вы познакомились с базовыми концепциями линейной алгебры. Эта статья поведает вам о теории вероятностей. Учитывайте, что цель статьи — не заменить курс в университете, а познакомить читателя с темой, чтобы дальше он уже сам решил, стоит ли ему углубляться.\nБазовые термины\nМожет быть немного странно работать с вероятностями в информатике, так как большинство ветвей имеют дело с детерминированными и определёнными сущностями. Но когда речь идёт об искусственном интеллекте, неопределённость и хаотичность проявляется во многих формах. Безусловно, данные являются основным источником неопределённости, но источником может быть и модель. И теория вероятностей обеспечивает методы для моделирования и работы с неопределённостью, её используют для анализа частоты возникновения событий.\nВероятность — возможность осуществления чего-либо. По сути, это число от 0 до 1, где 0 указывает на невозможность возникновения события, а 1 указывает на достоверность его возникновения. Вероятность возникновения события \nA\n будет обозначаться  \nP(A)\n или \np(A)\n. То есть, если \nP(A)\n = 1, то можно сказать, что событие \nA \nточно произойдёт, а если \nP(A)\n = 0, то событие точно не произойдёт. В связи с этим, можно вывести \nP(A\nc\n)\n, \nдополнение события\n. Оно имеет значение \nP(A\nc\n)\n = 1 – \nP(A)\n и обозначает вероятность того, что событие \nA\n никогда не произойдёт.\nКонференция MIELOCONF\n24 января, Москва, 10 000–17 000 ₽\ntproger.ru\nСобытия и курсы на tproger.ru\nКогда речь идёт о вероятностях нескольких событий и взаимодействиях между ними, используется термин \nсовместная вероятность\n. Она представляет собой вероятность того, что произойдут оба события. Если эти события независимы, совместную вероятность можно определить так:\nОднако, если эти события являются взаимоисключающими, формула усложняется:\nТеперь будут приведены некоторые термины, которые используются при вычислении вероятности. Какова вероятность события \nA\n, если произошло событие \nB\n? Для того, чтобы узнать, нужно вычислить \nусловную вероятность\n.\n\n\nОчень интересно, что совместная вероятность по нескольким случайным переменным может быть разделена на условные распределения по одной переменной — такое преобразование называют \nцепным правилом\n:\nТакже следует упомянуть простое, но основополагающее \nправило Байеса\n. Оно описывает вероятность события, базируясь на знании условий или других событий, связанных с главным событием:\nИли же его упорядоченная версия:\nP(A)\n — априорная вероятность гипотезы \nA\n, \nP(A|B)\n – вероятность гипотезы \nA\n при наступлении события \nB\n (апостериорная вероятность), а \nP(B|A)\n – вероятность наступления события \nB\n при истинности гипотезы \nA\n. Когда мы говорим о машинном обучении, глубоком обучении или искусственном интеллекте, мы используем правило Байеса для обновления параметров нашей модели.\n\nСлучайные величины и распределение вероятностей\nСлучайной величиной называется такая величина, которая случайно принимает какое-то значение из множества возможных значений. Или более точно — это функция, которая конвертирует результат какого-либо изменяющегося процесса в числовое значение. В математике обозначается так:\nЗдесь \nΩ\n — это набор возможных исходов, а \nЕ\n — некоторое измеримое пространство. Однако, случайная величина — лишь шаблон, она содержит возможные значения процесса. И чтобы она стала по-настоящему полезной, её стоит объединить с \nраспределением вероятностей\n. В итоге вы узнаете, насколько вероятно каждое значение. Случайные величины могут быть как \nдискретными\n, так и \nнепрерывными\n, и как следствие, существуют два способа описания распределения вероятностей.\nДискретная случайная величина имеет конечное число значений. Их можно рассматривать в качестве категориальных переменных или перечислений. Распределение вероятностей по этому типу случайных величин описывается с помощью функции вероятностной массы (англ. probability mass function — PMF). Эта функция определяет вероятность  того, что дискретная случайная величина равняется тому или иному значению. Предполагается, что \nХ: Ω → [0, 1] \n— это дискретная случайная величина, содержащая набор возможных исходов \nΩ\n для пространства со значениями 0 и 1:\nНепрерывная случайная величина имеет значения из множества действительных чисел (а их бесконечное множество). Распределение вероятностей случайной величины этого типа определяется при помощи функции плотности вероятности (англ. probability density function — PDF). Эта функция должна чётко соответствовать условиям: во-первых, область\n р\n — это набор всех возможных значений \nх\n. Стоит уточнить: функция принимает только значения больше или равные 0. Во-вторых, функция должна удовлетворять следующему условию:\nНо проблема в том, что эта функция не определяет вероятность конкретного значения, а даёт вероятность нахождения этого значения в бесконечно малой области значений. И всё потому, что вероятность того, что распределение вероятности примет какое-либо конкретное значение, равна 0, так как существует бесконечное множество возможных значений. Вероятность того, что \nх\n находится где-то в промежутке \n[a, b]\n, определяется так:\nМатематическое ожидание, дисперсия и ковариация\nВ теории вероятностей \nматематическое ожидание\n определяется как среднее значение повторения некоторого события. То есть ожидаемое значение некоторой функции \nf(x)\n над распределением вероятностей \nP(x)\n является средним значением \nf\n, когда \nx\n берётся из \nP\n. Для дискретных случайных величин оно определяется следующим образом:\nА для непрерывных случайных величин вот так:\nМожно сказать, что данное значение является мерой так называемого «центра» распределения вероятностей. Но также хотелось бы узнать, как меняются значения функции\n f(x)\n случайной величины \nx\n, когда мы берём разные значения из её распределения вероятностей \nP(x)\n. Это называется \nдисперсией\n. Она представляет собой среднеквадратическое отклонение значений \nf(x)\n от среднего значения \nf(x)\n:\nА корень этого выражения будет называться \nстандартным отклонением\n. Исходя из этого можно определить \nковариацию\n. По сути, это мера линейной зависимости двух случайных величин. Она показывает, насколько сильно два числа линейно связаны:\nНе смешно? А здесь смешно: \n@ithumor\nИскусственный интеллект\n, \nМатематика и теория вероятностей\nТакже рекомендуем:\n123 задачи с IT-собеседований с разбором решений\nВероятность встретить машину на пустынном шоссе\nЧто делать, если вы хотите изучать ИИ, но не шарите в математике? Часть первая. Теория\nТест на знание алгоритмов",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/probability_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"206px\" viewBox=\"0 0 206 44\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/image-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"331px\" viewBox=\"0 0 331 55\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/image-2.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"210px\" viewBox=\"0 0 210 64\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/image-5.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"337px\" viewBox=\"0 0 337 50\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/image-6.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"214px\" viewBox=\"0 0 214 72\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/image-7-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"191px\" viewBox=\"0 0 191 35\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/08/image-8-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"133px\" viewBox=\"0 0 133 47\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-9.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"351px\" viewBox=\"0 0 351 57\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-10-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"196px\" viewBox=\"0 0 196 69\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-11-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"111px\" viewBox=\"0 0 111 74\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-12-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"215px\" viewBox=\"0 0 215 59\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-13-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"221px\" viewBox=\"0 0 221 62\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-14-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"299px\" viewBox=\"0 0 299 55\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-15.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"465px\" viewBox=\"0 0 465 47\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image-16-1.png"
                ]
            },
            {
                "url": "https://tproger.ru/translations/good-software-code-architecture/",
                "title": "Качественная архитектура ПО на примере концепции Linux «всё есть файл»",
                "created_date": "3 октября 2019 в 17:31",
                "body": "Адаптированный перевод статьи \n«Good Code Design From Linux/Kernel»\nВ статье показано, как в Linux/FFmpeg организована кодовая база на C с учётом расширяемости, которая работает так, будто в C есть полиморфизм. Вы увидите, как концепция Linux «всё — файл» работает на уровне исходного кода, а также как FFmpeg позволяет быстро и легко добавлять поддержку новых форматов и кодеков.\n \nКачественный дизайн ПО — введение\nВ процессе работы над кодом программисты \nрегулярно сталкиваются\n с тем, что качественный дизайн кода \nокупается впоследствии\n при усложнении продукта. Для создания полезного и легко поддерживаемого в долгосрочной перспективе ПО разработчики подбирают определённые шаблоны и объединяют их в абстракции, и похоже, что разработчики Linux и FFmpeg поступили именно так.\nПри разработке программ создаются структуры данных и определяются их зависимости и поведение. То, как они построены и связаны между собой, можно рассматривать как дизайн/архитектуру ПО.\nПредположим, что мы разрабатываем фреймворк для обработки видео- и аудиофайлов. Кодеки \nAV1\n, H264, HEVC и AAC производят некоторые идентичные операции с данными, и если мы разработаем некоторую обобщённую абстракцию, включающую эти операции, мы сможем использовать эту абстракцию вместо того, чтобы реализовывать конкретную идею, заложенную в каждом отдельном кодеке.\nЕщё один хороший приём — использовать слабо связанные компоненты, чётко определив их функции.\nRuby\nВозможно, эти концепции проще понять на практике. Сделаем примерный набросок фреймворка для обработки потоковых медиаданных, использующего несколько разных кодеков.\nclass AV1\r\n  def encode(bytes)\r\n  end\r\n  def decode(bytes)\r\n  end\r\nend\r\n\r\nclass H264\r\n  def encode(bytes)\r\n  end\r\n  def decode(bytes)\r\n  end\r\nend\r\n\r\n# ...\r\n\r\nsupported_codecs = [AV1.new, H264.new, HEVC.new]\r\n\r\nclass MediaFramework\r\n  def encode(type, bytes)\r\n    codec = supported_codecs.find {|c| c.class.name.downcase == type}\r\n\r\n    codec.encode(bytes)\r\n  end\r\nend\nЭтот код на \nRuby\n отражает одну из описанных выше концепций. Без конкретизации в коде предполагается, что каждый кодек реализует функции \nencode\n и \ndecode\n. Поскольку Ruby — язык с динамической типизацией, любой класс может иметь реализацию этих двух операций и работать как кодек.\nТакой дизайн кода можно назвать хорошим, поскольку если нам потребуется добавить новый кодек, нужно только включить его реализацию в список. Разумеется, список можно сделать и динамическим. Смысл примера в том, что такой код легко расширять и поддерживать, поскольку компоненты слабо связаны между собой и каждый из них делает только то, что должен.\nФреймворк Ruby on Rails подталкивает к определённым способам организации кода, реализуя архитектуру «Модель-Представление-Контроллер» (MVC).\nGo\nОбращаясь к языкам со статической типизацией, таким как \nGo\n, нам придётся быть более формальными, описывая требуемые типы, но мы всё равно можем создать код, аналогичный приведённому выше.\ntype Codec interface {\r\n   Encode(data []int) ([]int, error)\r\n   Decode(data []int) ([]int, error)\r\n} \r\n\r\ntype H264 struct {\r\n}\r\n\r\nfunc (H264) Encode(data []int) ([]int, error) {\r\n  // Много кода\r\n  return data, nil\r\n}\r\n\r\nvar supportedCodecs := []Codec{H264{}, AV1{}}\r\n\r\nfunc Encode(codec string, data int[]) {\r\n // Здесь мы можем выбрать e, используя\r\n // supportedCodecs[0].Encode(data)\r\n}\nТип \ninterface\n в Go\n намного мощнее аналогичной конструкции в Java, так как его определение никак не связано с реализацией, и наоборот. Можно даже присвоить каждому кодеку тип \nReadWriter\n и использовать в таком виде.\nС\nНа C тоже можно создать код с аналогичным поведением, но будут некоторые отличия.\nstruct Codec\r\n{\r\n\t*int (*encode)(*int);\r\n\t*int (*decode)(*int);\r\n};\r\n\r\n\r\n*int h264_encode(int *bytes)\r\n{\r\n// ...\r\n}\r\n\r\n*int h264_decode(int *bytes)\r\n{\r\n// ...\r\n}\r\n\r\nstruct Codec av1 =\r\n{\r\n\t.encode = av1_encode,\r\n\t.decode = av1_decode\r\n};\r\n\r\nstruct Codec h264 =\r\n{\r\n\t.encode = h264_encode,\r\n\t.decode = h264_decode\r\n};\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\th264.encode(argv[1]);\r\n}\nПримечание\n Код создан по примеру \nразмещённого\n на сайте \nComputer Science from the Bottom Up\n.\nСначала в обобщённой структуре мы определяем абстрактные операции (в данном случае функции). Затем мы наполняем их конкретным кодом, например кодером и декодером кодека av1.\nМножество других языков поддерживают \nсходные механизмы\n распределения методов или функций, как если бы они придерживались некой конвенции. В результате ПО на уровне ОС достаточно уметь работать только с показанными высокоуровневыми абстракциями.\nLinux kernel и концепция «всё — файл»\nКонцепция \n«всё — файл»\n ОС Linux позволяет использовать один интерфейс для работы с любыми ресурсами системы. Например, Linux обрабатывает сетевые сокеты, особые файлы (такие как \n/\nproc\n/cpuinfo\n) и даже USB-устройства как файлы.\nЭтот подход облегчает разработку программ для ОС, поскольку мы можем использовать хорошо изученный набор операций для абстракции, названной «файлом». Вот как это работает:\n# В первом, самом простом, случае мы читаем простой текстовый файл\r\n$ cat /etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\n...\r\n\r\n# Здесь мы действуем, как если бы считывали простой файл,\r\n# хотя на самом деле это не так (технически, конечно, именно так)\r\n$ cat /proc/meminfo\r\nMemTotal:        2046844 kB\r\nMemFree:          546984 kB\r\nMemAvailable:    1535688 kB\r\nBuffers:          162676 kB\r\nCached:           892000 kB\r\n \r\n# И наконец, мы открываем файл (используя fd=3) для чтения/записи\r\n# Этот «файл» на самом деле — сокет. Затем мы отправляем запрос этому файлу >&3\r\n# и считываем из него же\r\n$ exec 3<> /dev/tcp/www.google.com/80\r\n$ printf 'HEAD / HTTP/1.1\\nHost: www.google.com\\nConnection: close\\n\\n' >&3\r\n$ cat <&3\r\nHTTP/1.1 200 OK\r\nDate: Wed, 21 Aug 2019 12:48:40 GMT\r\nExpires: -1\r\nCache-Control: private, max-age=0\r\nContent-Type: text/html; charset=ISO-8859-1\r\nP3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\"\r\nServer: gws\r\nX-XSS-Protection: 0\r\nX-Frame-Options: SAMEORIGIN\r\nSet-Cookie: 1P_JAR=2019-08-21-12; expires=Fri, 20-Sep-2019 12:48:40 GMT; path=/; domain=.google.com\r\nSet-Cookie: NID=188=K69nLKjqge87Ymv4h-gAW_lRfLCo7-KrTf01ULtY278lUUcaNxlEqXExDtVB104pdA8CLUZI8LMvJv26P_D8RMF3qCDzLTpjji96B9v_miGlZOIBro6pDreHP0yW7dz-9myBfOgdQjroAc0wWvOAkBu-zgFW_Of9VpK3IfIaBok; expires=Thu, 20-Feb-2020 12:48:40 GMT; path=/; domain=.google.com; HttpOnly\r\nAccept-Ranges: none\r\nVary: Accept-Encoding\r\nConnection: close\nЭто возможно только потому, что концепция файла (структуры данных и операции) была разработана как один из главных способов взаимодействия подсистем.  Вот участок API-структуры \nfile_operations\n:\nstruct file_operations {\r\n\tstruct module *owner;\r\n\tloff_t (*llseek) (struct file *, loff_t, int);\r\n\tssize_t (*read) (struct file *, char __user *, size_t, loff_t *);\r\n\tssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);\r\n  // ...\r\n}\nЭта структура чётко определяет то, что мы подразумеваем под концепцией файла, и какое поведение мы от него ожидаем:\nconst struct file_operations ext4_dir_operations = {\r\n\t.llseek\t\t= ext4_dir_llseek,\r\n\t.read\t\t= generic_read_dir,\r\n\t// ...\r\n};\nЗдесь можно увидеть набор функций, реализующих это поведение, в \nфайловой системе ext4\n.\nstatic const struct file_operations proc_cpuinfo_operations = {\r\n\t.open\t\t= cpuinfo_open,\r\n\t.read\t\t= seq_read,\r\n\t.llseek\t\t= seq_lseek,\r\n\t.release\t= seq_release,\r\n};\nДаже файлы \ncpuinfo proc\n реализованы через эту абстракцию. Фактически, работая с файлами под Linux, вы используете виртуальную файловую систему (\nVFS\n), которая в свою очередь обращается к функциям абстракции.\nИсточник\nFFmpeg — форматы\nВот общая схема архитектуры \nпроцессов FFmpeg\n, демонстрирующая, что внутренние компоненты связаны в основном через такие абстрактные концепции, как \nAVCodec\n, а не напрямую через конкретные кодеки.\nДля входящих файлов в FFmpeg создаётся структура \nAVInputFormat\n, реализуемая любым форматом (видеоконтейнером), который требуется использовать. Файлы MKV также \nзаполняют эту структуру\n своей реализацией, как и \nформат MP4 — своей\n.\ntypedef struct AVInputFormat {\r\n    const char *name;\r\n    const char *long_name;\r\n    const char *extensions;\r\n    const char *mime_type;\r\n    ff_const59 struct AVInputFormat *next;\r\n    int raw_codec_id;\r\n    int priv_data_size;\r\n    int (*read_probe)(const AVProbeData *);\r\n    int (*read_header)(struct AVFormatContext *);\r\n  }\r\n  \r\n  // matroska\r\n  \r\n  AVInputFormat ff_matroska_demuxer = {\r\n    .name           = \"matroska,webm\",\r\n    .long_name      = NULL_IF_CONFIG_SMALL(\"Matroska / WebM\"),\r\n    .extensions     = \"mkv,mk3d,mka,mks\",\r\n    .priv_data_size = sizeof(MatroskaDemuxContext),\r\n    .read_probe     = matroska_probe,\r\n    .read_header    = matroska_read_header,\r\n    .read_packet    = matroska_read_packet,\r\n    .read_close     = matroska_read_close,\r\n    .read_seek      = matroska_read_seek,\r\n    .mime_type      = \"audio/webm,audio/x-matroska,video/webm,video/x-matroska\"\r\n};\r\n\r\n// mov (mp4)\r\n\r\nAVInputFormat ff_mov_demuxer = {\r\n    .name           = \"mov,mp4,m4a,3gp,3g2,mj2\",\r\n    .long_name      = NULL_IF_CONFIG_SMALL(\"QuickTime / MOV\"),\r\n    .priv_class     = &mov_class,\r\n    .priv_data_size = sizeof(MOVContext),\r\n    .extensions     = \"mov,mp4,m4a,3gp,3g2,mj2\",\r\n    .read_probe     = mov_probe,\r\n    .read_header    = mov_read_header,\r\n    .read_packet    = mov_read_packet,\r\n    .read_close     = mov_read_close,\r\n    .read_seek      = mov_read_seek,\r\n    .flags          = AVFMT_NO_BYTE_SEEK | AVFMT_SEEK_TO_PTS,\r\n};\nТакой дизайн позволяет легко интегрировать новые кодеки, форматы и протоколы. В мае 2019 года в FFmpeg был включён кодек \nDAV1d\n (аналог av1 с открытым исходным кодом), и, \nизучив изменения в коде\n, вы увидите, насколько безболезненно прошло внедрение. В итоге ему только требуется зарегистрироваться в качестве доступного кодека и придерживаться списка общих операций.\n+AVCodec ff_libdav1d_decoder = {\r\n+    .name           = \"libdav1d\",\r\n+    .long_name      = NULL_IF_CONFIG_SMALL(\"dav1d AV1 decoder by VideoLAN\"),\r\n+    .type           = AVMEDIA_TYPE_VIDEO,\r\n+    .id             = AV_CODEC_ID_AV1,\r\n+    .priv_data_size = sizeof(Libdav1dContext),\r\n+    .init           = libdav1d_init,\r\n+    .close          = libdav1d_close,\r\n+    .flush          = libdav1d_flush,\r\n+    .receive_frame  = libdav1d_receive_frame,\r\n+    .capabilities   = AV_CODEC_CAP_DELAY | AV_CODEC_CAP_AUTO_THREADS,\r\n+    .caps_internal  = FF_CODEC_CAP_INIT_THREADSAFE | FF_CODEC_CAP_INIT_CLEANUP |\r\n+                      FF_CODEC_CAP_SETS_PKT_DTS,\r\n+    .priv_class     = &libdav1d_class,\r\n+    .wrapper_name   = \"libdav1d\",\r\n+};`\nБезотносительно используемого нами языка мы всегда можем как минимум попытаться создать код со \nслабой зависимостью\n и \nвысокой согласованностью\n. Именно эти два основных свойства позволят вам писать ПО, которое легко расширять и поддерживать.\nНе смешно? А здесь смешно: \n@ithumor\nАрхитектура ПО\n, \nОсновные принципы программирования\nТакже рекомендуем:\nОсновные принципы программирования: стек и куча\nОсновные принципы программирования: функциональное программирование\nОсновные принципы программирования: императивное и декларативное программирование\nОсновные принципы программирования: компилируемые и интерпретируемые языки",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/code_design_icon-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"768px\" viewBox=\"0 0 768 220\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/diagram_components.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 412\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/pic2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 399\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/pic3.png"
                ]
            },
            {
                "url": "https://tproger.ru/articles/elbrus-teambuilding/",
                "title": "Тимбилдинг по методу «Эльбруса»: альтернативный способ сплотить команду IT-специалистов",
                "created_date": "2 октября 2019 в 15:08",
                "body": "Роман Канищев, менеджер по развитию бизнеса в «Лаборатории Качества»\nКоротко о главном\n«Лаборатория Качества» живёт тестированием, вокруг него строится наша философия, наше благосостояние и будущее компании. Мы тестируем виртуальные программные продукты, и делаем это удалённо.\nНо мы редко тестируем на прочность себя и уж тем более не тестируем друг друга в экстремальных ситуациях в офлайн-режиме. Эльбрус стал той стратегией тестирования, которая помогла найти кучу дефектов в нашей системе корпоративных отношений и внутрикомандного взаимодействия. Мы протестировали себя на нагрузку, на функциональность, на гибкость и удобство коммуникации, нашли и устранили пару блокеров в личных отношениях, зафиксировали и поставили в очередь на доработку критические ошибки.\nМы ехали тестировать Эльбрус, а в итоге Эльбрус научил нас, как тестировать себя. За что мы ему безмерно благодарны.\nВместо предисловия\nМечта любого руководителя — сплочённый и дружный коллектив, где каждый отдельный сотрудник заинтересован в достижении общих целей команды, а не отдельно своих, где чувство конкуренции вытеснено сотрудничеством, а командный дух выведен на новый уровень. Но такие люди сами по себе в компаниях не рождаются, для этого руководство проводит разного рода мероприятия, нацеленные на командообразование, в простонародье — тимбилдинг.\nОбычный сценарий тимбилдинга в здоровой компании: коллеги съезжаются в комфортабельный загородный дом и начинают выполнять стандартные упражнения, например падать друг другу на руки, водить «слепых» коллег по лабиринтам, орать гимн компании под 3 аккорда и так далее…\nКак может выглядеть тимбилдинг в компании, которая привыкла тестировать ПО и себя на прочность? Основатель компании перебирает все самые жёсткие варианты тимбилдинга. И, разочаровавшись в их эффективности, устраивает настоящее реалити-шоу!\nСценарий\nИз разных уголков мира — компания-то удалёнщиков — съезжаются 4 ТОПа компании и их подчинённые, чтобы протестировать лимиты своих возможностей и взобраться на самую высокую точку Европы — Эльбрус (5642 метра).\nЗачем?\nВсе помнят фразу: «Я бы с ним в разведку не пошёл»? Мы решили создать эмуляцию разведки в мирное время. Эльбрус — это, конечно, великолепное приключение и испытание для любого человека. Но горы не для одиночек. Поэтому лучший способ проверить коллектив на прочность и умение достигать общих целей трудно себе представить.\nКак готовились?\nОрганизовали беговой клуб и тренировались своими силами. Делились результатами и прогрессом. Обязательное требование — пробегать 10 км за 70 минут.\nДля информирования и подготовки к восхождению записали своими силами ряд вебинаров, где выкладывались данные по экипировке, акклиматизации и орг. моментам.\nЗаставлять и уговаривать тоже никого не пришлось. Желающих было с избытком, но часть отсеялась по собственному желанию, а часть по медицинским показателям. В качестве дополнительного стимула компания взяла на себя основные расходы на экипировку, проживание, еду и гидов. Организацией и планированием со словами «хоть бы никто там не умер» вечерами занималась лично основательница «Лаборатории Качества» — Наталья Руколь.\nФормат\nБезумное сочетание проекта «Дом 2», «Последнего героя», фильма «Вертикаль» и шоу Бенни Хилла.\nВ главных ролях\nВеганы, айтишники-интроверты, многодетные отцы, мачо-переговорщики, семейные парочки, рукастые тестировщики, феи-маркетологи, дымящие аналитики и другие.\nУгадайте, кто есть кто\nА теперь о самом процессе тестирования\nЗабегая наперёд, невозможно однозначно сказать, кто кого тестировал — мы себя и нашу команду или Эльбрус — нас, своими тяжёлыми условиями создав идеальную тестовую площадку для формирования атмосферы взаимопомощи, полной самоотдачи и даже семьи.\nНачиналось всё вполне себе стандартно. Насколько вообще может быть стандартным воссоединение людей, которые работают в сотнях километров друг от друга. Историческая встреча проекта «Эльбрус» состоялась в аэропорту Минеральных Вод. Многие впервые увидели коллег вживую, поэтому в удивлённых глазах зачастую читался вопрос: «Привет, а ты…?», — неловкая пауза… затем следовал столь же неловкий ответ, после которого все радостно обнимались и делали вид, что узнали друг друга тут же, с первого взгляда. Команда притиралась, начинала переходить от формата цифрового общения к более тёплому — человеческому.\nФаза сопоставления аватарок скайпа с реальными лицами команды «тестеров» продолжалась на протяжении всего пути в Пятигорск, где после дозаправки отменными осетинскими пирогами мы переключились на подбор инструментов для предстоящего тестирования. Горы легкомыслия не прощают, а потому к багажу каждого восхожденца добавился 60-литровый рюкзак снаряжения, включая колющие, рубящие, душащие и прочие приспособления, спасшие одному из участников жизнь, но об этом позднее.\nЗатишье перед бурей\nКогда все пожитки и оборудование были размещены в номерах, решено было насладиться кратким мигом затишья и воспользоваться гостеприимством Пятигорска. Тогда мы ещё не думали, что стоит беречь силы, потому кабанчиками пробежались по городу, сделав несколько незабываемых фото.\nТучи сгущаются\nУтро Пятигорска встретило нас первой болью в ногах, скоростными сборами, трамбовкой всего скарба в «Мерседес Спринтер» с колоритным кавказским водителем и трансфером жёстким забросом всей пока ещё изнеженной делегации ближе к театру реальных действий — на высоту 1500 метров в Архыз.\nПо дороге не обошлось без мистики. По стечению обстоятельств наш кавказский шумахер долго не мог определиться с местом стоянки, а наши пятые точки уже начали прикипать к сиденьям «Мерса». Так продолжалось, пока с задних рядов не донёсся истошный вопль: «Всё, больше не могу, тормози прямо здесь».\nКартина: одинокая обочина горной дороги, безлюдье, дождь и сопровождающий его туман, люди вышли на разведку близлежащего кустарника, а через пару минут к нам несётся наш уважаемый Биг Босс со странным для закоренелого вегана вопросом: «У кого есть колбаса?». Пока мы думаем, что такое укусило Наташу в горах, она уже командует вытащить палку дорогущего балыка, без пяти минут нашего обеда, находит нож, назначает Романа, нашего маркетолога, мясником и с радостными глазами тащит его за собой в подлесок.\nА там сюр: одни-одинёшеньки на километры вокруг, под деревом жмутся друг к другу два безродных щенка, братик и сестричка. Откуда взялись — непонятно, как нашлись — тоже, но это и не нужно. Им уже режется деликатесный балык. Щенки и Биг Босс довольны, мясоеды в компании голодны, но тоже рады этому маленькому чуду. Водитель чуть ли не плачет, остаток пути проходит в умилении под звуки урчащих желудков.\nБуря в Архызе\nКак говорится, ничего не предвещало… Милая предгорная деревушка, детские 1500 метров, радушные кавказцы и обалденная природа. А ещё «щадящая» программа адаптации к высоте: подъём в 5 утра, температура +- 0 летом, в 5:30 пробежка в гору под углом 45 градусов, камни и буераки, коровьи лепёхи, мозоли, а на десерт — первый серьёзный трекинг к Софийским озёрам.\n«Простой трекинг», — говорили они… «Это только разминка, — говорили они, — главное — не смотри назад, а если упадёшь, то не кричи и тормози всем телом». Сложность этого первого для офисного планктона восхождения могла затмить только красота вида, открывшегося на озёра в конце нашего маршрута.\nТрудно объяснить, что чувствует группа людей, которые вместе преодолевают трудности, превозмогают себя, подбадривают и сопереживают друг другу, а потом преломляют хлеб и распивают горячий чай, глядя на такую красоту.\nЗапала Софийских озёр нам хватило, чтобы в целости спуститься в Архыз и даже на следующий день, чтобы остудить свой пыл, сплавившись на рафте по реке Большой Зеленчук.\nНет лучше теста на слаженность действий, чем рафтинг. Или ты слушаешь команды руководителя отдела ПРИМы, благоразумно севшей в центре и делегировавшей вёсла сотрудникам, или ты соскребаешь себя с берегов и пороговых камней горной реки. А ещё эти попытки задать ритм гребле суматошными криками: «И раз, и два». Невольно вспоминаешь байки про Галеры ЛК… (Намёк на то, что наши сотрудники пашут, как рабы на галерах). Так вот они какие, эти галеры, самом деле.\nРедко ходить — говорили они…\nНа третий день свежий воздух Архыза нас наконец отпустил. Сонные тела были утрамбованы вперемежку со снаряжением во всё тот же фургончик одного маленького, но очень гордого кавказца, оказавшегося кабардинцем, и этапированы прямиком в долину Азау — 2300 метров.\nДолина, или поляна Азау, по заверению местных жителей, переводится как «редко ходить». Так вот, это тот самый случай, когда название и реальность не имеют абсолютно ничего общего. Ходить было куда, ходить нужно было не так уж и редко, но что компенсировало стёртые к вечеру ноги и болящие суставы, так это:\nвсё более красивые места, куда мы забредали;\nвсё более яркие эмоции, что мы получали;\nи всё более тёплые вечера, когда мы могли наконец отдохнуть, обменяться впечатлениями и узнать друг друга получше.\nФункциональное тестирование Эльбрусом\nИ только нам стоило привыкнуть ко всей этой красоте, как в нашу горную идиллию ворвался его величество Эльбрус. Вначале он сделал это мягко и ненавязчиво. Подъёмник забрал нас в Азау и высадил на 3500. Эльбрус козырнул нам приятной погодой и иллюзией своей доступности и простоты восхождения. В тот день мы поднялись на 4200. Порадовались своей крутизне, отсутствию симптомов горной болезни и спустились чуть ниже, в так называемый приют. Мы же про себя назвали этот вагончик «душным кошмаром клаустрофоба».\nИ тут наша команда начала сбоить. Высота вытягивала силы быстрее, чем мы успевали их восстанавливать. Появились проблемы с дыханием, гудели мышцы, активизировались болячки и простуды, напряглись нервы. Буквально за одну ночь компания уставших, но в целом жизнерадостных людей превратилась в кучку угрюмых зомби, бредущих куда-то в одиночном режиме по своим делам. Вот тут наш тимбилдинг перешёл в фазу шоу «Последний герой», когда формально мы оставались командой, но по факту каждый стал топить за себя. Функциональное тестирование Эльбрусом начало выдавать дефект за дефектом. Функции улыбок и эмпатии отвалились напрочь. Функции добрых слов и ободрений работали через раз. Ребята устали и поникли.\nВесь следующий день команда разваливалась и умирала. Мы кое-как вползли на 4600 и вернулись в очередной приют «Сердце Эльбруса» на 3800, где продолжили ныть и разлагаться.\nВолевая скрепа Руколь\nПомощь пришла оттуда, откуда её меньше всего ждали. Будучи язвой и врединой на протяжении большей части поездки, Наташа Руколь собралась и взяла ситуацию под контроль. Кому нужно — раздала мотивационных зуботычин, кому было нужно не это — прописала слова поддержки и взаимопонимания, остальным досталась доза личного примера самообладания.\nРасчёт был верным — чтобы создать что-то более крепкое и сильное, нужно сначала уничтожить старое и отжившее, дать ему уйти и разложиться, а потом перестроить всё заново, заложить новый фундамент. Предпоследние сутки перед восхождением должны были показать, удалось ли нам обрести за эти 10 дней командный дух или мы так и остались людьми, что привыкли отсиживаться по ту сторону монитора.\nИ знаете, то ли помогла волевая скрепа Руколь, то ли действительно сказался груз совместно пережитых лишений, а возможно, мы наконец-то привыкли к внезапно набранной высоте, ветрам и скрипу снега под ногами, но именно в тот день мы смогли рвануть сразу на 5050. Кардинально сменилось и поведение: мы шли более слаженно, примерно в одном ритме, подтягивали отстающих, подбадривали их на стоянках, а на конечной точке «Замёрзший ратрак» сделали вот такое замечательное фото.\nДумаю, лица сами говорят о наших ощущениях в тот момент.\n24-часовая готовность\nЗа оставшийся перед восхождением день удалось закрепить полученный эффект. В этот день мы отдыхали, отсыпались, отъедались, общались в уютной кафешке «Сердца Эльбруса», периодически забывая, что мы посреди горы, на высоте 3800.\nДолгожданный отдых принёс нам свежие силы, а вновь приобретённая атмосфера единения подтолкнула к тем самым душевным диалогам, которые сближают людей и делают из них не просто коллег, но друзей и товарищей.\nНагрузочное тестирование Эльбрусом\nДень восхождения начался задолго до первых лучей солнца. Ранний подъём (в час ночи) сменил столь же ранний завтрак. Остаток времени перед выходом ушёл на проверку снаряжения, заварку чая в термосах и нервное броуновское движение всех восхожденцев по холлу приюта. Атмосфера напоминала сдачу особо трудного экзамена, когда ты ждёшь своей очереди и дико нервничаешь, но стоит раздаться твоей фамилии — наступает момент принятия, и тебе больше ничего не остаётся, как смириться и идти в бой.\nРезкая команда гида «Всё, выходим» вывела нас из мрачного оцепенения, мгновенный испуг на лицах сменила мрачная решимость и стремление идти до конца. Команда айтишников и офисного планктона уходила в ночь, выхватывая тусклыми фонариками 2–3 метра оледенелого горного подъёма перед собой. По склону можно было увидеть огни медленно ползущих вверх ратраков других групп восхождения. Во тьме казалось, что это какие-то таинственные светящиеся создания плывут в небе в направлении звёзд.\nРатрак закинул нас примерно на высоту 4700, с этой точки нам предстояло подниматься около 8 часов до вершины Эльбруса. Первыми нас встретили темнота, резкие порывы ветра, сбивающие дыхание и выдувающие тепло, а вместо снега — успевший появиться за ночь ледяной наст под кошками горных ботинок.\nКаково было наше облегчение, когда на горизонте ярким росчерком пробежал оранжевый блик рассвета. Солнце восходило медленно, оно терялось в море облаков, которое на тот момент было уже под нами, и подсвечивало его тёплыми тонами цвета бабочек в животе у влюблённых.\nПогода постепенно наладилась, вместе с лучами солнца у кого-то открылось второе, а у некоторых — уже пятое дыхание. Короткие стоянки сменялись продолжительными марш-бросками. ЛКаши подустали, начали выбиваться из сил, но эффект единения, достигнутый в предпоследний день, не давал духу в группе упасть. Мы часто думали, что «вот ещё немного — и я достигну своего лимита, я больше не могу», но закалённая тренировками сила воли и поддержка команды помогали находить силы на новый рывок и отодвигать лимиты до сверхчеловеческих для работников IT-индустрии границ.\nДо самой вершины добрались всё же не все, горы не прощают слабины, а потому сиюминутная ошибка — и вот один из наших ребят уже летит с тропы, вгрызаясь в снег ледорубом. Благо обошлось без травм, но после таких полётов вернуться на маршрут проблематично, поэтому путь на вершину заказан.\nРеакция остальных напоминала порыв праведного гнева, как бы мстя за товарища, оставшиеся члены группы собрали в себе остаток сил, показали Эльбрусу неприличный жест и буквально втащили себя к нему на макушку.\nС нами в тот день поднималась группа китайцев\nХотелось бы написать про чувство счастья и гордости за себя в момент пребывания на вершине. Но нет, буквально все восхожденцы в тот момент чувствовали примерно одно: крайнее истощение, желание побыстрее уйти со сдувающей их вершины и страх перед предстоящим не менее изнурительным спуском. Несмотря на это, мы нашли в себе силы сделать отличные фото, запечатлев себя на самой высокой вершине Европы!\nP. S. В итоге, забив на принципы, мы спустились ножками на несколько сотен метров, а дальше арендовали снегоходы и с ветерком прокатились до «Сердца Эльбруса». Там нас уже не стеснял режим, и потому было решено закатить небольшую пьянку, а впереди нас ждали ещё три дня в Пятигорске, но это уже совсем другая история…\nРезультаты\nНа момент публикации этой статьи прошло уже больше месяца с момента восхождения. Эмоции остыли, воспоминания начинают теряться в суматохе рабочих будней. Возникает резонный вопрос: ради чего это всё было? Руководителям на заметку:\nВо-первых, наладилась коммуникация между отделами\n. Управленческая информация циркулирует теперь более свободно, а не застревает в ведомости какого-то конкретного ТОПа. Отделы стали охотнее кооперироваться и уже провели стратегическую сессию, совместно наметив решение насущных задач.\nВыпустили пар\n. Конфликты были, были и переходы на личности, впрочем как и слёзы, извинения и обнимашки. Никто не ушел обиженным.\nСотрудники увидели своих руководителей за пределами кабинетов и скайпов\n, живыми, в бою, с опухшими губами и соплями по всему лицу. Подорвало ли это авторитет? Скорее наоборот.\nСтало меньше бюрократии\n. Там, где задачи должны решаться быстро, они стали решаться без лишних согласований, под честное слово, которое стало весить заметно больше.\nПоявились общие цели и ориентиры\n. Мы наконец-то поняли, что плывём в одной лодке (спасибо рафтингу) и чтобы преодолеть течение, грести лучше синхронно.\nЗаряд энергии\n, который передался всей компании и чувствуется даже спустя месяц.\n \nНе думаю, что наш опыт уникален, так что делитесь своими версиями экстремального тимбилдинга. Пора планировать следующий отпуск.\nНе смешно? А здесь смешно: \n@ithumor\nДля мотивации\nТакже рекомендуем:\nПочему программисты снова становятся инженерами — вице-президент Parallels рассказал об окончании «эры айтишников»\nЛомаем стереотипы: 46 мифов о программировании\nКак найти первую работу в IT: план действий для начинающих\nКак десятиклассник устроился на работу программистом",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iconfinder_Mountain_2752491-cover-icon-1.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/b4uN2c0L4Zg-e1569607665529-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 901\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image3-2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 901\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image2-2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"848px\" viewBox=\"0 0 848 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image5-3.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image4-3.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image7-3.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image6.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 918\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image10-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 918\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image8-2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 918\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image15-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image11-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image13-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 769\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image16.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"576px\" viewBox=\"0 0 576 1024\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image17.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image18.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 576\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image19.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image20.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image21.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image22.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image23.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image9-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1024px\" viewBox=\"0 0 1024 768\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image12-2.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/devnull/memovosti-11/",
                "title": "Мемовости #11",
                "created_date": "1 октября 2019 в 18:42",
                "body": "Осторожно: в этой рубрике бывает ненормативная лексика\nВ Китае сбежавшего из тюрьмы поймали с помощью дронов\nПравда с большой задержкой, но \nпоймали же\n? 63-летний Сун Цзян был заключен в лагерь за торговлю людьми, но сбежал в 2002 году. И с тех пор, он жил в пещере, абсолютно отрезанный от человеческого общения. И так, за 17 лет без женщин, превратился бы в древнего и мудрого отшельника, но кто-то слил информацию о его местонахождении, после чего были подняты полицейские. Когда полицейские не справились — были подняты дроны, которые в итоге заметили следы бытового мусора на утесе, по которому и выследили пещеру старца Фура.\nКитайцы представили огромную камеру для поиска лиц в толпе\nКак вы уже могли заметить, китайская система правопорядка очень быстро ставит на вооружение новые технологии (чтобы почитать о звуковой пушке — в \nвосьмой выпуск\n). Камера на 500 мегапикселей \nможет идентифицировать\n лица в 4 раза лучше, чем человеческий глаз. Отличное дополнение к уже функционирующей системе видеонаблюдения на 200 миллионов камер. Утверждается что она может узнавать людей в толпе из нескольких тысяч лиц (группа «Корни» одобряет).\nОхуевает по-китайски\nNASA собирается отправить в космос аппараты на ядерной тяге\nЕстественно, пока \nтолько аппараты\n, а не ракеты целиком. Если ракета на ядерном топливе взорвется на стартовом столе — плохо будет всем. Концепция подобного двигателя не нова, еще в 60-х годах американцы пытались создать первые ядерные установки для полетов на Луну.\nПри этом, все как обычно сначала проходит через бюрократический аппарат (хотя на этот раз важный), NASA необходимо разработать протоколы безопасности по эксплуатации ядерных реакторов в комнате, и лишь потом, в 2024 году пытаться вернуть астронавтов на Луну.\nИлон Маск показал корабль для полета на Луну и Марс\nПока NASA только готовит новый корабль, Илон уже \nпредставил корабль\n для межпланетных полетов и колонизации на стартовой площадке в Техасе. Незатейливо названный «Starship» пока что в стадии прототипа, но должен будет перевозить до 100 человек, плюс груз. Первые тесты пройдут через 2 месяца. Сама конструкция выполнена из блестящей нержавеющей стали. SpaceX утверждают, что это самая мощная ракета в мире.\nУтекшие в сеть фото о новых костюмах для пилотов «Starship»\nХакеры использовали экраны спортивного магазина для транслирования порно\nПод удар с тыла попал флагманский магазин сети Asics в Новой Зеландии. Какие-то веселые ребята глубоко проникли в незащищенную систему магазина, и шалили там на протяжении 9 часов. Если у кого-то встал вопрос — зачем? — скорее всего просто позлить общественность. Источник также приводит одну женщину с ребенком, которая вернулась посмотреть, не обманывают ли её глаза (ага, именно за этим). Магазин уже извинился.\nBonus meme\nПолный разбор source кода игры из Steam. Представьте что вы на уроке по практической анатомии, только без КРОВЬ, КИШКИ, \nРАСПИДОРАСИЛО\n.\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/memovosti-11-site-880x308.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 584\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/EDt4TyyXUAEdk9I.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"457px\" viewBox=\"0 0 457 480\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/XItH2Q47-Ko.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"700px\" viewBox=\"0 0 700 567\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/1569809878177663119.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"512px\" viewBox=\"0 0 512 306\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/unnamed-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1000px\" viewBox=\"0 0 1000 1000\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/a0ba3e139db9.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/experts/from-office-to-freelance/",
                "title": "Как из программиста, работающего в офисе, стать фрилансером — отвечают эксперты",
                "created_date": "1 октября 2019 в 16:50",
                "body": "Некоторым со временем надоедает работать в офисе и у них появляется желание уйти во фриланс. Однако возникает множество вопросов: что нужно уметь делать, как искать и находить заказчиков и не только. О том, как уйти из офиса, мы решили спросить у экспертов.\n Сергей Лавров\n, \nзаведующий кафедрой Информационных Систем и Технологий «Синергии»\nПоделюсь своим опытом фриланса. Я трижды был фрилансером, при этом 2 раза уходил с работы в офисе во фриланс.\nПервый раз фриланс начался параллельно с работой в офисе — знакомые предложили web-проект. Я начал заниматься им параллельно с работой. Потом наступил кризис 2008 года, на работе сократили зарплаты, и я уволился. Ушёл полностью во фриланс. Все проекты находил через знакомых. У меня параллельно было 2–3 проекта. Денег было то много, то не было совсем. Постоянно приходилось напоминать заказчикам, чтобы платили.\nВторой раз параллельно с работой начал изучать разработку под Android и говорить знакомым, что занимаюсь этим. Один из знакомых предложил проект — он готов был заплатить маленькие деньги и взять неопытного человека на разработку. В итоге через 3 месяца выложил своё первое приложение в Google Play. В этом году Google, к сожалению, приложение забанил, т. к. у них поменялась политика конфиденциальности, а приложение как раз собирало конфиденциальные данные — это была основная функция приложения. Но это приложение я всё равно оставил в своём портфолио и всем заказчикам объясняю, почему оно сейчас недоступно.\nВ третий раз я не планировал быть фрилансером. Но в какой-то момент на работе начали сокращать всех руководителей отделов и проектов. Мне пришлось уйти по соглашению сторон. Активно искал новую работу, разместив резюме на hh.ru и отзываясь на все интересные мне вакансии, ходил по собеседованиям. В одной из вакансий было написано, что они ждут оценки их проекта. Я оценил проект, связался с ними — так начался мой новый фриланс-проект. Затем через пару недель в рассылке от знакомых увидел, что ищут разработчика. Я предложил себя, также провёл анализ проекта, подробно расписал, сколько будут стоить мои услуги. Затем встретился с заказчиком — он сбил цену в 2 раза (да, к этому тоже надо быть готовым), и мы начали работать. При этом я сильно сократил перечень работ и у меня появилась универсальная отговорка на любые предложения заказчика, что это не входит в сокращённую вдвое сумму.\nБывали и откровенные провалы по проектам. Например, взялся за стартап и мне сначала пообещали гору денег. Сделал вёрстку, прототип и просил деньги. Заказчик сначала говорил, что пока не может заплатить, что заплатит позже. А потом вообще сказал, что ему нужно сначала полностью запустить этот проект, а потом через несколько месяцев, когда проект будет приносить деньги, он мне заплатит. В итоге мы разошлись с этим заказчиком (потом я узнал, что я был не единственный, кому этот заказчик за работу не заплатил). С тех пор я делаю что-то минимальное для заказчика и прошу аванс. Без аванса дальше не работаю.\nИз бирж я пока пробовал только \nyoudo.com\n — отличное место для мелких подработок. В своё время там заработал 500 рублей за тестирование телефона Samsung, а потом заработал 700 рублей за создание модели данных для какого-то медицинского проекта. При этом потратил около 200 рублей на поиск этих работ. Из крупных проектов участвовал лишь в создании чат-бота, но не успел показать результат (взяли другого человека), хотя для меня это был интересный опыт. Также мне предложили работать в одном web-проекте, но платили очень мало, требовали очень много, и менеджер занимался микроменеджментом, что меня сильно раздражало — в итоге я отказался от этого проекта.\nЧто касается квалификационных тестов на биржах, то тут не могу ничего сказать, т. к. именно на биржах не проходил их. Но если сможете отлично пройти тесты — думаю, это будет огромным плюсом. Например, у меня много дипломов о разных пройденных курсах — они указаны в моём резюме, и это положительно влияет на мнение заказчика обо мне.\nИтого, чтобы начать работать фрилансером без опыта, нужно всем своим знакомым рассказать, чем ты сейчас занимаешься. А лучше ещё во всех соцсетях об этом написать. И постоянно расширять круг общения, чтобы было в окружении как можно больше бизнесменов — они и будут заказчиками. Через какое-то время появятся первые проекты — на это может уйти и полгода. Да, знакомые скорее всего заплатят немного, но это будет отличный опыт для портфолио. И надо уметь общаться с людьми, слушать и слышать их, выяснять их потребности, приносить им пользу, решать их задачи, договариваться. С портфолио можно уже идти на биржи. Можно, конечно, пойти на биржи без портфолио, но тогда вероятность, что выберут именно вас, значительно снижается.\nВ любом случае, желаю читателям успехов во фрилансе! И помните, что постоянно двигаясь в одном направлении, через какое-то время можно многого в нём достичь.\n10\nОтвет эксперта\n2019-10-01T16:50:45+03:00\n\nРейтинг полезности ответа: \n10\nПовысить\nПонизить\nГеоргий Бабаян\n, \nCEO Elbrus Coding Bootcamp\nПервые заказы можно найти на сайте \nfreelancer.ru\n или \nupwork.com\n — самом известном американском сайте для фриланса. Однако без портфолио и отзывов заказчиков получить первых клиентов будет сложно. Выход — самостоятельно сделать 3–4 проекта для демонстрации навыков: создать какое-то простое приложение, to-do list, приложение о погоде. Это поможет заказчику оценить ваш уровень на конкретных примерах. Сертификаты о тестировании тоже могут быть полезны на этом этапе.\nОбязательно расскажите всем своим друзьям о том, что готовы брать проекты. На первых порах может иметь смысл работать за небольшие деньги или бесплатно, чтобы наработать репутацию. Со временем база клиентов будет расти: заработает сарафанное радио, и вы сможете выбирать самые интересные и высокооплачиваемые задачи.\nИз-за недостатка опыта начинающие фрилансеры часто делают одни и те же ошибки. Берутся за чересчур сложные проекты, не задают правильные вопросы заказчику на этапе приёма задачи, неправильно оценивают время. Типичный случай: заказчик просит «сайт для продаж», а в процессе обсуждения выясняется, что нужно мобильное приложение, которое продает стройматериалы, достает данные из 1С и проводит через кассовую систему.\nПонять, как должно выглядеть решение — самая важная и самая сложная часть работы фрилансера. Поэтому я часто не берусь за заказы, в которых у клиента нет чёткого понимания задачи. Будьте готовы к тому, что первый вариант скорее всего будет не тем, что нужно заказчику. Поэтому важно закладывать в план работ частые итерации: сделали скелет, показали, внесли правки, повторили.\nОбязательно спросите про сроки выполнения и возможность сдвига дедлайнов, бюджет проекта, ожидаемое количество пользователей, формат — приложение или сайт, язык интерфейса. Остальное за вас сделает опыт: чем больше вы работаете, тем лучше учитесь оценивать время на выполнение задачи, видите подводные камни и распознаёте сложных клиентов. Программисты нужны всем, поэтому опытный фрилансер обычно имеет стабильный поток интересных заказов, которые к тому же хорошо оплачиваются. \n49\nОтвет эксперта\n2019-10-01T16:50:45+03:00\n\nРейтинг полезности ответа: \n49\nПовысить\nПонизить\nПолина Галинская\n, \nконтент-маркетолог биржи фриланса FL.ru\nПрофессия программиста остаётся всегда востребована на рынке фриланса. В среднем, веб-программисты при ежемесячной занятости фултайм зарабатывают 70 000–80 000 по Москве, 60 000–65 000 — по России.\nИ эти деньги можно увеличивать, если брать больше проектов в работу, масштабировать бизнес до уровня мелкого предпринимателя и расширять команду исполнителей.\nДругими словами, вы видите, что среднюю офисную зарплату можно получать и на фрилансе. Главное, перебороть психологический аспект «потери стабильности». Да, на фрилансе может быть «плавающий» доход. Но если вы инвестируете время, силы и энергию в саморазвитие и практический опыт, эти трудозатраты быстро окупаются.\nСпециальных тестирований или каких-то особых навыков не требуется, потому что на биржах фрилансер не оценивается по количеству полученных сертификатов, пройденных курсов. Более ценным считается портфолио, знаний языков программирования (пусть даже самых простых; заказчик всё равно найдётся), максимально возможные опции для связи.\nПосмотрим на ваш будущий профиль глазами клиента:\nЗаказчик сначала изучает информацию о вас, насколько грамотно, складно всё написано. Очень часто ваше образование не имеет значения, потому что оно даёт очень поверхностное представление о том, справитесь ли вы с поставленной задачей.\nЗаказчику важно портфолио или ссылка на ресурс, где прослеживается ваш опыт и рост в профессиональном плане. Это самая главная часть вашего профайла.\nЗаказчику важны отзывы и рекомендации; их можно получить, если поставить на первые проекты минимальную сумму денег и предложить поработать за отзыв.\nЧто делать, если нет ни одного примера ?\nВ портфолио не обязательно добавлять коммерческие проекты, достаточно ваших наработок для себя, друзей, студенческих работ. Заказчику не важно, когда и при каких обстоятельствах вы выполняли эти задания. Ему нужно понять уровень компетенций, оценить бюджет и выбрать подходящего исполнителя.\nСовет: посмотрите проекты, которые выкладываются на бирже каждый день в категории «программирование» и попробуйте в качестве теста выполнить проект по размещенному ТЗ. Для себя. Если работой довольны, предложите за символические деньги это решение заказчику. Так есть шанс быстрее заполнить профайл практическими примерами, немного заработать и получить хорошие рекомендации.\nНа рынке существует несколько бирж IT и digital-профессий. Самой крупной уже 14 лет подряд остается FL.ru.\nЕщё один вариант — международная фриланс-платформа Upwork. Она подойдёт тем, кто хорошо владеет английским языком, готов работать с иностранными клиентами. И адекватно реагирует на особенности ментальностей заказчиков из разных стран. На Upwork есть система учёта рабочего времени, поэтому заказчик всегда может посмотреть через видео, над каким блоком работ по его заказу вы сейчас трудитесь. На бирже есть уровни фрилансеров, которые зависят от качественно-количественных показателей выполненных работ, времени работы на бирже и других параметров.\nНадеемся, теперь стало понятнее, как работают биржи, и уходить из офиса станет легче. \n18\nОтвет эксперта\n2019-10-01T16:50:45+03:00\n\nРейтинг полезности ответа: \n18\nПовысить\nПонизить\nДайте ещё мнение\nВсё понятно, покажите выводы\nИтак, что нужно делать для переквалификации во фрилансера?\nЗаказчики хотят видеть ваше портфолио и отзывы других заказчиков. Если вы только ступаете на тропу фриланса, то с первым и особенно со вторым могут быть проблемы. Для начала можете придумать себе несколько проектов и реализовать их для демонстрации навыков. Если у вас есть какие-то рабочие или свои проекты, которые вы можете показать — отлично. Главное, чтобы не «Hello world».\nДайте знать вашим знакомым, что вы занимаетесь фрилансом. Возможно, они станут вашими первыми заказчиками или дадут ваши контакты кому-нибудь. Вообще, развивайте круг общения для увеличения количества потенциальных клиентов.\nЕсли по каким-то причинам подобный поиск клиентов вам не подходит, то можете попробовать посмотреть в сторону фриланс-платформ вроде Upwork.\nНаучитесь (если ещё не умеете) общаться с людьми, так как будучи фрилансером вам придётся много этим заниматься. Вам нужно уметь слушать заказчика, выявлять его потребности, объяснять ему, почему его запросы нереализуемы, узнавать сроки и так далее.\nСмиритесь с тем, что жизнь фрилансера скорее всего будет менее стабильной в сравнении с оной при работе в офисе и что вам придётся инвестировать много своего времени и сил, чтобы добиться успеха.\n100500\nЛучший ответ\n2019-10-01T16:50:45+03:00\nTproger.ru\nНапоминаем, что вы можете \nзадать свой вопрос\n экспертам, а мы соберём на него ответы, если он окажется интересным. Вопросы, которые уже задавались, можно найти в списке выпусков \nрубрики\n. Если вы хотите присоединиться к числу экспертов и прислать ответ от вашей компании или лично от вас, то пишите на \nexperts@tproger.ru\n, мы расскажем, как это сделать.\nПуть фрилансера: как правильно начать\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iconfinder-icon-2-cover-icon-1.png",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/88463_f3a0ca2b_9nfZK6Zw_1569250178-e1569684152828-150x150.jpg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/04/8330_b31df6eb_tFww0bDw_1554813416-e1555159775637-150x150.jpeg",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/10/74743_f3dda4c4_lo3hJXSE_1569922626-e1569999462482-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/articles/6-years-in-one-company-abbyy/",
                "title": "6 лет в одной компании: путь от онтоинженера к продакту",
                "created_date": "30 сентября 2019 в 12:45",
                "body": "Егор Будников, продакт-менеджер в ABBYY\nПредставьте, что вы устроились в интересную вам компанию на желаемую позицию. Прошло некоторое время — год, два, а может, больше — вы уже освоили многие навыки, влились в команду, погрузились в специфику бизнеса и, возможно, получили первое повышение. Вам нравится то, чем вы занимаетесь, но вам, вероятно, интересны и другие профессиональные сферы. Как понять, куда можно расти дальше? Какие доступные варианты такого роста могут быть в IT-компании?\nУже более 6 лет я работаю в одной и той же компании. Многим такой срок сегодня может показаться очень долгим, и я бы хотел поделиться своей историей, чтобы доказать, что, даже развиваясь в одном и том же месте на протяжении долгого времени, вы можете постоянно расти. И далеко не всегда этот рост должен быть вертикальным.\nМой путь в ABBYY начался, когда я учился на 5 курсе МФТИ и думал, чем хочу заниматься. Я увлекался математикой и задачами по построению искусственного интеллекта, но при этом мне всегда было интересно, как устроены естественные языки и как можно научить машину понимать их. Поэтому в какой-то момент я заинтересовался компьютерной лингвистикой. ABBYY — мировой разработчик решений в области интеллектуальной обработки информации и лингвистики. Я принял участие в Дне открытых дверей ABBYY в МФТИ, решил за 2 часа несколько задач, и меня пригласили на вакансию онтоинженера.\nРабота онтоинженером\nРабота онтоинженера интересна тем, что она проектная и очень прикладная. Есть конкретная задача, которую нужно решить с помощью доступных технологий. Я начал работать в учебной группе: три месяца обучался, сдавал специальные экзамены по семантике, синтаксису и онтоинженерии. В информатике онтология — это попытка формализовать определённую область знаний. Онтоинженерия — это проектирование предметной области с помощью онтологий, описание структуры базы знаний, а также программирование на продукционном языке, который сконструировали в ABBYY. С помощью него описывается, как базы знаний должны наполняться из текстов. Наш отдел рос, задачи усложнялись, появлялось всё больше аналитических вопросов. В результате в департаменте обработки естественного языка (NLP) стали необходимы системные аналитики. Я на тот момент постоянно предлагал группе программистов что-то улучшить, упростить, сделать удобнее, автоматизировать тестирование. В итоге мне предложили роль системного аналитика — для меня это был горизонтальный рост. Я согласился, так как всё ещё искал себя (и сейчас ищу, на самом деле), и роль системного аналитика показалась мне перспективной. Мне казалось, что в качестве онтоинженера я уже сильно вырос: я участвовал во всё более сложных проектах с другими онтоинженерами, которые мне помогали. Пример такого проекта: технология для компании нефтегазового сектора, которая оптимизировала анализ отчётности со своих участков по всей стране. Каждый день в аналитический центр компании в Москве приходили сводки, которые анализировали несколько десятков человек. Я описывал онтологическую модель, с помощью которой технология извлекала из сводок нужную информацию.\nNLP: как стать специалистом по обработке естественного языка\ntproger.ru\nНекоторые онтоинженеры у нас работают на этой позиции дольше и делают очень сложные проекты. К примеру, создают модели на машинном обучении, которые потом дообучаются на стороне клиента уже в продукте. Некоторые становятся тимлидами и руководят начинающими онтоинженерами. Другие, кому, как мне, интересны разные области, становятся системными аналитиками или программистами и занимаются разработкой. Программируют они уже не на продукционном языке, а на C++ или Python.\nРабота системным аналитиком\nИтак, я стал системным аналитиком, эта роль действительно оказалась полезной для компании. Анализ и приёмка требований от внутренних заказчиков сконцентрировались в руках у одного человека и формулировались более чётко. Кто мог быть внутренним заказчиком? В самом простом случае это онтоинженеры, кроме них есть разметчики, которые занимаются разметкой корпусов для машинного обучения. Эти корпуса помогают создавать технологии, которые решают конкретные задачи для клиентов. Почти в каждой компании есть ручной труд, который можно автоматизировать, и наши технологии распознавания и извлечения информации могут в этом помочь. Моя же задача была сделать жизнь онтоинженера проще, чтобы технологии были на высоком уровне и справлялись с разными сложными ситуациями, и для того, чтобы это всё было удобно в использовании.\nРоль системного аналитика была своего рода экспериментальная, поэтому в какой-то момент моя работа всё больше становилась похожа на работу продакт-оунера или продакт-менеджера, только с внутренними заказчиками. Так я стал продакт-менеджером в отделе обработки естественного языка департамента исследований и разработок. Чем отличается должность продакт-менеджера в технологическом департаменте от продуктового? В продуктовом департаменте общаются с внешними потребителями, а в технологическом — с внутренними. Это могут быть менеджеры продуктовых департаментов или внутренние пользователи, которые занимаются проектной деятельностью для внешних заказчиков (онтоинженеры). В то же время у меня оставались задачи системного аналитика. Я формулировал для программистов требования бизнеса, которые мне передавал продуктовый департамент. В мои обязанности также входило обсуждение этих требований и формулирование конкретных технических требований для группы разработки в технологическом департаменте. Если ты, будучи аналитиком или продакт-менеджером, умеешь программировать, тебе будет гораздо проще. Это даст понимание того, чем занимаются программисты, а также как декомпозировать и измерить задачу.\nРабота продакт-менеджером\nСпустя год моя роль снова поменялась. Сейчас я продакт-менеджер, но уже отвечаю за продукт, точнее его отдельную часть, связанную с NLP. Это ещё одна новая роль для меня, в которой я продолжаю находиться внутри большой команды, глобально ответственной за одно направление, но теперь я ближе к маркетингу и заказчикам. Моя задача — создание продукта для внешнего пользователя. Так как я отвечаю не за отдельный продукт, а за компонент (у общего продукта есть директор), одна из задач — сделать так, чтобы продакт-менеджеры всех отдельных компонентов примерно одинаково понимали то, как должен развиваться продукт. Нужно делать так, чтобы компоненты подходили друг другу, развитие было согласовано, тестирование осуществлялось правильным образом. Сложно сказать, вертикальный это рост или горизонтальный. Эта позиция предполагает большую ответственность. Это усложнение и углубление моей роли в более продуктовом ключе. К тому же в работе я теперь активно использую английский язык как для чтения, так и для коммуникации с зарубежными коллегами. Иногда на это уходит до 50% рабочего дня.\nПро горизонтальный рост\nВ первые месяцы на новых позициях всегда тяжело, так как новой информации очень много, но такие вызовы меня мотивируют. При моих перемещениях значительная часть бэкграунда, задач и команды оставалась той же, поэтому рост был очень эволюционным. В случае продакт-менеджмента рост вообще довольно интересный. У вас формально никогда не бывает подчинённых. Продакт- и проджект-менеджер растёт, делая всё более сложные проекты и продукты, которые помогают большему количеству людей или компаний, содержат более сложные фичи.\nТак складывалось, что новые роли и задачи мне предлагали, и я ни разу не пожалел о том, что принял предложение. Изначально я искал работу, на которой мне будет интересно и где я буду чувствовать, что я в команде делаю технологию, которая в какой-то степени изменит мир. Для меня очень важно ощущать, что я часть команды, которая способствует технологическому прогрессу. С другой стороны, помогать решать эту задачу можно на очень разных позициях.\nКак понять, куда расти дальше, если нет желания и/или возможности развиваться вертикально?\nВо-первых, важна квалификация. Очевидно, чтобы программировать на C++, надо знать C++ и ещё много чего. Но дело не только в hard skills. Чтобы работа на новой позиции приносила радость, важно учесть три момента:\nКакой \nбольшой красивой задачей\n вы хотите заниматься? Это может быть план на десятилетие. В моём случае это развитие искусственного интеллекта, в частности компьютерной лингвистики. Вы, может быть, хотите отправить человека на Марс (почему нет?). Подумайте о том, что вас увлекает, и сконцентрируйтесь на этом.\nЗатем нужно подумать, чем именно вы хотите \nнаполнять свой рабочий день\n. Вы хотите взаимодействовать с людьми? Или хотите только программировать? Вам интереснее программирование, аналитика, тестирование или что-то ещё? Задачи для людей с одними и теми же hard skills, но разным темпераментом могут сильно отличаться.\nНаконец, важно учесть \nскорость, с которой происходят события\n на работе. Подумайте, насколько быстро вам надоедает та или иная тема и насколько быстро хочется сменить деятельность. Если время идёт для вас слишком быстро, следует искать позиции, на которых в день будет не десять задач, а две. Если хочется, чтобы всё сменялось быстро, тоже ищите что-то другое. Это очень зависит от отдела и позиции: например, работая в исследовательском департаменте, вы занимаетесь вещами, которыми никто прежде не занимался. От того момента, когда вы решили что-то попробовать, до момента, когда у вас что-то получилось, может пройти очень большое количество времени. Другой полюс — это, например, sales-инженеры, которые из продукта или нескольких продуктов запрограммируют решения. То, что они делают сейчас, через час уже может попасть к клиенту.\nЕсли говорить про мой опыт, онтоинженер в плане скорости событий где-то посередине. У аналитика всё идёт быстрее. Роль продакт-менеджера предполагает ещё более быструю смену событий и довольно высокий уровень абстракции, но при этом вы должны быть погружены в специфику задач разработчиков, с которыми вы регулярно взаимодействуете. Чем более стратегическая и абстрактная у вас позиция, тем быстрее ваши задачи сменяют друг друга. Опираясь на это правило, вы сможете понять, в каком направлении вам стоит развиваться в карьере в IT.\nНе смешно? А здесь смешно: \n@ithumor\nДля мотивации\n, \nКарьера\nТакже рекомендуем:\nПочему программисты снова становятся инженерами — вице-президент Parallels рассказал об окончании «эры айтишников»\nПрограмма минимум: что должен знать начинающий C# программист\nДостаточно ли вы умны, чтобы работать в IT?\nКак в IT-компаниях смотрят на программистов без диплома при приёме на работу?",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iconfinder_011_042_man_guy_user_human_avatar_beard_2514891-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/Egor-Budnikov-e1569757307503-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/devnull/memovosti-10/",
                "title": "Мемовости #10",
                "created_date": "28 сентября 2019 в 20:20",
                "body": "Facebook создает виртуальную соцсеть\nКомпания, которая не может удержать свои данные, \nсоздает виртуальный мир\n «Horizon», в котором пользователи смогут чатиться и играть в игры друг против друга. На бета-версию уже можно записаться.\nНесколько нюансов. Во-первых, из-за этого она закрывает свои проекты Facebook Spaces и Oculus Rooms (кто-то о них вообще слышал?). Во-вторых, графика там заточена под их собственный Facebook’s Oculus Quest хедсет, который не то чтобы сильно графонистый, поэтому все будет в мультяшно-полигональном стиле. В-третьих, пользователи смогут настраивать свое окружение и аватары. Почему это нюанс? У них \nнет ног\n.\n«Мистер Андерсон, мы все про вас знаем, вам от нас не скрыться!»\nДень рождения Google\n27 сентября спасителю всех незнаек \nисполнился\n 21 годик! Это значит что где-то сейчас он переживает свой первый экзистенциальный кризис, думает о том, тем ли он занимается и начинает активно искать работу. Можешь поздравить его, вспомнив все пасхалки на его главной страничке. Главное делать это на правильном Гугле (в 2009 году белорусы пытались его \nзакиберсквоттить\n).\nГугл \nзаботится\n о своих пользователях\nGoogle создал коллекцию deepfake видео\nКстати о деятельности именинника. Google собрал большой набор поддельных видео, но не затем, зачем ты подумал, а чтобы бороться с ними. База \nсодержит\n 3000 образцов deepfake видеоматериала. По идее, это позволит борцунам с подобным видеоконтентом лучше тренировать свои борцуновские контр-программы. Если хочешь прочитать про недавние использования deepfake —прошу в \nвосьмой выпуск\n.\nСеверная Корея выпустила новый смартфон\nНа 15-й Пхеньянской международной (на самом деле, немного русских и куча азиатов) выставке товаров, \nбыл представлен\n новый смартфон с почти поэтичным названием «Пхурын ханыль» («Голубое небо»). Купить его могут только те, кто живут в Северной Корее. Ценничек на сей девайс стоит размером в 290 $, что даже не каждому северокорейскому обеспеченному гражданину под силу. И да простит меня Ким Ир Сен, что я написал долларовый эквивалент.\nНа нем установлен какой-то специальный коммунистический Android, присутствует система распознавания лица и сканер отпечатка пальца. Иностранцы его не могут купить из-за того, что телефон закрепляется за владельцем по паспорту. Слава \nАрстоцке\n Чучхе!\nСалон сотовой связи в Северной Корее\niPhone может получить новый-старый дизайн\nУ дизайнеров Apple кончилось место на их телефоне, куда еще можно добавить стекло, поэтому они вспомнили свои корни и скорее всего вернут на него крупную металлическую рамку из четвертой модели выжимателя денег. Но это не точно, это \nпредполагают\n какие-то там эксперты.\nКонференция PgConf.Russia 2020\n3–5 февраля, Москва, 11 000–25 000 ₽\ntproger.ru\nСобытия и курсы на tproger.ru\nА еще про него говорят, что он будет поддерживать 5G. Ну, а то что он будет стоить дохрена с небольшим, это мы и так знаем.\niPhone 12 Russian Edition\nBonus meme\nНемножко крипоты. Пермский разработчик Prombot \nоткрыл продажу\n роботов с человеческой внешностью для частного и корпоративного пользования. Корпоративный отличается тем, что его превратили в телепузика, установив экран на стандартную модель. Один робот обойдется в 3 миллиона рублей. С ним можно… говорить… наверное. Ребята явно забыли об эффекте \nЗловещей долины\n. Можешь попробовать с ним выпить, чтобы потом никогда не пить.\nВ выпуске использованы изображения: \nFacebook Horizon, Facebook Technologies, LLC. \nКадр из фильма «The Matrix», 1999 г. \nАрт на игру «Papers, please!». \niPhone 11, Apple. \nРобот Robo C, компания Prombot. \nWalt Disney Productions. \nYouTube-канал TheFakening. \nYouTube-канал CNBC.\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/memovosti-10-cover-880x308.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"807px\" viewBox=\"0 0 807 787\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/UrC4rPW-1So.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"807px\" viewBox=\"0 0 807 409\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iH0iuN77ii0.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"604px\" viewBox=\"0 0 604 481\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/abiB63VxyUU.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"807px\" viewBox=\"0 0 807 424\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/FXGRea0rdE0.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"807px\" viewBox=\"0 0 807 724\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/rjI3LF7AkhY.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/digest/digest-of-tech-startups/",
                "title": "Молекулярная очистка воздуха, кошелёк с GPS и AR-зеркало — подборка интересных и технологичных стартапов",
                "created_date": "28 сентября 2019 в 15:43",
                "body": "С каждым днём создаётся всё больше по-настоящему интересных стартапов. Самое главное в них — предложить потребителю то, чего пока ещё нет на рынке. Знаете ли вы, что такие компании-гиганты как Xiaomi, Space-X, Uber тоже когда-то были обычными стартапами? Однако те смогли вовремя занять свою нишу на рынке и правильно подать себя — теперь они мировые компании, название которых у каждого на слуху.\nВ сегодняшней подборке расскажем о некоторых технологичных стартапах и о том, какие на их пути стояли трудности. На их примере можно понять, на какие вещи стоит акцентировать внимание при создании и развитии собственного стартапа.\nSmarsy — зеркало с дополненной реальностью\nКосметические бренды тратят до 50 % средств на маркетинг. При этом они редко получают достаточно обратной связи — не всегда ясно, что конкретно не устраивает их покупателей и откуда идёт поток. Разработчики Smarsy решили эту проблему.\nSmarsy — умное зеркало, которое поможет «примерять» косметику на лице, даже не используя её. Получается это благодаря дополненной реальности — макияж наносится на лицо прямо как фильтры в Instagram. Например, покупатель может выбрать конкретный цвет помады просто ткнув по нужному оттенку на самом зеркале.\nКроме упрощения подбора косметики, такое зеркало положительно сказывается на гигиене своих покупателей. Исследования показывают, что в большинстве стандартных тестеров есть бактерии и вирусы, а подобрать нужный цвет без нанесения продукта бывает сложно.\nЕщё компания предоставляет возможность отслеживать эмоции покупателей. В таком случае магазин получает данные об заинтересованности и удовлетворенности клиентов. Помимо этого, в зеркале есть голосовой помощник, которые повышает вовлечённость и играет роль консультанта. Тут даже есть система допродаж, основанная на ИИ.\nВ начале 2019 года проект стал резидентом «Сколково» в IT-кластере.\nHuman+ — контроль производства на предприятии\nОснователь проекта Human+, Павел Матвеев, вспоминает: «Несколько лет назад я работал в сети складов, которая открывала точки по всей России — отвечал за несколько параллельно строящихся объектов. Каждый день головной болью было понять, вышла ли группа на площадку, и если да, то сколько людей работает, а сколько просто курит. Звонишь подрядчику: он утверждает, что работа идёт, а потом выясняется, что на стройке никого не было, задачи не выполнены. На стройках, тем более небольших, такое случается постоянно — это потеря времени и денег.»\nНаверное, именно по этой причине Павлу пришла в голову идея начать каким-то образом контролировать и анализировать процесс производства. Поначалу это было простой системой управления персоналом, но под конец разработчики решили углубиться в сторону «железа».\nВыбор пал на носимые устройства. К примеру, их можно было встраивать в каски. Устройства передавали данные о занятости рабочих, что делало процесс производства намного «прозрачней». К примеру, если на производстве происходит ЧП, то компания, зная местоположение работников, может продумать, как лучше всех оповестить, вывести в безопасную зону и где искать пострадавших (особенно актуально на горнопромышленном производстве).\nНа текущий момент Human+ планируется переходить из мелкосерийного и пилотного производства к промышленному. Но не всё так сразу гладко вышло — в начале своего пути стартаперы столкнулись с рядом проблем.\nОдна из них — универсальность. У каждого клиента отличались и требования, и технические оснащения. Те каски, которые отлично подходили одним, для других были совершенно не приемлемы. Чтобы справиться с этой проблемой, было решено разрабатывать широкий спектр устройств, которые можно будет быстро трансформировать под требования конкретного клиента.\nИнтересные проекты: игры в графике активности GitHub\ntproger.ru\nIRWAY — автомобильная система ночного видения\nПо статистике, риск ДТП в тёмное время суток в 2–6 раза выше, чем в светлое. При встречных разъездах и в населённых пунктах нужно ездить с ближним светом, а это очень ограничивает водителю видимость.\nIRWAY — система ночного видения для автомобилей, которая проецирует цветное изображение на лобовое стекло. Это никак не ухудшает видимость, потому что изображение оказывается под салонным зеркалом заднего вида. Стартап уже продал и успешно установил около 500 комплектов и подписал план сотрудничества с «КАМАЗом».\nКомпания планирует развивать работу с беспилотными автомобилями. Руководитель проекта считает, что помимо детальных карт местности беспилотникам нужен качественный видеосигнал. Ведь имеющиеся на текущий момент средства ночного видения не так уж и полезны. Тепловизоры имеют низкую детализацию и «не видят» объекты с температурой окружающей среды, а ИК-камеры «слепнут» от встречных фар. Решение IRWAY лишено этих недостатков.\nПо заявлению самих IRWAY, на данный момент не существует альтернативы их системе по частоте обновления, разрешению, дальности видимости и работе со встречным светом. На данный момент систему ночного видения можно установить на некоторые автомобили премиум-класса как заводскую опцию.\nMolekule — очистка воздуха на молекулярном уровне\nMolekule — это устройство, очищающее воздух в помещениях фото-электрохимическим окислением (англ. PECO) на молекулярном уровне. Такая технология способна уничтожать загрязняющие вещества, размер которых в 1000 раз меньше тех, которые пропускают традиционные фильтры HEPA. При этом устройство имеет почти 100-процентную эффективность.\nРаботает устройство следующим образом. Воздух заходит в нижнюю часть девайса и поступает в фильтр предварительной очистки. В нём происходит очистка воздуха от больших частиц, которые являются аллергенами: пыльца и перхоть. Следующим на пути попадается нано-фильтр, где остальная часть загрязняющих веществ разрушается на молекулярном уровне. После этого наружу выходит абсолютно чистый воздух.\nИз явных плюсов тут то, что несмотря на всю сложную технологию, устройство достаточно тихое. Из-за того, что воздух всасывается по окружности, пропускная способность такого очистителя велика. Всего за час Molekule может дважды полностью очистить воздух в помещении площадью 55 м². Стоит ли говорить, что внешне устройство соответствует современным тенденциям — минималистичный корпус с долей футуризма.\nКак и все современные гаджеты, к Molekule можно подключиться по Wi-Fi и управлять им дистанционно. Специальное приложение проинформирует вас, когда настанет пора менять очищающие фильтры.\nDiamond Foundry — выращивание алмазов. Буквально.\nЕщё несколько десятилетий назад учёные додумались выращивать алмазы в лабораториях. Обычно те использовались в технических целях. Но только в 2013 Мартину Рошайсену пришло в голову использовать такую технологию для создания ювелирных изделий. Будущая компания Diamond Foundry смогла собрать $100 млн. и планирует занять лидирующую позицию в алмазной отрасли.\nВ 2016 году общий объём выращенных алмазов компании составил 10 000 карат, а выручка удваивается ежегодно. Владельцы компании вспоминают: «Мы думали, что технологическая часть бизнеса окажется самой простой. Но нам потребовалось 30 инженеров, три года и десятки тысяч пробных моделей плазменных реакторов, чтобы всё наконец заработало как надо. Нам пришлось вложить в стартап десятки миллионов долларов, прежде чем мы получили свой первый алмаз».\nВся суть заключается в плазменном реакторе. Он использует метод химического осаждения из газовой среды, позволяющий выращивать алмазную решетку атом за атомом.\nДоведя технологию до совершенства, компания задумалась о дизайне и продажах. Сначала стартаперы попробовали сотрудничать с ювелирными мастерами онлайн, однако вскоре поняли, что проще обзавестись личной командой. Стартаперы приобрели компанию «Vrai & Oro». К тому моменту она уже завоевала огромную популярность в соцсетях. Лидер компании, Ванесса Стоуфенмахер и её команда из 20 человек перешли в Diamond Foundry.\nVolterman — умные кошельки\n«Я не супермен, просто у меня Volterman»\nКошелёк Volterman сочетает в себе качество, изящность и технологичность. Это проект был запущен на платформе Indiegogo и уже собрал $900 тыс. Это 1975 % от изначально требуемой на начало производства суммы. Естественно, это не просто так.\nВо-первых, в кошелёк встроен GPS-трекер. Если вы потеряли его или же вас обокрали, то вы всегда сможете отследить его местоположение. Более того, ваш смартфон со специальным приложением предупредит вас, если расстояние от него до кошелька стало слишком большим.\nВо-вторых, в кошельке есть миниатюрная фотокамера, которая автоматически отсылает на телефон фото вора.\nВ-третьих: кошелек может раздавать Wi-Fi, так что вы никогда не останетесь без соединения в неподходящем месте.\nКроме того, сам кошелек имеет ёмкость батареи 2000 или 5000 mAh. С его помощью можно можно подзарядить телефон по проводу и без него. Сам кошелёк имеет защиту от RFID-считывателей карт.\nПри этом, несмотря на всю технологичность, Volterman остаётся максимально компактным и стильным аксессуаром.\nИнтересные проекты: аналог Wolfenstein 3D в терминале\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nИнтересные проекты\nТакже рекомендуем:\nИнтересные проекты: пробрасываем трафик через Telegram\nИнтересные проекты: математическая C-библиотека для разработки видеоигр\nПроект MATHC — коллекция объектов для разработки 2D- и 3D- игр. \nИнтересные проекты: рендеринг изображений ASCII-символами\nИнтересные проекты: бесплатная записная книжка с открытым исходным кодом Joplin\nОбзор бесплатного проекта с открытым исходным кодом для ведения заметок Joplin. ",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iconfinder-icon-3-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"916px\" viewBox=\"0 0 916 724\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/573619e8-386a-49d9-808c-3a43faa207de.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"670px\" viewBox=\"0 0 670 500\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/Human.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1557px\" viewBox=\"0 0 1557 1080\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/1-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1440px\" viewBox=\"0 0 1440 810\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/Molekule_FreshersMag_00-1440x810.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1280px\" viewBox=\"0 0 1280 720\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/maxresdefault-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1400px\" viewBox=\"0 0 1400 934\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/5afe1654437015.595b9bb6bf4f2.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/blogs/improve-soft-skills-in-7-days/",
                "title": "Soft Wars: прокачиваем soft skills за 7 дней",
                "created_date": "27 сентября 2019 в 16:27",
                "body": "Камилла Шин, PR-директор в Selectel\nТо чувство, когда все вокруг твердят об эмоциональном интеллекте, а вы до сих пор не в теме. Когда сосед за чашкой кофе договорился о повышении, а вы всё ещё в аутсайдерах. Когда в выходные коллеги собираются покорять вместе Эверест, а вы так и не получили приглашение. Знайте, похоже, у ребят сильные soft skills (англ. гибкие навыки). Это всё, не связанное с профессиональными требованиями к вам-программисту, но тесно связанное с вами-человеком: общение, эмпатия, активность в коллективе и даже приевшаяся креативность. Soft skills держат не только обычный мир, но всю IT-вселенную. Специально для вас мы собрали пошаговый курс бойца — Soft Wars. Это недельный челлендж, в котором вы каждый день будете выполнять задание для развития разных качеств. За неделю вы лучше поймёте свои слабые стороны, прокачаете важные навыки, научитесь слышать и слушать и станете \nгероем\n лучшей версией себя.\nИтак, начнём действовать.\nПонедельник с чистого кода\nСпросите коллег, с которыми работаете в одной команде и которым доверяете, о своих слабых сторонах. Объясните, почему для вас это важно. Пусть они знают, вы исследуете свои «гибкие» навыки. Будьте беспристрастными и слушайте внимательно, не перебивая. Соберите всю информацию и внимательно проанализируйте.\nЕсли вы получили несколько общих ответов, уточните и разберите всё по деталям. Коллеги называют вас импульсивным и несдержанным? Узнайте у них конкретнее, в чём это проявляется и что их конкретно не устраивает.\nВ идеале к концу дня получится список слабопрокаченных навыков. Его можно брать за основу.\nПрочитать по теме: \nHBR Guide. Эмоциональный интеллект\nВторник для self-менеджмента и против стресса\nВо вторник заведите чек-лист или дневник, где будете фиксировать всё, что раздражает, вызывает сильные негативные эмоции, доводит до стрессового состояния.\nПотратив час после работы, проанализируйте написанное. Напротив каждого фактора запишите, что можно сделать/поменять/делегировать уже завтра. Американская ассоциация психологов \nназывает\n основными источниками стресса чрезмерную загруженность, низкую оплату труда, неоднозначные требования, неясные ожидания. Скорее всего, эти факторы влияют и на вас. Не волнуйтесь, всё поправимо.\nПосле определения неизбежных стрессовых точек придумайте здоровую реакцию на них: например сделать физическое упражнение, асану из йоги, пройтись. «Расшатанный» чрезмерной нагрузкой, лишней информацией, доступностью социальных сетей, бессонными ночами организм легче поддаётся стрессу. Ваша главная задача — создать здоровые условия для себя. Оберегайте себя от информационной передозировки, установите границы личной жизни и работы, введите цифровые диеты, отключитесь от всех видов связи в выходные.\nПрочитать по теме: \nEQ. Эмоциональный интеллект на практике\n,\nStress literally shrinks your brain (7 ways to reserve this effect)\nСреда для общения и развития коммуникативных навыков\nКоммуникации — это всё: от умения слушать, поддерживать диалог до публичных выступления и нетворкинга в команде. Мы провели исследование среди программистов Selectel на предмет важности и влияния soft skills на их ежедневный труд. Абсолютное большинство назвало самым главным в работе «умение слушать и давать обратную связь».\nПостарайтесь в этот день максимально много общаться. Высказывайте своё мнение, не скрывайте новые идеи, аргументированно отстаивайте свою позицию. Помогите решить проблему коллеге. Побеседуйте с тем парнем в странном мерче, с которым никогда не говорили раньше.\nПри личном общении попробуйте применить \nправила\n серийной предпринимательницы Дип Патель:\nустановите зрительный контакт с собеседником и не вращайте головой как китайский болванчик;\nэкспериментируйте и практикуйте перед зеркалом, гримасничайте, расскажите самому себе о проблемах в проекте или в коде;\nследите и контролируйте язык тела: не чешитесь, не стучите головой об стенку или пальцами по столу;\nактивно слушайте речь собеседника, задавайте вопросы и будьте открыты к диалогу.\nПочитать по теме: \nЯзык телодвижений. Как читать мысли окружающих по их жестам\nЧетверг: don’t work hard, work smart\nСегодня вы скажете «нет» пожирателям времени и расставите приоритеты. Утром возьмите лист бумаги и составьте план задач на день. Постарайтесь быть объективны, не пишите больше семи блоков, выберите только срочные и важные дела. Записывайте и отмечайте там же в листе каждое отвлечение: переписка в Facebook, светские беседы за кофе, выполнение сторонних задач не из списка — записывайте всё. В конце дня проведите анализ. Уверяем, что открывшаяся картина вас удивит.\nПрочитать по теме: \n7 привычек высокоэффективных программистов\nПятничная эмпатия\nЭмпатия — это понимание чувств и переживаний через сопереживание. Британские учёные поговаривают: склонность к эмпатии заложена генетически. Но в этот раз мы им не поверим.\nРазберёмся, зачем вам становиться эмпатом. Открытый и эмоциональный человек легко найдёт общий \nязык\n код с любым homo technicus, обрастёт связями и контактами. Сопереживание — ключ к пониманию мотивов и логики. Эмпаты реже конфликтуют, потому что видят и чувствуют страхи других, а значит, легче шагают вперёд по карьерной горе.\nТренер, автор книг про отношения Эндрю Собель даёт \nрекомендации\n по развитию сопереживания. В переработанном виде рекомендуем применить их в пятницу:\nВыберите новый маршрут на работу, пообедайте в новом кафе, не бойтесь выходить из обычной среды. Свежие впечатления = свежие эмоции.\nПроявляйте любопытство и задавайте как можно больше вопросов каждому, кто вам интересен: охраннику, секретарю, молодому специалисту, клиенту. Интересуйтесь их опытом и жизнью.\nСобель предлагает пережить чужой опыт в прямом смысле. Если не боитесь, то поменяйтесь на день обувью со своим коллегой. Вечером расскажите друг другу о впечатлениях.\nИспытайте себя. Например посетите урок игры на гитаре или порисуйте акварелью с бокалом вина вечером после работы. Начните учить SQL или Java. Новый опыт и знания — это смирение, а смирение — маленький шажок к сопереживанию.\nВыберите для выходного чтения художественную книгу, следите за чувствами и эмоциями героев. В эти выходные мы читаем \nА. Сальникова «Опосредованно»\n и вам рекомендуем.\nПочитать по теме: \nHow to improve soft skills\nКомандный субботний завтрак\nПо неофициальной статистике, примерно треть программистов мечтают научиться работать в команде. Потратьте эту субботу на совместный завтрак с коллегами. Соберитесь в уютном кафе в центре города, поболтайте, попробуйте необычную кухню или новые сорта кофе. Может быть, кофе с морской солью и карамелью. Потратьте время на осознанное общение друг с другом. Основа качественной работы в команде — хорошие и дружественные отношения и взаимопонимание.\nВоскресные итоги\nНу что, герой, воскресенье и время подвести итоги.\nПоследний совет: помните, что ваш успех зависит от вашей уверенности в себе. Поэтому посвятите этот день вере в себя и позитивному мышлению.\nНа этой неделе вы поучаствовали в маленьком приключении и сделали ещё один шаг к тому, чтобы познакомиться с самим собой. Вы стали отзывчивее, общительнее, душевнее. Вы не боитесь высказывать своё мнение, советуетесь с коллегами. Среди сотрудников компании у вас, возможно, уже появились новые друзья. Теперь у вас есть набор инструментов, которые помогут изменить вашу жизнь!\nВы стали настоящим hero of Soft Wars. Поздравляем!\nНе смешно? А здесь смешно: \n@ithumor\nСоветы\nТакже рекомендуем:\nАдаптивная верстка: что это и как использовать\nПрограмма минимум: что должен знать начинающий C# программист\n9 полезных советов для тех, кто начинает знакомство с React.js\nКак быстро понять, куда не стоит устраиваться на работу — отвечают эксперты",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iconfinder_cc16-f_1585784-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/Kamilla-Shin_PR_direktor-e1569578132313-150x150.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/devnull/memovosti-9/",
                "title": "Мемовости #9",
                "created_date": "26 сентября 2019 в 22:03",
                "body": "Илон Маск пообещал новую батарейку к Тесле\nВ прошлом апреле Маск сказал, что Тесла сможет проехать 1 миллион миль на протяжении срока эксплуатации батареи. И так получается, что вроде и \nскоро сможет\n. Похимичив (в прямом смысле) с наполнением предыдущих моделей батарей, у исследователей получилось продлить срок их работы вдвое. Это необходимо для разрабатываемых Теслой электрогрузовиков и роботакси. Ну что же, уничтожать кожаных мешков — это весьма энергозатратно.\n«Мы купим Теслу и будем заряжать её от дизеля»\nBoston Dynamics начали продавать своих роботов\nНет, \nробота-паркурщика\n Атласа они пока не продают. А робособаку Спота они \nмогут продать\n компании, которая заполнит форму на их сайте, так что непосредственно для себя купить его нельзя. Цена пока не раскрывается. Также компания открыто заявляет, что она против использования Спота в военных целях (он же хороший мальчик).\nЧто этот робопёс умеет? Работать до 90 минут, проходить по неравномерной поверхности со скоростью до 5.76 км/ч, нести с собой разные полезные модули до 14 кг. Я сказал ПОЛЕЗНЫЕ модули, так что твою ленивую жеппу отнести на кухню он не сможет.\nЕсли что, это первая реклама для робота в истории:\nЗачем кому-то может понадобиться робопёс? Его можно посылать в опасные для человека места. Если твой батя опять готовит адовые блюда, и ты уже наблюдаешь отклеивание обоев рядом с кухней — ставь на Спота газоанализатор и отправляй мониторить загрязнение атмосферы.\nКрупнейшая ветряная электростанция скоро запустится в Британии\nНа восточном побережье Англии к 2020 \nпоявится\n самая большая ветряная электростанция, способная обеспечить энергией миллион домов. 174 (пока работают только 50) турбины по 7 мегаватт каждая. Высота установки ротора — 100 метров. Длина лопасти — 75 метров. Чтобы вы понимали, памятник «Родина-мать зовет» — 85 метров. Один оборот турбины способен предоставить дневной объем энергии одному дому. И они еще хотят построить дополнительно 2 такие электростанции.\nКонференция Lead/Manage IT\n7 февраля, Минск, 160–220 br\ntproger.ru\nСобытия и курсы на tproger.ru\nВозможно, это хитрый план королевы Елизаветы, как сделать так, чтобы ветер не сдувал ее бутерброды, когда она пьет чай на балконе Букингемского дворца. Или чтобы Грета Тунберг успокоилась хоть на чуть-чуть. Девочке хоть немного надо отдыхать от переживаний за судьбу человечества.\nHuawei выпустили телефон с самой лучшей (на данный момент) камерой\nЕсли хочешь лучшее качество съемки — добавь больше камер. У нового Huawei Mate 30 Pro их \nаж 4 штуки\n, каждая отвечает за свое. Этот многоглазый монстр может снимать \nодежду с девушек\n, слоу-мо видео в HD с 7680 кадрами в секунду, 4K таймлапсы и прочее.\nОднако не спеши покупать сей убердевайс, сервисов Google на нем нет из-за санкций, и непонятно, появятся ли.\nТипичный пользователь Mate 30 Pro\nAlexa получила голос Сэмюэля Л. Джексона\n— ENGLISH, MOTHERFUCKER, DO YOU SPEAK IT?\n— Черт, я забыл, что Алекса не поддерживает русский\nУмная колонка Amazon Echo получила озвучку от нашего любимого гангстера. Или джедая-магистра. Или руководителя супергероев. Или…, да все знают Сэмюэля, мать его, Джексона. Ну так вот, он \nпредоставил свой голос\n для встроенного помощника Alexa. Не знаю, сподвигли ли его \nмемные видосы\n, или у него кончились деньги после последнего фильма Марвел, но факт остается фактом.\nBonus meme\nВ Калифорнии, возле офиса SpaceX, \nпоявился билборд\n с надписью «Kak tebe takoe, Elon Musk?».\nТак администрация Краснодарского края попыталась пригласить Илона Маска на свой бизнес-форум. QR код на билборде ведет к видео, на котором российские предприниматели исполняют пригласительную песню на мотив «Крылатые качели». Ребята отбитые оптимисты. Илон в долгу не остался, и ответил в своем Твиттере:\nязык хорошо подвешен\n— Elon Musk (@elonmusk) \nSeptember 25, 2019\nНе смешно? А здесь смешно: \n@ithumor",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/memovosti-9-cover-880x308.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"570px\" viewBox=\"0 0 570 320\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/1536033351153570496.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"900px\" viewBox=\"0 0 900 900\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/greta.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"457px\" viewBox=\"0 0 457 500\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/ba89c1475af5d7b7a40b5eaf51b70175.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" viewBox=\"0 0 800 578\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/990ffb618eda44035580f02b792bc89f.jpg"
                ]
            },
            {
                "url": "https://tproger.ru/blogs/displaying-images-in-android-app/",
                "title": "Отображение картинок в Android-приложении: делегаты, тесты и никакой боли",
                "created_date": "26 сентября 2019 в 16:18",
                "body": "Евгений Зубков, Lead Android Engineer в Revolut\nВ приложениях мы показываем десятки тысяч картинок из разных источников — загружаем из сети, локально, генерируем. Плодить разные сущности кода для их отображения трудоёмко и неэффективно, логичнее делать обобщения. Расскажу, как мы построили систему отображения картинок из любых источников и снизили уровень собственной боли от этого процесса.\nПриложение Revolut\nВ нашем приложении много типов картинок для отображения — есть списки транзакций с разными иконками, списки карточек, Lottie-анимации, гифки. Покажу, как мы работаем с картинками на примере списка транзакций.\nУ нашего списка транзакций насчитывается несколько десятков типов ячеек. Для примера мы возьмем пять:\nРазные типы транзакций, где мы показываем картинку\nВ каждом случае картинка взята из отдельного источника или сгенерирована.\nКак работает стандартный способ отображения картинок\nСоздадим адаптер для такого списка.\nclass TransactionsAdapter : RecyclerView.Adapter() {\r\n    private var items = mutableListOf()\r\n    \r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.view_transaction, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHandler, position: Int) = Unit\r\n\r\n    override fun getItemCount() = items.size\r\n\r\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        private val imageView: ImageView = itemView.findViewById(R.id.image)\r\n    }\r\n}\nТак будет выглядеть стандартный шаблон адаптера для \nRecyclerView\n. Реализуем биндинг значений:\noverride fun onBindViewHolder(holder: ViewHandler, position: Int) {\r\n    val transaction = items[position]\r\n    when {\r\n        transaction.isContactWithAvatar() -> {\r\n            // Загрузка и отображение аватара\r\n        }\r\n        !transaction.isContactWithAvatar() -> {\r\n            // Отображение аватара\r\n        }\r\n        transaction.isMerchantWithAvatar() -> {\r\n            // Загрузка и отображение аватара\r\n        }\r\n        !transaction.isMerchantWithAvatar() -> {\r\n            // Загрузка изображения из источника \r\n        }\r\n    }\r\n}\nПоявляется портянка условий, потому что внутри адаптера для каждого вида транзакции мы строим отдельную логику. Можно усложнить и использовать свой \nViewType\n под каждый источник. Тем более к этому подталкивает контракт адаптера:\noverride fun getItemViewType(position: Int): Int {\r\n    val transaction = items[position]\r\n    return when {\r\n        transaction.isContactWithAvatar() -> VIEW_TYPE_CONTACT_WITH_AVATAR\r\n        !transaction.isContactWithAvatar() -> VIEW_TYPE_CONTACT_WITHOUT_AVATAR\r\n        transaction.isMerchantWithAvatar() -> VIEW_TYPE_MERCHANT_WITH_AVATAR\r\n        !transaction.isMerchantWithAvatar() -> VIEW_TYPE_MERCHANT_WITHOUT_AVATAR\r\n        else -> VIEW_TYPE_UNKNOWN\r\n    }\r\n}\nУчитывая, что в нашем случае может быть несколько десятков видов транзакций, стандартный способ реализации адаптера не подходит.\nКак улучшить адаптер\nМожем выделить два основных подхода к расширению — \nViewType\n или делегаты. Остальные не упоминаю специально: по своей сути они будут похожи на второй подход.\nПервый вариант — \nViewType\n — можно использовать, когда приложение простое, то есть содержит один простой список и, например, пару экранов. Нам этот способ не подходит, потому что такие адаптеры нельзя переиспользовать. Если мы будем расширять адаптер, добавляя новые \nViewType\n, адаптер будет неконтролируемо расти. Кроме того, под каждый экран нам придётся создавать свои адаптеры.\nВторой подход — с делегатами — выглядит привлекательнее. Он позволяет не создавать разные адаптеры под каждый экран, а использовать делегаты. Четыре года назад об этом \nписал\n Ханс Дорфман, и на GitHub можно найти много библиотек с реализацией такого подхода. Мы будем использовать \nреализацию\n самого Дорфмана.\nСмотрим на пример простого делегата, который отображает ProgressBar.\nclass LoadingDelegate :\r\n    AbsListItemAdapterDelegate<LoadingDelegate.Model, ListItem, LoadingDelegate.ViewHandler>() {\r\n    override fun onCreateViewHolder(parent: ViewGroup): ViewHandler =\r\n        ViewHandler(LayoutInflater.from(parent.context).inflate(R.layout.view_loading, parent, false))\r\n\r\n    override fun isForViewType(item: ListItem, items: MutableList<ListItem>, position: Int): Boolean = item is Model\r\n\r\n    override fun onBindViewHolder(item: Model, holder: ViewHandler, payloads: MutableList<Any>) = Unit\r\n\r\n    data class Model(override val listId: String) : ListItem\r\n\r\n    class ViewHandler(itemView: View) : RecyclerView.ViewHolder(itemView)\r\n}\r\n\r\ninterface ListItem {\r\n    val listId: String\r\n\r\n    fun calculatePayload(oldItem: ListItem): Any? = null\r\n}\nВнутри делегата, как и в стандартном адаптере, создаем \nViewHolder\n. Происходит биндинг. Главное отличие от стандартного адаптера в том, что у каждого делегата есть своя модель. Она будет использоваться, чтобы отобразить нужный тип ячейки. В свою очередь, у каждой модели есть интерфейс \nListItem\n с полем \nlistId\n и методом \ncalculatePayloads\n внутри.\nПерейдём к реализации адаптера, который умеет отображать делегаты.\nclass DiffAdapter(\r\n    delegates: List<AdapterDelegate<List<ListItem>>>\r\n) : AsyncListDifferDelegationAdapter<ListItem>(ListDiffCallback()) {\r\n    init {\r\n        delegates.forEach { delegate -> delegatesManager.addDelegate(delegate) }\r\n    }\r\n\r\n    private class ListDiffCallback<T : ListItem> : DiffUtil.ItemCallback<T>() {\r\n        override fun areItemsTheSame(oldItem: T, newItem: T): Boolean = \r\n            oldItem.listId == newItem.listId\r\n\r\n        override fun areContentsTheSame(oldItem: T, newItem: T): Boolean = \r\n            oldItem.equals(newItem)\r\n\r\n        override fun getChangePayload(oldItem: T, newItem: T): Any? = \r\n            newItem.calculatePayload(oldItem)\r\n    }\r\n}\nВ этой реализации видно, зачем нужен интерфейс \nListItem\n — его удобно использовать для \nListDiffCallback\n, чтобы \nDiffUtil\n не обновлял ячейки, которые не изменились, и не запускал лишние анимации. Кроме того, так как для моделей используется Data class, нам из коробки доступен \nequals\n. Вся работа с \nDiffUtil\n сводится к правильному созданию модели делегата.\nПод каждый экран адаптер создаётся так: мы в конструкторе передаём список делегатов, который экран должен поддерживать.\nprivate val adapter by lazy {\r\n    DiffAdapter(\r\n        listOf(\r\n            EmptyDelegate(),\r\n            ErrorDelegate(),\r\n            LoadingDelegate(),\r\n            LoadMoreDelegate(),\r\n            CardDelegate()\r\n        )\r\n    )\r\n}\nБлагодаря делегатам создание адаптера под каждый экран упрощается.\nКак отображать картинки\nТеперь уберём логику загрузки и отображения картинок из адаптера, разгрузим \nonBindViewHolder\n. Мы должны реализовать две сущности — модель картинки и делегат, который будет уметь загружать и отображать её. Рассмотрим пример модели, где загружаем картинку из ресурсов.\ninterface Image : Parcelable\r\n\r\n@Parcelize\r\ndata class ResourceImage(\r\n    @DrawableRes val drawableRes: Int,\r\n    @ColorRes val colorRes: Int? = null\r\n) : Image\nСначала сделаем интерфейс \nImage\n. Затем опишем набор параметров для \nResourceImage\n, по которым хотим настраивать отображение. В данном случае — \nid\n ресурса картинки и цвета, если хотим её закрасить.\nТеперь перейдём к делегату загрузки и определим его интерфейс. Отсюда понятно, зачем нам интерфейс \nImage\n.\ninterface ImageDisplayDelegate {\r\n\r\n    fun suitsFor(image: Image): Boolean\r\n\r\n    fun displayTo(image: Image, to: ImageView)\r\n\r\n}\nКаждый делегат должен уметь делать две вещи:\nопределять, умеет ли он отображать переданную картинку или нет;\nотображать картинку в \nImageView\n.\nТак будет выглядеть делегат загрузки картинки из ресурсов.\nclass ResourceImagesDisplayDelegate : ImageDisplayDelegate {\r\n\r\n    override fun suitsFor(image: Image) = image is ResourceImage\r\n\r\n    override fun displayTo(image: Image, to: ImageView) {\r\n        Glide.with(to.context).clear(to)\r\n        with(image as ResourceImage) {\r\n            val drawable = ContextCompat.getDrawable(to.context, drawableRes)\r\n            colorRes?.let { drawable?.setTint(ContextCompat.getColor(to.context, it)) }\r\n            to.setImageDrawable(drawable)\r\n        }\r\n    }\r\n\r\n}\nЗдесь:\nметод \nsuitsFor()\n проверяет, что \nimage\n — \nResourceImage\n;\nвнутри метода \ndisplayTo()\n мы устанавливаем картинку в \nImageView\n и, если \ncolorRes\n не \nnull\n, то выставляем \ntint\n.\nЭто самый простой из возможных делегатов.\nКак объединить делегаты\nОбъединим все поддерживаемые делегаты в одном месте и сократим интерфейс взаимодействия до метода \ndisplayTo()\n.\nclass ImagesDisplayeDelegates : ImageDisplayer {\r\n    protected val delegates = listOf(\r\n        ResourceImagesDisplayDelegate(),\r\n        UriImageDisplayDelegate(),\r\n        LottieImageDelegate(),\r\n        CountryImageLoader(),\r\n        CurrencyImageDisplayDelegate(),\r\n        BitmapImageDelegate(),\r\n        GifResourseImageDisplayDelegate(),\r\n        CardImagesDisplayDelegate(),\r\n        GrayedOutImageDecoratorDisplayDelegate()\r\n    )\r\n\r\n    override fun displayTo(image: Image?, to: ImageView) {\r\n        if (image != null) {\r\n            // Begin\r\n            delegates.first { delegate -> delegate.suitsFor(image) }\r\n                .displayTo(image, to)\r\n            // End\r\n        } else {\r\n            to.setImageDrawable(null)\r\n        }\r\n    }\r\n}\nОбращаю внимание на строку 18. При помощи метода \nfirst()\n мы находим первый подходящий делегат для отображения картинки. Если нужный делегат не найден, возможен краш, и это не ошибка проектирования. Мы намеренно придерживаемся принципа fail-fast, чтобы быстро избавиться от неочевидного поведения. Например, когда картинка не отобразилась, а мы не знаем причину.\nКак запустить трансформации\nРазберёмся, зачем в отображении транзакции могут понадобиться трансформации. Предположим, у нас есть аватарка контакта или продавца, которую мы получаем из сети. Она может иметь любую форму и размер, но в приложении Revolut мы должны отобразить её круглой и определённого размера — 40х40 dp.\nАватары в приложении Revolut\nНастроим модель и добьёмся такого поведения.\nВозьмём \nUrlImage\n. Любая картинка, которой нужна поддержка трансформаций, должна иметь соответствующие настройки. Можно ввести интерфейс \nTransformableImage\n со свойством \ntransformations\n:\n@Parcelize\r\ndata class UrlImage(\r\n    val url: String,\r\n    @DrawableRes val placeholder: Int? = null,\r\n    @DrawableRes val errorIcon: Int? = null,\r\n    override val transformations: ImageTransformations? = null\r\n) : Image, TransformableImage\r\n\r\nclass UrlImagesDisplayDelegate() : ImageDisplayDelegate {\r\n    override fun suitsFor(image: Image) = image is UrlImage\r\n\r\n    override fun displayTo(image: Image, to: ImageView) {\r\n      if (image !is UrlImage) throw IllegalStateException(\"UrlImagesDisplayDelegate displays only UrlImages\")\r\n      Glide.with(to.context).clear(to)\r\n      \r\n      Glide.with(to.context)\r\n            .load(image.url)\r\n            .apply(\r\n                RequestOptions()\r\n                    .error(image.errorIcon)\r\n                    .placeholder(image.placeholder)\r\n                    .applyImageTransformations(to.context.resources, image)\r\n            )\r\n            .into(to)\r\n    }\r\n}\nКласс настроек может выглядеть так:\n@Parcelize\r\ndata class ImageTransformations(\r\n    val rotation: Int? = null,\r\n    val circle: Boolean = false,\r\n    val square: Boolean = false,\r\n    val centerCrop: Boolean = false,\r\n    @Dimension(unit = Dimension.DP) val radiusDp: Int? = null,\r\n    @Dimension(unit = Dimension.DP) val widthDp: Int? = null,\r\n    @Dimension(unit = Dimension.DP) val heightDp: Int? = null\r\n) : Parcelable\nДля отображения картинок используем \nGlide\n. Соответственно, трансформации ориентированы под эту библиотеку.\ninternal interface TransformableImage {\r\n    val transformations: ImageTransformations?\r\n  \r\n    fun getGlideTransformsArray(resources: Resources): Array<Transformation<Bitmap>> {\r\n        return mutableListOf<Transformation<Bitmap>>().apply {\r\n            val widthDp = transformations?.widthDp\r\n            val heightDp = transformations?.heightDp\r\n            if (widthDp != null && heightDp != null) {\r\n                add(\r\n                    GlideScaleTransformation(\r\n                        newWidth = UiUtils.dpToPx(resources, widthDp.toFloat()).toInt(),\r\n                        newHeight = UiUtils.dpToPx(resources, heightDp.toFloat()).toInt()\r\n                    )\r\n                )\r\n            } else {\r\n                heightDp?.let { height ->\r\n                    add(\r\n                        GlideScaleTransformation\r\n                            .withNewHeight(UiUtils.dpToPx(resources, height.toFloat()).toInt())\r\n                    )\r\n                }\r\n                widthDp?.let { width ->\r\n                    add(\r\n                        GlideScaleTransformation\r\n                            .withNewWidth(UiUtils.dpToPx(resources, width.toFloat()).toInt())\r\n                    )\r\n                }\r\n            }\r\n\r\n            transformations?.rotation?.let { rotation ->\r\n                add(RotationTransformer(rotation))\r\n            }\r\n            if (transformations?.centerCrop == true) {\r\n                add(CenterCrop())\r\n            }\r\n            if (transformations?.square == true) {\r\n                add(SquareTransformation())\r\n            }\r\n            transformations?.radiusDp?.let { radius ->\r\n                add(RoundedCorners(UiUtils.dpToPx(resources, radius.toFloat()).toInt()))\r\n            }\r\n            if (transformations?.circle == true) {\r\n                add(CircleCrop())\r\n            }\r\n        }.toTypedArray()\r\n    }\r\n}\nТак создаётся массив преобразований. Отмечу два момента, которые помогут избежать лишней работы.\nВо-первых, поля помечены как nullable, и это позволяет задавать только нужные трансформации. Во-вторых, не очевидно, но критично, в каком порядке трансформации будут вызваны.\nПредставим, что на входе — очень широкая картинка, которую надо повернуть, отмасштабировать и скруглить. Сравним два сценария развития событий.\n// Первый\r\nadd(RotationTransformer(degrees = 90))\r\nadd(CircleCrop())\r\nadd(GlideScaleTransformation(width = 100))\r\n\r\n// Второй\r\nadd(GlideScaleTransformation(width = 100))\r\nadd(RotationTransformer(degrees = 90))\r\nadd(CircleCrop())\nВ первом случае сначала мы поворачиваем картинку на 90 градусов, затем закругляем и только после этого меняем ширину. Во втором случае мы сначала меняем ширину.\nВторой сценарий эффективнее, так как поворот и скругление «дешевле» делать на меньших изображениях.\nВернёмся к реализации. Ранее мы создали массив, который теперь должны передать в Glide, когда он будет отображать картинку по URL. Создаём объект \nRequestOptions\n и передаём ему массив. Помним, что нельзя передавать пустой массив — Glide упадёт. Поэтому обязательно добавляем проверку.\nval options = RequestOptions().apply {\r\n    val transformations = image.getGlideTransformsArray(resources)\r\n    if (transformations.isNotEmpty()) {\r\n        transforms(*transformations)\r\n    }\r\n}\r\n\r\nGlide.with(context)\r\n    .load(url)\r\n    .apply(options)\r\n    .into(imageView)\nТак как будем переиспользовать трансформации в разных делегатах, будет удобно вынести их в экстеншн \napplyImageTransformations\n.\ninternal fun RequestOptions.applyImageTransformations(resources: Resources, image: TransformableImage): RequestOptions = \r\n    apply {\r\n        val transformations = image.getGlideTransformsArray(resources)\r\n        if (transformations.isNotEmpty()) {\r\n            transforms(*transformations)\r\n        }\r\n    }\r\n\r\nfun getGlideRequestOptions(resources: Resources): RequestOptions = \r\n    RequestOptions().applyImageTransformations(resources, this)\r\n\nТакже добавляем метод в интерфейс \nTransformableImage\n — \ngetGlideTransformsArray()\n. Сам интерфейс и экстеншен \napplyImageTransformations\n помечены как \ninternal\n. Так мы избегаем утечки абстракции, и конечный пользователь моделей и делегатов не знает, что используется внутри — в публичных интерфейсах Glide не виден. Удобно, если захотим заменить Glide на другую библиотеку.\nВ итоге код сокращается до такого вида:\nGlide.with(context)\r\n    .load(image.url)\r\n    .apply(image.getGlideRequestOptions(resources))\r\n    .into(imageView)\nКак создать делегат для отображения транзакции\nПосмотрим снова на наш список транзакций. Мы уже знаем, как работает адаптер делегатов. Теперь создадим делегат для отображения транзакции.\nБазовая реализация адаптера выглядит так:\nclass ImageDelegate : BaseRecyclerViewDelegate<ImageDelegate.Model, ImageDelegate.Holder>(\r\n    viewType = R.layout.delegate_image,\r\n    rule = DelegateRule { _, data -> data is Model }\r\n) {\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup) = Holder(parent.inflate(viewType))\r\n\r\n    override fun onBindViewHolder(holder: Holder, data: Model, pos: Int, payloads: List<Any>?) = Unit\r\n\r\n    data class Model(\r\n        override val listId: String\r\n    ) : ListItem\r\n\r\n    class Holder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val imageView: ImageView = itemView.image\r\n    }\r\n}\nОтображение текста убрано для упрощения. Мы научим этот делегат отображать транзакции с картинками из сети, из ресурсов, показывать аватар контакта, который создаётся из инициалов.\nСначала модифицируем модель.\ndata class Model(\r\n    override val listId: String,\r\n    val resourceId: Int,\r\n    val url: String? = null,\r\n    val doubleLettersImage: String? = null\r\n) : ListItem\nВ каждом случае передаём свои параметры, все в одном месте. Примерно так будет отображаться картинка:\noverride fun onBindViewHolder(holder: Holder, data: Model, pos: Int, payloads: List<Any>?) {\r\n    if (data.url != null) {\r\n        // Скачивание по URL и отображение\r\n    } else if (data.doubleLettersImage != null) {\r\n        // Создание битмапа из строки и отображение\r\n    } else {\r\n        holder.imageView.setImageResource(data.resourceId)\r\n    }\r\n}\nСразу видим минусы:\nтакое решение тяжело расширять;\nважен порядок, который в свою очередь может быть неочевидным;\nбизнес-логика находится внутри адаптера (делегата).\nНачнём сначала и попробуем использовать делегаты. Сделаем несколько доработок.\nВ модели вместо всех параметров оставляем только картинку на отображение:\nclass ImageDelegate(\r\n    //\r\n    private val imageDisplayer: ImageDisplayer\r\n    //\r\n) : BaseRecyclerViewDelegate<ImageDelegate.Model, ImageDelegate.Holder>(\r\n    viewType = R.layout.delegate_image,\r\n    rule = DelegateRule { _, data -> data is Model }\r\n) {\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup) = Holder(parent.inflate(viewType))\r\n\r\n    override fun onBindViewHolder(holder: Holder, data: Model, pos: Int, payloads: List<Any>?) {\r\n        //\r\n        imageDisplayer.displayTo(data.image, holder.imageView)\r\n        //\r\n    }\r\n\r\n    data class Model(\r\n        override val listId: String,\r\n        //\r\n        val image: Image\r\n        //\r\n    ) : ListItem\r\n\r\n    class Holder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val imageView: ImageView = itemView.image\r\n    }\r\n}\nВ итоге список транзакций примет такой вид:\nlistOf(\r\n    ImageDelegate.Model(image = ResourceImage(R.drawable.ic_no_avatar)),\r\n    ImageDelegate.Model(image = UrlImage(\"url to merchant\")),\r\n    ImageDelegate.Model(image = DoubleLettersImage(\"EZ\")),\r\n    ImageDelegate.Model(image = UrlImage(\"url to user avatar\")),\r\n)\nПоведение становится более явным, и мы вынесли логику из адаптера.\nКак создать делегат для генерируемой картинки\nТеперь рассмотрим частный случай и создадим делегат, который будет генерировать изображение из двух символов. В первую очередь, определим требования к этому делегату. Очевидно, он должен уметь отображать буквы и настраивать отображение.\nМодель будет выглядеть следующим образом:\n@Parcelize\r\ndata class DoubleLettersImage(\r\n    val letters: String,\r\n    @ColorRes val textColor: Int = Color.GRAY,\r\n    @ColorRes val backgroundColor: Int = Color.TRANSPARENT,\r\n    val sizeInDp: Int = 40,\r\n    val textSizeInDp: Int = 40,\r\n    override val transformations: ImageTransformations? = null\r\n) : Image, TransformableImage\nДля настройки фона используем \nImageTransformations\n.\nПерейдём к генерации битмапы. Можем использовать обертку \nTextDrawable\n, где внутри отрисовка идёт при помощи \nCanvas\n. Далее эту битмапу нужно обработать и установить в \nImageView\n.\nprivate fun generateBitmap(image: DoubleLettersImage, resources: Resources): Bitmap {\r\n    return TextDrawable.builder()\r\n        .beginConfig()\r\n        .textColor(image.textColor)\r\n        .height(dpToPx(resources, image.sizeInDp))\r\n        .width(dpToPx(resources, image.sizeInDp))\r\n        .fontSize(spToPx(resources, image.textSizeInSp))\r\n        .useFont(defaultFont)\r\n        .endConfig()\r\n        .buildBitmap(image.letters, image.backgroundColor);\r\n}\nЗа счёт использования экстеншена реализация делегата занимает пару строк. Покажу, как он работает.\n \nПервый вариант, где заданы базовые настройки:\nВо втором варианте добавляем трансформацию скругления:\nИ в третьем — поворачиваем картинку. Нам ничего не стоит отображать иконку аватара в том виде, в котором это требуется согласно дизайну:\nКак создать кастомную трансформацию\nПредставим, что нам надо сделать флип по горизонтали. Сначала создадим каркас класса трансформации:\nclass FlipTransformation private constructor(\r\n    private val horizontal: Boolean\r\n) : BitmapTransformation() {\r\n    override fun transform(pool: BitmapPool, toTransform: Bitmap, outWidth: Int, outHeight: Int): Bitmap = TODO()\r\n    \r\n    override fun updateDiskCacheKey(messageDigest: MessageDigest) = Unit\r\n}\nВ случае с Glide базовый класс должен быть \nBitmapTransformation\n. Glide снова упрощает жизнь, так как содержит \nTransformationUtils\n с нужными методами. Остаётся лишь добавить эту трансформацию к остальным.\noverride fun transform(pool: BitmapPool, toTransform: Bitmap, outWidth: Int, outHeight: Int): Bitmap {\r\n    val exifOrientation = if (horizontal) {\r\n        ExifInterface.ORIENTATION_FLIP_HORIZONTAL\r\n    } else {\r\n        ExifInterface.ORIENTATION_FLIP_VERTICAL\r\n    }\r\n    return TransformationUtils.rotateImageExif(pool, toTransform, exifOrientation)\r\n}\r\n\r\nif (transformations?.centerCrop == true) {\r\n    add(CenterCrop())\r\n}\r\nif (transformations?.flipHorizontal != null) {\r\n    add(FlipTransformation(transformations?.flipHorizontal))\r\n}\r\ntransformations?.radiusDp?.let { radius ->\r\n    add(RoundedCorners(UiUtils.dpToPx(resources, radius.toFloat()).toInt()))\r\n}\nКак тестировать\nОдна из главных причин, почему стоит использовать именно этот способ работы с картинками — тестирование.\n\nНарисуем примерную схему архитектуры (clean) и покажем, как данные доходят до слоя UI. В качестве данных будем рассматривать список транзакций.\nПример чистой архитектуры\nПолучилась довольно стандартная схема. База данных возвращает список моделей, на уровне репозитория мы мапим их в модели доменного уровня. Тот, в свою очередь, передаст их на уровень выше — до UI. Каждый этап маппинга моделей покрывается тестами.\nРассмотрим, как может выглядеть доменная модель транзакции:\ndata class Transaction(\r\n    val id: String,\r\n    val amount: Money,\r\n    val date: DateTime,\r\n    val type: TransactionType\r\n)\nУ неё есть доступ к \nid\n транзакции, сумме и дате. Как понять, что показывать — это денежный перевод или покупка в магазине? Откуда брать название, URL? Нам помогут sealed class.\nsealed class TransactionType {\r\n    data class Transfer(\r\n        val contactName: String,\r\n        val contactAvatarUrl: String? = null\r\n    ) :  TransactionType()\r\n    \r\n    data class CardPayment(\r\n        val merchantName: String,\r\n        val merchantRating: Double = 0.0,\r\n        val merchantLogoUrl: String? = null\r\n    ) :  TransactionType()\r\n}\nЗдесь мы видим два типа транзакций — перевод и покупка. Каждый имеет уникальный набор параметров.\nДалее разберёмся, что является моделью для слоя UI, и для этого вспомним, как выглядел наш делегат для адаптера \nRecyclerView\n.\nclass ImageDelegate(\r\n    private val imageDisplayer: ImageDisplayer\r\n) : BaseRecyclerViewDelegate<ImageDelegate.Model, ImageDelegate.Holder>(\r\n    viewType = R.layout.delegate_image,\r\n    rule = DelegateRule { _, data -> data is Model }\r\n) {\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup) = Holder(parent.inflate(viewType))\r\n\r\n    override fun onBindViewHolder(holder: Holder, data: Model, pos: Int, payloads: List<Any>?) {\r\n        imageDisplayer.displayTo(data.image, holder.imageView)\r\n    }\r\n\r\n    //\r\n    data class Model(\r\n        override val listId: String,\r\n        val image: Image\r\n    ) : ListItem\r\n    //\r\n\r\n    class Holder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val imageView: ImageView = itemView.image\r\n    }\r\n}\nМодель делегата отлично подходит в качестве UI-модели.\nРассмотрим несколько сценариев, которые можем протестировать только за счёт использования делегатов для адаптера и картинок.\nКейс 1 — Перевод контакту без аватарки\nTransaction(\r\n    id = \"some_id\",\r\n    amount = Money(100, Currency.GBP),\r\n    date = DateTime.parse(\"some_date\"),\r\n    type = TransactionType.Transfer(\r\n        contactName = \"Some Name\"\r\n    )\r\n)\r\n\r\n// Should be mapped to:\r\n\r\nImageDelegate.Model(\r\n    listId = \"some_id\",\r\n    image = DoubleLettersImage(\r\n        letters = \"SN\",\r\n        transformations = ImageTransformations(\r\n            circle = true\r\n        )\r\n    )\r\n)\nПроверяем, создаётся ли модель картинки для отображения инициалов, если отсутствует URL аватара .\nКейс 2 — Перевод контакту с аватаркой\nTransaction(\r\n    id = \"some_id\",\r\n    amount = Money(100, Currency.GBP),\r\n    date = DateTime.parse(\"some_date\"),\r\n    type = TransactionType.Transfer(\r\n        contactName = \"Some Name\",\r\n        contactAvatarUrl = \"some_url\"\r\n    )\r\n)\r\n\r\n// Should be mapped to:\r\n\r\nImageDelegate.Model(\r\n    listId = \"some_id\",\r\n    image = UrlImage(\r\n        url = \"some_url\",\r\n        transformations = ImageTransformations(\r\n            circle = true\r\n        )\r\n    )\r\n)\nОжидаем, что будет создана \nUrlImage\n с одной трансформацией.\nКейс 3 — Покупка в магазине, у которого в системе есть аватар\nTransaction(\r\n    id = \"some_id\",\r\n    amount = Money(100, Currency.GBP),\r\n    date = DateTime.parse(\"some_date\"),\r\n    type = TransactionType.CardPayment(\r\n        merchantName = \"Netflix\",\r\n        merchantLogoUrl = \"some_url\"\r\n    )\r\n)\r\n\r\n// Should be mapped to:\r\n\r\nImageDelegate.Model(\r\n    listId = \"some_id\",\r\n    image = UrlImage(\r\n        url = \"some_url\",\r\n        transformations = ImageTransformations(\r\n            circle = true\r\n        )\r\n    )\r\n)\nИдентично кейсу 2: ожидаем, что будет создана \nUrlImage\n с одной трансформацией.\nКейс 4 — Покупка в магазине без аватарки\nTransaction(\r\n    id = \"some_id\",\r\n    amount = Money(100, Currency.GBP),\r\n    date = DateTime.parse(\"some_date\"),\r\n    type = TransactionType.CardPayment(\r\n        merchantName = \"Netflix\"\r\n    )\r\n)\r\n\r\n// Should be mapped to:\r\n\r\nImageDelegate.Model(\r\n    listId = \"some_id\",\r\n    image = ResourceImage(\r\n        drawableRes = R.drawable.ic_no_avatar\r\n    )\r\n)\nВ данном случае можем сделать дополнительную проверку: каждая покупка может относиться к разным категориям, и иконки будут отличаться. Можем также проверить, мапим ли каждую категорию в нужную иконку.\nВыводы\nОтображение картинок с помощью делегатов даёт несколько преимуществ.\nВо-первых, мы освобождаем адаптер от логики, которой в нём быть не должно. Он не должен отвечать за выбор источника картинки в зависимости от набора параметров.\nВо-вторых, мы абстрагировались от способа загрузки и обработки изображений. Теперь в любой момент времени мы почти без боли можем заменить Glide на что-то другое.\nВ-третьих, как следствие, мы можем тестировать отображение нужного типа картинки. То есть фактически тестировать отображение данных на экране.\nНаконец, этот подход просто очень удобен.\nКак начать разрабатывать под Android\ntproger.ru\nНе смешно? А здесь смешно: \n@ithumor\nAndroid\n, \nМобильная разработка\nТакже рекомендуем:\nКак начать разрабатывать под Android\nБесплатные материалы для программистов\nКак разрабатывать на Python под Android\nЧто такое Kotlin и с чем его едят: обучающее руководство и сравнение нового языка Android-разработки с Java",
                "images": [
                    "https://cdn.tproger.ru/wp-content/plugins/a3-lazy-load/assets/images/lazy_placeholder.gif",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/iconfinder-icon-2-cover-icon.png",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"90px\" viewBox=\"0 0 90 90\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/Evgenii-Zubkov-Revolut-e1569416218995-150x150.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1884px\" viewBox=\"0 0 1884 1078\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/02_Zubkov_How-we-display-images.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1036px\" viewBox=\"0 0 1036 390\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image36.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1514px\" viewBox=\"0 0 1514 488\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image12-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1514px\" viewBox=\"0 0 1514 456\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image7-2.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1496px\" viewBox=\"0 0 1496 456\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image5-1-1.jpg",
                    "data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"1712px\" viewBox=\"0 0 1712 808\"%3E%3C/svg%3E",
                    "https://cdn.tproger.ru/wp-content/uploads/2019/09/image15.jpg"
                ]
            }
        ]
    }
]